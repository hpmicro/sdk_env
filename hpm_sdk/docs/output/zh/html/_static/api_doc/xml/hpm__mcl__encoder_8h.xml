<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="hpm__mcl__encoder_8h" kind="file" language="C++">
    <compoundname>hpm_mcl_encoder.h</compoundname>
    <includes refid="hpm__mcl__common_8h" local="yes">hpm_mcl_common.h</includes>
    <includes refid="hpm__mcl__filter_8h" local="yes">hpm_mcl_filter.h</includes>
    <includedby refid="hpm__mcl__loop_8h" local="yes">middleware/hpm_mcl_v2/core/loop/hpm_mcl_loop.h</includedby>
    <includedby refid="hpm__mcl__encoder_8c" local="yes">middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>hpm_mcl_filter.h</label>
        <link refid="hpm__mcl__filter_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h</label>
        <link refid="hpm__mcl__encoder_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>hpm_mcl_cfg.h</label>
        <link refid="hpm__mcl__cfg_8h"/>
      </node>
      <node id="2">
        <label>hpm_mcl_common.h</label>
        <link refid="hpm__mcl__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>hpm_mcl_math.h</label>
        <link refid="hpm__mcl__math_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>hpm_mcl_physical.h</label>
        <link refid="hpm__mcl__physical_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="12">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="13">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.c</label>
        <link refid="hpm__mcl__detect_8c"/>
      </node>
      <node id="3">
        <label>middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.h</label>
        <link refid="hpm__mcl__detect_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>middleware/hpm_mcl_v2/core/loop/hpm_mcl_loop.c</label>
        <link refid="hpm__mcl__loop_8c"/>
      </node>
      <node id="2">
        <label>middleware/hpm_mcl_v2/core/loop/hpm_mcl_loop.h</label>
        <link refid="hpm__mcl__loop_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c</label>
        <link refid="hpm__mcl__encoder_8c"/>
      </node>
      <node id="1">
        <label>middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h</label>
        <link refid="hpm__mcl__encoder_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmcl__encoder__uvw__level__t" prot="public">mcl_encoder_uvw_level_t</innerclass>
    <innerclass refid="structmcl__encoder__callback" prot="public">mcl_encoder_callback</innerclass>
    <innerclass refid="structmcl__encoder__cal__speed__t__function__t" prot="public">mcl_encoder_cal_speed_t_function_t</innerclass>
    <innerclass refid="structmcl__encoder__cal__speed__m__function__t" prot="public">mcl_encoder_cal_speed_m_function_t</innerclass>
    <innerclass refid="structmcl__encoder__cal__speed__m__t__function__t" prot="public">mcl_encoder_cal_speed_m_t_function_t</innerclass>
    <innerclass refid="structmcl__encoder__cal__speed__pll__cfg__t" prot="public">mcl_encoder_cal_speed_pll_cfg_t</innerclass>
    <innerclass refid="structmcl__encoder__cal__speed__pll__function__t" prot="public">mcl_encoder_cal_speed_pll_function_t</innerclass>
    <innerclass refid="structmcl__encoer__cfg__t" prot="public">mcl_encoer_cfg_t</innerclass>
    <innerclass refid="structmcl__encoder__t" prot="public">mcl_encoder_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="hpm__mcl__encoder_8h_1ad2a152bb007b7c70eaef461704193a57" prot="public" static="no">
        <name>MCL_ENCODER_CAL_STRUCT_MAX_MEMMORY</name>
        <initializer>(16)</initializer>
        <briefdescription>
<para>Maximum memory required for computational speed, word. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="70" column="9" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" bodystart="70" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <enumvalue id="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5afd599380584e61bc8b2c41b132dbeeec" prot="public">
          <name>mcl_encoder_start_sample_error</name>
          <initializer>= MAKE_STATUS(mcl_group_encoder, 0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a4a52a0febf45d55e95322eed15035c56" prot="public">
          <name>mcl_encoder_get_tick_error</name>
          <initializer>= MAKE_STATUS(mcl_group_encoder, 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a8b781e73175ea13016617bbd270dd784" prot="public">
          <name>mcl_encoder_update_tick_error</name>
          <initializer>= MAKE_STATUS(mcl_group_encoder, 2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a2fd33c10cc2c0f4c63de0414b9f458f8" prot="public">
          <name>mcl_encoder_get_theta_error</name>
          <initializer>= MAKE_STATUS(mcl_group_encoder, 3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a52f18d0da8817aeec289c2e5d37f6b9c" prot="public">
          <name>mcl_encoder_not_ready</name>
          <initializer>= MAKE_STATUS(mcl_group_encoder, 4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a5e1dd1aa4446e881584a299a4dd55f46" prot="public">
          <name>mcl_encoder_get_uvw_error</name>
          <initializer>= MAKE_STATUS(mcl_group_encoder, 5)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="12" column="1" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" bodystart="12" bodyend="19"/>
      </memberdef>
      <memberdef kind="enum" id="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7" prot="public" static="no" strong="no">
        <type></type>
        <name>mcl_encoder_status_t</name>
        <enumvalue id="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7ab6147603912b254d747825d8f68c5508" prot="public">
          <name>encoder_status_null</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7aee83104b716418ad425ca21763e9d405" prot="public">
          <name>encoder_status_init</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7a003cad4c5d94b397f961b8c64a5ea4f9" prot="public">
          <name>encoder_status_run</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7a89be9003ae427ad246588980cd703d01" prot="public">
          <name>encoder_status_fail</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="21" column="1" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6" prot="public" static="no" strong="no">
        <type></type>
        <name>mcl_encoder_cal_speed_function_t</name>
        <enumvalue id="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6aa7853ce78129968dec6e4cdb43acca59" prot="public">
          <name>encoder_method_t</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6a8efef5d3ec0ccd64507387bf771ac441" prot="public">
          <name>encoder_method_m</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6af1ec93ee012994eaf993e1f8dfbf197f" prot="public">
          <name>encoder_method_m_t</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6a943c9872ed17ffa925faa298aa21f3fb" prot="public">
          <name>encoder_method_pll</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6abb15c589692e87efa72f4f8b97a00730" prot="public">
          <name>encoder_method_user</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Method of calculating speed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="32" column="1" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" bodystart="32" bodyend="38"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hpm__mcl__encoder_8h_1a87939416b490f3207c13c53e4dac72ab" prot="public" static="no">
        <type>struct <ref refid="structmcl__encoder__callback" kindref="compound">mcl_encoder_callback</ref></type>
        <definition>typedef struct mcl_encoder_callback mcl_encoder_callback_t</definition>
        <argsstring></argsstring>
        <name>mcl_encoder_callback_t</name>
        <briefdescription>
<para>callback function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="64" column="24"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1a0c3b77c8d50cba6c95816b8eb555ecea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref></type>
        <definition>hpm_mcl_stat_t hpm_mcl_encoder_init</definition>
        <argsstring>(mcl_encoder_t *encoder, mcl_cfg_t *mcl_cfg, mcl_encoer_cfg_t *encoder_cfg, mcl_filter_iir_df1_t *iir)</argsstring>
        <name>hpm_mcl_encoder_init</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <param>
          <type><ref refid="structmcl__cfg__t" kindref="compound">mcl_cfg_t</ref> *</type>
          <declname>mcl_cfg</declname>
        </param>
        <param>
          <type><ref refid="structmcl__encoer__cfg__t" kindref="compound">mcl_encoer_cfg_t</ref> *</type>
          <declname>encoder_cfg</declname>
        </param>
        <param>
          <type><ref refid="structmcl__filter__iir__df1__t" kindref="compound">mcl_filter_iir_df1_t</ref> *</type>
          <declname>iir</declname>
        </param>
        <briefdescription>
<para>Initialize encoder data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mcl_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__cfg__t" kindref="compound">mcl_cfg_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoder_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoer__cfg__t" kindref="compound">mcl_encoer_cfg_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iir</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__filter__iir__df1__t" kindref="compound">mcl_filter_iir_df1_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>parameter check</para>
<para>null function initialisation</para>
<para>parameter initial</para>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="173" column="16" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="11" bodyend="62" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="173" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1a0c0cb83fb5da4e216567125747517da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref></type>
        <definition>hpm_mcl_stat_t hpm_mcl_encoder_start_sample</definition>
        <argsstring>(mcl_encoder_t *encoder)</argsstring>
        <name>hpm_mcl_encoder_start_sample</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <briefdescription>
<para>Encoder starts sampling. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="181" column="16" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="64" bodyend="77" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="181" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1a488c3471f2d49a3565f9eab503472faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref></type>
        <definition>hpm_mcl_stat_t hpm_mcl_encoder_set_initial_theta</definition>
        <argsstring>(mcl_encoder_t *encoder, float theta)</argsstring>
        <name>hpm_mcl_encoder_set_initial_theta</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Sets the initial value of the angle. Normally, the programme does the initial value setting automatically, but if you are not satisfied with the result, you can set the initial value. The initial value determines the zero point of the electrical angle. This means that the angle read by the sensor is calibrated to zero by the initial value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to calibrate electrical angle to zero </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> <ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="194" column="16" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="79" bodyend="85" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="194" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1a570404d74284f07ad4f0a671f58c6f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref></type>
        <definition>hpm_mcl_stat_t hpm_mcl_encoder_process</definition>
        <argsstring>(mcl_encoder_t *encoder, uint32_t tick_deta)</argsstring>
        <name>hpm_mcl_encoder_process</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>tick_deta</declname>
        </param>
        <briefdescription>
<para>Encoder processing, cycle call. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tick_deta</parametername>
</parameternamelist>
<parameterdescription>
<para>Difference in the number of cycles between two calls </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>iir filter</para>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="203" column="16" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="87" bodyend="192" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="203" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1ae5fb00ae11775e198b3006df7c219504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref></type>
        <definition>hpm_mcl_stat_t hpm_mcl_encoder_set_status</definition>
        <argsstring>(mcl_encoder_t *encoder, mcl_encoder_status_t status)</argsstring>
        <name>hpm_mcl_encoder_set_status</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <param>
          <type><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7" kindref="member">mcl_encoder_status_t</ref></type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Force update of encoder status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7" kindref="member">mcl_encoder_status_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="212" column="16" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="194" bodyend="199" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="212" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1a2dd59824fc0a0751c697088158e0e5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hpm_mcl_encoder_get_theta</definition>
        <argsstring>(mcl_encoder_t *encoder)</argsstring>
        <name>hpm_mcl_encoder_get_theta</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <briefdescription>
<para>Get the encoder angle value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>angle value, rad </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="220" column="7" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="216" bodyend="223" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="220" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1a7a6b6bc0edcb28692798f6950ef3f223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hpm_mcl_encoder_get_speed</definition>
        <argsstring>(mcl_encoder_t *encoder)</argsstring>
        <name>hpm_mcl_encoder_get_speed</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <briefdescription>
<para>Get speed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rad/s </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="228" column="7" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="230" bodyend="233" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="228" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1a4ad192a198270565a6cb71e1fd8d9f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hpm_mcl_encoder_get_forecast_theta</definition>
        <argsstring>(mcl_encoder_t *encoder)</argsstring>
        <name>hpm_mcl_encoder_get_forecast_theta</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <briefdescription>
<para>Get the angle predicted from the speed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>theta, rad </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="236" column="7" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="235" bodyend="238" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="236" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1ae52331fddf8b6b71707c5b21c31bad6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hpm_mcl_encoder_get_raw_theta</definition>
        <argsstring>(mcl_encoder_t *encoder)</argsstring>
        <name>hpm_mcl_encoder_get_raw_theta</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <briefdescription>
<para>Getting the raw angle data of the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>theta, rad </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="244" column="7" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="207" bodyend="214" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="244" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1a850d2f8593c93fdd6110defd602459c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_mcl_encoder_force_theta</definition>
        <argsstring>(mcl_encoder_t *encoder, float theta, bool enable)</argsstring>
        <name>hpm_mcl_encoder_force_theta</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <param>
          <type>float</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Force setting of the output angle of the encoder function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>rad </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable or disable the forced output function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="253" column="6" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="201" bodyend="205" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="253" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1adc0e5b4f2d1fa7d929c49edbde81db6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref></type>
        <definition>hpm_mcl_stat_t hpm_mcl_encoder_get_absolute_theta</definition>
        <argsstring>(mcl_encoder_t *encoder, float *theta)</argsstring>
        <name>hpm_mcl_encoder_get_absolute_theta</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>Get the absolute position of the angle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>rad </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="262" column="16" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="240" bodyend="244" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="262" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1a4b3eb72f466cba80de2d95ef9c798246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref></type>
        <definition>hpm_mcl_stat_t hpm_mcl_encoder_get_uvw_status</definition>
        <argsstring>(mcl_encoder_t *encoder, mcl_encoder_uvw_level_t *level)</argsstring>
        <name>hpm_mcl_encoder_get_uvw_status</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <param>
          <type><ref refid="structmcl__encoder__uvw__level__t" kindref="compound">mcl_encoder_uvw_level_t</ref> *</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Get level status of uvw. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>0: low , 1: high </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="271" column="16" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="246" bodyend="250" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="271" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__encoder_8h_1ae13b8fb0b56887159f269458f0e004be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float hpm_mcl_encoder_get_sensorless_theta</definition>
        <argsstring>(mcl_encoder_t *encoder)</argsstring>
        <name>hpm_mcl_encoder_get_sensorless_theta</name>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <briefdescription>
<para>Get sensorless theta. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>theta </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" line="279" column="7" bodyfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.c" bodystart="225" bodyend="228" declfile="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h" declline="279" declcolumn="7"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_MCL_ENCODER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_MCL_ENCODER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__mcl__common_8h" kindref="compound">hpm_mcl_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__mcl__filter_8h" kindref="compound">hpm_mcl_filter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13" refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5afd599380584e61bc8b2c41b132dbeeec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5afd599380584e61bc8b2c41b132dbeeec" kindref="member">mcl_encoder_start_sample_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="hpm__mcl__common_8h_1ab2ac1a466d1b760de790a955526e6edcae5f2954ae93a18b9bfbc3fa513c9186b" kindref="member">mcl_group_encoder</ref>,<sp/>0),</highlight></codeline>
<codeline lineno="14" refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a4a52a0febf45d55e95322eed15035c56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a4a52a0febf45d55e95322eed15035c56" kindref="member">mcl_encoder_get_tick_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="hpm__mcl__common_8h_1ab2ac1a466d1b760de790a955526e6edcae5f2954ae93a18b9bfbc3fa513c9186b" kindref="member">mcl_group_encoder</ref>,<sp/>1),</highlight></codeline>
<codeline lineno="15" refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a8b781e73175ea13016617bbd270dd784" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a8b781e73175ea13016617bbd270dd784" kindref="member">mcl_encoder_update_tick_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="hpm__mcl__common_8h_1ab2ac1a466d1b760de790a955526e6edcae5f2954ae93a18b9bfbc3fa513c9186b" kindref="member">mcl_group_encoder</ref>,<sp/>2),</highlight></codeline>
<codeline lineno="16" refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a2fd33c10cc2c0f4c63de0414b9f458f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a2fd33c10cc2c0f4c63de0414b9f458f8" kindref="member">mcl_encoder_get_theta_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="hpm__mcl__common_8h_1ab2ac1a466d1b760de790a955526e6edcae5f2954ae93a18b9bfbc3fa513c9186b" kindref="member">mcl_group_encoder</ref>,<sp/>3),</highlight></codeline>
<codeline lineno="17" refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a52f18d0da8817aeec289c2e5d37f6b9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a52f18d0da8817aeec289c2e5d37f6b9c" kindref="member">mcl_encoder_not_ready</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="hpm__mcl__common_8h_1ab2ac1a466d1b760de790a955526e6edcae5f2954ae93a18b9bfbc3fa513c9186b" kindref="member">mcl_group_encoder</ref>,<sp/>4),</highlight></codeline>
<codeline lineno="18" refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a5e1dd1aa4446e881584a299a4dd55f46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ab6a3e1c048f5b6cd325a663301406df5a5e1dd1aa4446e881584a299a4dd55f46" kindref="member">mcl_encoder_get_uvw_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="hpm__mcl__common_8h_1ab2ac1a466d1b760de790a955526e6edcae5f2954ae93a18b9bfbc3fa513c9186b" kindref="member">mcl_group_encoder</ref>,<sp/>5),</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="22" refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7ab6147603912b254d747825d8f68c5508" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7ab6147603912b254d747825d8f68c5508" kindref="member">encoder_status_null</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="23" refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7aee83104b716418ad425ca21763e9d405" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7aee83104b716418ad425ca21763e9d405" kindref="member">encoder_status_init</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="24" refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7a003cad4c5d94b397f961b8c64a5ea4f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7a003cad4c5d94b397f961b8c64a5ea4f9" kindref="member">encoder_status_run</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="25" refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7a89be9003ae427ad246588980cd703d01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7a89be9003ae427ad246588980cd703d01" kindref="member">encoder_status_fail</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}<sp/><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7" kindref="member">mcl_encoder_status_t</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33" refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6aa7853ce78129968dec6e4cdb43acca59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6aa7853ce78129968dec6e4cdb43acca59" kindref="member">encoder_method_t</ref>,</highlight></codeline>
<codeline lineno="34" refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6a8efef5d3ec0ccd64507387bf771ac441" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6a8efef5d3ec0ccd64507387bf771ac441" kindref="member">encoder_method_m</ref>,</highlight></codeline>
<codeline lineno="35" refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6af1ec93ee012994eaf993e1f8dfbf197f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6af1ec93ee012994eaf993e1f8dfbf197f" kindref="member">encoder_method_m_t</ref>,</highlight></codeline>
<codeline lineno="36" refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6a943c9872ed17ffa925faa298aa21f3fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6a943c9872ed17ffa925faa298aa21f3fb" kindref="member">encoder_method_pll</ref>,</highlight></codeline>
<codeline lineno="37" refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6abb15c589692e87efa72f4f8b97a00730" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6abb15c589692e87efa72f4f8b97a00730" kindref="member">encoder_method_user</ref>,</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}<sp/><ref refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6" kindref="member">mcl_encoder_cal_speed_function_t</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structmcl__encoder__uvw__level__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="46" refid="structmcl__encoder__uvw__level__t_1a31166f089bde8dde8a640993238c8e83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__uvw__level__t_1a31166f089bde8dde8a640993238c8e83" kindref="member">u</ref>;</highlight></codeline>
<codeline lineno="47" refid="structmcl__encoder__uvw__level__t_1ac3876df58328dae1ecd589887010ba00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__uvw__level__t_1ac3876df58328dae1ecd589887010ba00" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="48" refid="structmcl__encoder__uvw__level__t_1ae5a976d4d73fc37d3803c8cfc662be99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__uvw__level__t_1ae5a976d4d73fc37d3803c8cfc662be99" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}<sp/><ref refid="structmcl__encoder__uvw__level__t" kindref="compound">mcl_encoder_uvw_level_t</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structmcl__encoder__callback" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal"><ref refid="structmcl__encoder__callback" kindref="compound">mcl_encoder_callback</ref><sp/>{</highlight></codeline>
<codeline lineno="56" refid="structmcl__encoder__callback_1a8342ed5f95676336259b9626e5ab5eb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/>(*<ref refid="structmcl__encoder__callback_1a8342ed5f95676336259b9626e5ab5eb9" kindref="member">init</ref>)(void);</highlight></codeline>
<codeline lineno="57" refid="structmcl__encoder__callback_1a334169067bbe880edcc37af7b5024568" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_FUNC_OPTIONAL_<sp/><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/>(*<ref refid="structmcl__encoder__callback_1a334169067bbe880edcc37af7b5024568" kindref="member">update_trig_lead_tick</ref>)(uint32_t<sp/>lead_tick);</highlight></codeline>
<codeline lineno="58" refid="structmcl__encoder__callback_1a57259c85020b084de465c7787ec73e25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_FUNC_OPTIONAL_<sp/><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/>(*<ref refid="structmcl__encoder__callback_1a57259c85020b084de465c7787ec73e25" kindref="member">get_lead_tick</ref>)(uint32_t<sp/>*lead_tick);</highlight></codeline>
<codeline lineno="59" refid="structmcl__encoder__callback_1a0976346978710ff6fb34a8cd238d0e4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/>(*<ref refid="structmcl__encoder__callback_1a0976346978710ff6fb34a8cd238d0e4d" kindref="member">start_sample</ref>)(void);</highlight></codeline>
<codeline lineno="60" refid="structmcl__encoder__callback_1a40b1b524ee26367cdc34f82056863e09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/>(*<ref refid="structmcl__encoder__callback_1a40b1b524ee26367cdc34f82056863e09" kindref="member">get_theta</ref>)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*theta);</highlight></codeline>
<codeline lineno="61" refid="structmcl__encoder__callback_1aec7db91cfccfda9de871cb40fe145696" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_FUNC_OPTIONAL_<sp/><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/>(*<ref refid="structmcl__encoder__callback_1aec7db91cfccfda9de871cb40fe145696" kindref="member">get_absolute_theta</ref>)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*theta);</highlight></codeline>
<codeline lineno="62" refid="structmcl__encoder__callback_1a5ea23bd90d86e7f363f1b165a170d161" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_FUNC_OPTIONAL_<sp/><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/>(*<ref refid="structmcl__encoder__callback_1a5ea23bd90d86e7f363f1b165a170d161" kindref="member">get_uvw_level</ref>)(<ref refid="structmcl__encoder__uvw__level__t" kindref="compound">mcl_encoder_uvw_level_t</ref><sp/>*level);</highlight></codeline>
<codeline lineno="63" refid="structmcl__encoder__callback_1ade356bcdd6b141f637a0c22095d7582e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_FUNC_OPTIONAL_<sp/><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/>(*<ref refid="structmcl__encoder__callback_1ade356bcdd6b141f637a0c22095d7582e" kindref="member">process_by_user</ref>)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*speed,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*theta_forecast);</highlight></codeline>
<codeline lineno="64" refid="hpm__mcl__encoder_8h_1a87939416b490f3207c13c53e4dac72ab" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__mcl__encoder_8h_1a87939416b490f3207c13c53e4dac72ab" kindref="member">mcl_encoder_callback_t</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="hpm__mcl__encoder_8h_1ad2a152bb007b7c70eaef461704193a57" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCL_ENCODER_CAL_STRUCT_MAX_MEMMORY<sp/><sp/>(16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structmcl__encoder__cal__speed__t__function__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72" refid="structmcl__encoder__cal__speed__t__function__t_1a49094834d4987a75172b9c92f23e956a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__t__function__t_1a49094834d4987a75172b9c92f23e956a" kindref="member">theta_last</ref>;</highlight></codeline>
<codeline lineno="73" refid="structmcl__encoder__cal__speed__t__function__t_1a8cec92f27159fa5362d6043b6dcf575b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__t__function__t_1a8cec92f27159fa5362d6043b6dcf575b" kindref="member">speed_last</ref>;</highlight></codeline>
<codeline lineno="74" refid="structmcl__encoder__cal__speed__t__function__t_1a2005a1b058b3ab1977f1fd6bd1c10ab0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__t__function__t_1a2005a1b058b3ab1977f1fd6bd1c10ab0" kindref="member">ts_sigma</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/><ref refid="structmcl__encoder__cal__speed__t__function__t" kindref="compound">mcl_encoder_cal_speed_t_function_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structmcl__encoder__cal__speed__m__function__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78" refid="structmcl__encoder__cal__speed__m__function__t_1a4e18f22aaaf74e5d426f5bddfcce1b6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__m__function__t_1a4e18f22aaaf74e5d426f5bddfcce1b6f" kindref="member">theta_last</ref>;</highlight></codeline>
<codeline lineno="79" refid="structmcl__encoder__cal__speed__m__function__t_1a63f04f5d30be54b4e7d3f1ef238a784c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__m__function__t_1a63f04f5d30be54b4e7d3f1ef238a784c" kindref="member">ts_sigma</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}<sp/><ref refid="structmcl__encoder__cal__speed__m__function__t" kindref="compound">mcl_encoder_cal_speed_m_function_t</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="structmcl__encoder__cal__speed__m__t__function__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83" refid="structmcl__encoder__cal__speed__m__t__function__t_1a78432d716c1fa0ad89f01ae122f3bf4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__m__t__function__t_1a78432d716c1fa0ad89f01ae122f3bf4f" kindref="member">theta_last</ref>;</highlight></codeline>
<codeline lineno="84" refid="structmcl__encoder__cal__speed__m__t__function__t_1a325b0f6506b13fb7c793e15471213266" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__m__t__function__t_1a325b0f6506b13fb7c793e15471213266" kindref="member">ts_sigma</ref>;</highlight></codeline>
<codeline lineno="85" refid="structmcl__encoder__cal__speed__m__t__function__t_1a7f2ffdc08205252f9e14aa28edc1eed6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__m__t__function__t_1a7f2ffdc08205252f9e14aa28edc1eed6" kindref="member">theta_sigma</ref>;</highlight></codeline>
<codeline lineno="86" refid="structmcl__encoder__cal__speed__m__t__function__t_1a5a80037c557195774621277e1c33c3c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__m__t__function__t_1a5a80037c557195774621277e1c33c3c1" kindref="member">speed_filter_last</ref>;</highlight></codeline>
<codeline lineno="87" refid="structmcl__encoder__cal__speed__m__t__function__t_1a25ab9aaa1c7a6491e615c2c0f5c34317" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__m__t__function__t_1a25ab9aaa1c7a6491e615c2c0f5c34317" kindref="member">speed_last</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}<sp/><ref refid="structmcl__encoder__cal__speed__m__t__function__t" kindref="compound">mcl_encoder_cal_speed_m_t_function_t</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="structmcl__encoder__cal__speed__pll__cfg__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="95" refid="structmcl__encoder__cal__speed__pll__cfg__t_1a5504c11f17f1e17b0b3c54612b7525d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__pll__cfg__t_1a5504c11f17f1e17b0b3c54612b7525d8" kindref="member">kp</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96" refid="structmcl__encoder__cal__speed__pll__cfg__t_1aae6c749575fa4aae15a3a68ff0921ef5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__pll__cfg__t_1aae6c749575fa4aae15a3a68ff0921ef5" kindref="member">ki</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/><ref refid="structmcl__encoder__cal__speed__pll__cfg__t" kindref="compound">mcl_encoder_cal_speed_pll_cfg_t</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structmcl__encoder__cal__speed__pll__function__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104" refid="structmcl__encoder__cal__speed__pll__function__t_1a5f15458ac84f45836cc155915ba869e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__encoder__cal__speed__pll__cfg__t" kindref="compound">mcl_encoder_cal_speed_pll_cfg_t</ref><sp/>*<ref refid="structmcl__encoder__cal__speed__pll__function__t_1a5f15458ac84f45836cc155915ba869e0" kindref="member">cfg</ref>;</highlight></codeline>
<codeline lineno="105" refid="structmcl__encoder__cal__speed__pll__function__t_1ad66c660c7f0856cb47e76c1210cf699a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="structmcl__encoder__cal__speed__pll__function__t_1ad66c660c7f0856cb47e76c1210cf699a" kindref="member">period_call_time_s</ref>;</highlight></codeline>
<codeline lineno="106" refid="structmcl__encoder__cal__speed__pll__function__t_1afe3bb871270247fc255f0e3d6e869c75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__pll__function__t_1afe3bb871270247fc255f0e3d6e869c75" kindref="member">pi_integrator</ref>;</highlight></codeline>
<codeline lineno="107" refid="structmcl__encoder__cal__speed__pll__function__t_1a2d23ce6df5991e7e03fda219d48ae0ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__pll__function__t_1a2d23ce6df5991e7e03fda219d48ae0ae" kindref="member">omega_integrator</ref>;</highlight></codeline>
<codeline lineno="108" refid="structmcl__encoder__cal__speed__pll__function__t_1a453209c6da4d11d8074502debe9c5036" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__cal__speed__pll__function__t_1a453209c6da4d11d8074502debe9c5036" kindref="member">theta_last</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/><ref refid="structmcl__encoder__cal__speed__pll__function__t" kindref="compound">mcl_encoder_cal_speed_pll_function_t</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="structmcl__encoer__cfg__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="116" refid="structmcl__encoer__cfg__t_1ac23339131d52010f08757e12b68e3821" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structmcl__encoer__cfg__t_1ac23339131d52010f08757e12b68e3821" kindref="member">disable_start_sample_interrupt</ref>;</highlight></codeline>
<codeline lineno="117" refid="structmcl__encoer__cfg__t_1a066dccd24e8c640bf343990b0803ade9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structmcl__encoer__cfg__t_1a066dccd24e8c640bf343990b0803ade9" kindref="member">communication_interval_us</ref>;<sp/></highlight></codeline>
<codeline lineno="118" refid="structmcl__encoer__cfg__t_1a78ea4b8313d43543e74c693369cba547" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1add0d8d359bdd218ea5cc5e2d3cf8a6b6" kindref="member">mcl_encoder_cal_speed_function_t</ref><sp/><ref refid="structmcl__encoer__cfg__t_1a78ea4b8313d43543e74c693369cba547" kindref="member">speed_cal_method</ref>;</highlight></codeline>
<codeline lineno="119" refid="structmcl__encoer__cfg__t_1a8f31674ad11c34c19e57de7a486fea81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__encoder__cal__speed__pll__cfg__t" kindref="compound">mcl_encoder_cal_speed_pll_cfg_t</ref><sp/><ref refid="structmcl__encoer__cfg__t_1a8f31674ad11c34c19e57de7a486fea81" kindref="member">cal_speed_pll_cfg</ref>;</highlight></codeline>
<codeline lineno="120" refid="structmcl__encoer__cfg__t_1a56558ba89ebd15691ac96eadcb76ce39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoer__cfg__t_1a56558ba89ebd15691ac96eadcb76ce39" kindref="member">timeout_s</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121" refid="structmcl__encoer__cfg__t_1aa7fccc79318d74c8d37880e3be4363fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoer__cfg__t_1aa7fccc79318d74c8d37880e3be4363fc" kindref="member">speed_abs_switch_m_t</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122" refid="structmcl__encoer__cfg__t_1ab70938e9679a0673db061bc22c3e16f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structmcl__encoer__cfg__t_1ab70938e9679a0673db061bc22c3e16f6" kindref="member">precision</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123" refid="structmcl__encoer__cfg__t_1a0a0b872e4b9711b80d44f0944f937632" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoer__cfg__t_1a0a0b872e4b9711b80d44f0944f937632" kindref="member">period_call_time_s</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124" refid="structmcl__encoer__cfg__t_1a37a7162b57c8498f5cc544bc540e7176" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1a87939416b490f3207c13c53e4dac72ab" kindref="member">mcl_encoder_callback_t</ref><sp/><ref refid="structmcl__encoer__cfg__t_1a37a7162b57c8498f5cc544bc540e7176" kindref="member">callback</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}<sp/><ref refid="structmcl__encoer__cfg__t" kindref="compound">mcl_encoer_cfg_t</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="structmcl__encoder__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="134" refid="structmcl__encoder__t_1a5605c8cdb2c5915db3b0eddf681b106d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmcl__encoder__cal__speed__t__function__t" kindref="compound">mcl_encoder_cal_speed_t_function_t</ref><sp/><ref refid="structmcl__encoder__t_1a5605c8cdb2c5915db3b0eddf681b106d" kindref="member">t_method</ref>;</highlight></codeline>
<codeline lineno="135" refid="structmcl__encoder__t_1a6d78beb4c62e80611546ccb6ee753542" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmcl__encoder__cal__speed__m__function__t" kindref="compound">mcl_encoder_cal_speed_m_function_t</ref><sp/><ref refid="structmcl__encoder__t_1a6d78beb4c62e80611546ccb6ee753542" kindref="member">m_method</ref>;</highlight></codeline>
<codeline lineno="136" refid="structmcl__encoder__t_1aa1d4e76186ba90cdaeb7acb095b9680d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmcl__encoder__cal__speed__m__t__function__t" kindref="compound">mcl_encoder_cal_speed_m_t_function_t</ref><sp/><ref refid="structmcl__encoder__t_1aa1d4e76186ba90cdaeb7acb095b9680d" kindref="member">m_t_method</ref>;</highlight></codeline>
<codeline lineno="137" refid="structmcl__encoder__t_1ad8cdba924048886d5e60062b4fc4321f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmcl__encoder__cal__speed__pll__function__t" kindref="compound">mcl_encoder_cal_speed_pll_function_t</ref><sp/><ref refid="structmcl__encoder__t_1ad8cdba924048886d5e60062b4fc4321f" kindref="member">pll_method</ref>;</highlight></codeline>
<codeline lineno="138" refid="structmcl__encoder__t_1a6a21574c119dd3ffd5841a3278dd942e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structmcl__encoder__t_1a6a21574c119dd3ffd5841a3278dd942e" kindref="member">memory</ref>[<ref refid="hpm__mcl__encoder_8h_1ad2a152bb007b7c70eaef461704193a57" kindref="member">MCL_ENCODER_CAL_STRUCT_MAX_MEMMORY</ref>];</highlight></codeline>
<codeline lineno="139" refid="structmcl__encoder__t_1a87d4561df84fca2cc02c2a9f9a919732" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>cal_speed;</highlight></codeline>
<codeline lineno="140" refid="structmcl__encoder__t_1a06e658718f9935ac990b5147a023359d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__filter__iir__df1__t" kindref="compound">mcl_filter_iir_df1_t</ref><sp/>*<ref refid="structmcl__encoder__t_1a06e658718f9935ac990b5147a023359d" kindref="member">iirfilter</ref>;</highlight></codeline>
<codeline lineno="141" refid="structmcl__encoder__t_1a8373397bd0328dc01be97d6cbcd3b291" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7" kindref="member">mcl_encoder_status_t</ref><sp/><ref refid="structmcl__encoder__t_1a8373397bd0328dc01be97d6cbcd3b291" kindref="member">status</ref>;</highlight></codeline>
<codeline lineno="142" refid="structmcl__encoder__t_1a764be6bbaffdb2fa58b3462061514bb5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__encoer__cfg__t" kindref="compound">mcl_encoer_cfg_t</ref><sp/>*<ref refid="structmcl__encoder__t_1a764be6bbaffdb2fa58b3462061514bb5" kindref="member">cfg</ref>;</highlight></codeline>
<codeline lineno="143" refid="structmcl__encoder__t_1a9faeb8989d212f9e0ffb05e601824db0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>*<ref refid="structmcl__encoder__t_1a9faeb8989d212f9e0ffb05e601824db0" kindref="member">mcu_clock_tick</ref>;</highlight></codeline>
<codeline lineno="144" refid="structmcl__encoder__t_1ac1b0cf668ab44768481e6a83f1922914" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>*<ref refid="structmcl__encoder__t_1ac1b0cf668ab44768481e6a83f1922914" kindref="member">pole_num</ref>;</highlight></codeline>
<codeline lineno="145" refid="structmcl__encoder__t_1ab7b2a0e8d33c70a65b932979b7c49cdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__physical_8h_1a30438820b803592257436214687dd98c" kindref="member">hall_phase_t</ref><sp/>*<ref refid="structmcl__encoder__t_1ab7b2a0e8d33c70a65b932979b7c49cdf" kindref="member">phase</ref>;</highlight></codeline>
<codeline lineno="146" refid="structmcl__encoder__t_1a7720be35e17863b8f008e6034ee431cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__t_1a7720be35e17863b8f008e6034ee431cf" kindref="member">theta_initial</ref>;</highlight></codeline>
<codeline lineno="147" refid="structmcl__encoder__t_1af9a069250edf1a130b084e51b5ac3036" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="structmcl__encoder__t_1af9a069250edf1a130b084e51b5ac3036" kindref="member">current_loop_ts</ref>;</highlight></codeline>
<codeline lineno="148" refid="structmcl__encoder__t_1a151439c5499b569bcbe92028bec514f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__user__value__t" kindref="compound">mcl_user_value_t</ref><sp/><ref refid="structmcl__encoder__t_1a151439c5499b569bcbe92028bec514f7" kindref="member">force_set_theta</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150" refid="structmcl__encoder__t_1a8513acffbbee1b172a7ab305d0c93bad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__t_1a8513acffbbee1b172a7ab305d0c93bad" kindref="member">speed</ref>;</highlight></codeline>
<codeline lineno="151" refid="structmcl__encoder__t_1a9c5dc3fd47c7e9020ac36a197d36cf7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__t_1a9c5dc3fd47c7e9020ac36a197d36cf7c" kindref="member">theta</ref>;</highlight></codeline>
<codeline lineno="152" refid="structmcl__encoder__t_1a0c5a02541b3e214eb74510cf353887bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structmcl__encoder__t_1a0c5a02541b3e214eb74510cf353887bb" kindref="member">theta_forecast</ref>;</highlight></codeline>
<codeline lineno="153" refid="structmcl__encoder__t_1a830d41e562717ab4d1d7ebcf43cacaef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>result;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="155" refid="structmcl__encoder__t_1a7f1892d84b694757b0bce7c05addb958" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*<ref refid="structmcl__encoder__t_1a7f1892d84b694757b0bce7c05addb958" kindref="member">enable</ref>;</highlight></codeline>
<codeline lineno="156" refid="structmcl__encoder__t_1a80318d16fff608aba203cae60caa2f2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="structmcl__encoder__t_1a9c5dc3fd47c7e9020ac36a197d36cf7c" kindref="member">theta</ref>;</highlight></codeline>
<codeline lineno="157" refid="structmcl__encoder__t_1a66d7f2122a7eb6ac52e586a0db8342b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>sensorless;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}<sp/><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/><ref refid="hpm__mcl__encoder_8h_1a0c3b77c8d50cba6c95816b8eb555ecea" kindref="member">hpm_mcl_encoder_init</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder,<sp/><ref refid="structmcl__cfg__t" kindref="compound">mcl_cfg_t</ref><sp/>*mcl_cfg,<sp/><ref refid="structmcl__encoer__cfg__t" kindref="compound">mcl_encoer_cfg_t</ref><sp/>*encoder_cfg,<sp/><ref refid="structmcl__filter__iir__df1__t" kindref="compound">mcl_filter_iir_df1_t</ref><sp/>*iir);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/><ref refid="hpm__mcl__encoder_8h_1a0c0cb83fb5da4e216567125747517da0" kindref="member">hpm_mcl_encoder_start_sample</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/><ref refid="hpm__mcl__encoder_8h_1a488c3471f2d49a3565f9eab503472faa" kindref="member">hpm_mcl_encoder_set_initial_theta</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/><ref refid="hpm__mcl__encoder_8h_1a570404d74284f07ad4f0a671f58c6f6e" kindref="member">hpm_mcl_encoder_process</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder,<sp/>uint32_t<sp/>tick_deta);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/><ref refid="hpm__mcl__encoder_8h_1ae5fb00ae11775e198b3006df7c219504" kindref="member">hpm_mcl_encoder_set_status</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder,<sp/><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7" kindref="member">mcl_encoder_status_t</ref><sp/>status);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="hpm__mcl__encoder_8h_1a2dd59824fc0a0751c697088158e0e5e0" kindref="member">hpm_mcl_encoder_get_theta</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="hpm__mcl__encoder_8h_1a7a6b6bc0edcb28692798f6950ef3f223" kindref="member">hpm_mcl_encoder_get_speed</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="hpm__mcl__encoder_8h_1a4ad192a198270565a6cb71e1fd8d9f67" kindref="member">hpm_mcl_encoder_get_forecast_theta</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="hpm__mcl__encoder_8h_1ae52331fddf8b6b71707c5b21c31bad6e" kindref="member">hpm_mcl_encoder_get_raw_theta</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__mcl__encoder_8h_1a850d2f8593c93fdd6110defd602459c7" kindref="member">hpm_mcl_encoder_force_theta</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/><ref refid="hpm__mcl__encoder_8h_1adc0e5b4f2d1fa7d929c49edbde81db6f" kindref="member">hpm_mcl_encoder_get_absolute_theta</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*theta);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/><ref refid="hpm__mcl__encoder_8h_1a4b3eb72f466cba80de2d95ef9c798246" kindref="member">hpm_mcl_encoder_get_uvw_status</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder,<sp/><ref refid="structmcl__encoder__uvw__level__t" kindref="compound">mcl_encoder_uvw_level_t</ref><sp/>*level);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="hpm__mcl__encoder_8h_1ae13b8fb0b56887159f269458f0e004be" kindref="member">hpm_mcl_encoder_get_sensorless_theta</ref>(<ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="middleware/hpm_mcl_v2/core/sensor/hpm_mcl_encoder.h"/>
  </compounddef>
</doxygen>
