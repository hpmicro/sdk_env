<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="hpm__serial__nor_8h" kind="file" language="C++">
    <compoundname>hpm_serial_nor.h</compoundname>
    <includes refid="hpm__serial__nor__host_8h" local="yes">hpm_serial_nor_host.h</includes>
    <includedby refid="hpm__serial__nor_8c" local="yes">components/serial_nor/hpm_serial_nor.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>components/serial_nor/hpm_serial_nor.h</label>
        <link refid="hpm__serial__nor_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hpm_serial_nor_host.h</label>
        <link refid="hpm__serial__nor__host_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sfdp_def.h</label>
        <link refid="sfdp__def_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>components/serial_nor/hpm_serial_nor.c</label>
        <link refid="hpm__serial__nor_8c"/>
      </node>
      <node id="1">
        <label>components/serial_nor/hpm_serial_nor.h</label>
        <link refid="hpm__serial__nor_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2ca" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <enumvalue id="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caa78e08c0aec5c3442e1031a5e1d7a21c3" prot="public">
          <name>status_spi_nor_sfdp_not_found</name>
          <initializer>= MAKE_STATUS(status_group_spi_nor_flash, 0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SFDP table was not found </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caaee68d6c9d4a2ff1a912058f1a1704e64" prot="public">
          <name>status_spi_nor_ddr_read_dummy_cycle_probe_failed</name>
          <initializer>= MAKE_STATUS(status_group_spi_nor_flash, 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Probing Dummy cyles for DDR read failed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caaa8606d4c279f4c6227c0ff27f5ef0d10" prot="public">
          <name>status_spi_nor_flash_not_found</name>
          <initializer>= MAKE_STATUS(status_group_spi_nor_flash, 2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FLASH was not detected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caaf16ea269b941bad615c0b3d19dfccc40" prot="public">
          <name>status_spi_nor_flash_para_err</name>
          <initializer>= MAKE_STATUS(status_group_spi_nor_flash, 3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caa7a92b9b792fd02e506abe74ad1fd31fa" prot="public">
          <name>status_spi_nor_flash_is_busy</name>
          <initializer>= MAKE_STATUS(status_group_spi_nor_flash, 4)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caacc8f13b930a7bf3abda540b5fb552ace" prot="public">
          <name>status_spi_nor_flash_not_qe_bit_in_sfdp</name>
          <initializer>= MAKE_STATUS(status_group_spi_nor_flash, 5)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi nor API error codes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="16" column="1" bodyfile="components/serial_nor/hpm_serial_nor.h" bodystart="16" bodyend="23"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="hpm__serial__nor_8h_1afcdddf89bb30fae84c850e2862723e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_is_busy</definition>
        <argsstring>(hpm_serial_nor_t *flash)</argsstring>
        <name>hpm_serial_nor_is_busy</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <briefdescription>
<para>determine whether the serial nor flash is busy </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_spi_nor_flash_is_busy if the serial nor flash is busy </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="35" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="621" bodyend="633" declfile="components/serial_nor/hpm_serial_nor.h" declline="35" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1a6a5ea1e426c9e64de6a1f56391272cb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_write_enable</definition>
        <argsstring>(hpm_serial_nor_t *flash)</argsstring>
        <name>hpm_serial_nor_write_enable</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <briefdescription>
<para>set serial nor flash write enable </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>serial nor flash channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if write enable success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="42" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="635" bodyend="649" declfile="components/serial_nor/hpm_serial_nor.h" declline="42" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1a1a2d79a333bb04944ba53a545bbac027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_erase_chip</definition>
        <argsstring>(hpm_serial_nor_t *flash)</argsstring>
        <name>hpm_serial_nor_erase_chip</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <briefdescription>
<para>erase the serial nor flash chip </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if erase chip success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="49" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="651" bodyend="697" declfile="components/serial_nor/hpm_serial_nor.h" declline="49" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1afd73b804ef5b17a4d2304fc1816cbe53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_erase_block_blocking</definition>
        <argsstring>(hpm_serial_nor_t *flash, uint32_t block_addr)</argsstring>
        <name>hpm_serial_nor_erase_block_blocking</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>block_addr</declname>
        </param>
        <briefdescription>
<para>erase the serial nor flash block using blocking transfer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the erase block address must be block alignment</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor flash block address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if erase block success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="60" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="699" bodyend="760" declfile="components/serial_nor/hpm_serial_nor.h" declline="60" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1a15630308baed20437d6057cb4d1b66b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_erase_block_nonblocking</definition>
        <argsstring>(hpm_serial_nor_t *flash, uint32_t block_addr)</argsstring>
        <name>hpm_serial_nor_erase_block_nonblocking</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>block_addr</declname>
        </param>
        <briefdescription>
<para>erase the serial nor flash block using nonblocking transfer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the erase block address must be block alignment, it&apos;not wait flash busy status.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor flash block address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if erase block success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="71" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="822" bodyend="853" declfile="components/serial_nor/hpm_serial_nor.h" declline="71" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1ac9cde33f8e2bdf1e47f84e7d371e6e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_erase_sector_blocking</definition>
        <argsstring>(hpm_serial_nor_t *flash, uint32_t sector_addr)</argsstring>
        <name>hpm_serial_nor_erase_sector_blocking</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sector_addr</declname>
        </param>
        <briefdescription>
<para>erase the serial nor flash sector using blocking transfer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the erase sector address must be sector alignment</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sector_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor flash sector address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if erase sector success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="82" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="762" bodyend="820" declfile="components/serial_nor/hpm_serial_nor.h" declline="82" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1abeee578a623f71cbe326bb12658836ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_erase_sector_nonblocking</definition>
        <argsstring>(hpm_serial_nor_t *flash, uint32_t sector_addr)</argsstring>
        <name>hpm_serial_nor_erase_sector_nonblocking</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sector_addr</declname>
        </param>
        <briefdescription>
<para>erase the serial nor flash sector using nonblocking transfer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the erase sector address must be sector alignment, it&apos;not wait flash busy status.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sector_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor flash sector address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if erase sector success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="93" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="855" bodyend="887" declfile="components/serial_nor/hpm_serial_nor.h" declline="93" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1aede78c86e7a50d752ce7a9abb9845de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_erase_blocking</definition>
        <argsstring>(hpm_serial_nor_t *flash, uint32_t start, uint32_t length)</argsstring>
        <name>hpm_serial_nor_erase_blocking</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>erase the serial nor flash specified start address and length using blocking transfer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the erase sector address must be sector alignment</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sector_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor flash sector address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if erase success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="104" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="889" bodyend="923" declfile="components/serial_nor/hpm_serial_nor.h" declline="104" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1a7e5e93a32f3f7df57b3d0e8c2219df9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_program_blocking</definition>
        <argsstring>(hpm_serial_nor_t *flash, uint8_t *buf, uint32_t data_len, uint32_t address)</argsstring>
        <name>hpm_serial_nor_program_blocking</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>program data to the specified serial nor flash address using blocking transfer </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the data source pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>the data length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor flash programming address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if program success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="114" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="925" bodyend="1033" declfile="components/serial_nor/hpm_serial_nor.h" declline="114" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1a48042e08c8e9f9e3e6ecf0be5d6010e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_page_program_nonblocking</definition>
        <argsstring>(hpm_serial_nor_t *flash, uint8_t *buf, uint32_t data_len, uint32_t address)</argsstring>
        <name>hpm_serial_nor_page_program_nonblocking</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>program data to the page nor flash address using nonblocking transfer </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the data source pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>the data length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor flash programming address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if program success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="125" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="1035" bodyend="1103" declfile="components/serial_nor/hpm_serial_nor.h" declline="125" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1a0b6e427042edcfbb650aaca8558dc555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_read</definition>
        <argsstring>(hpm_serial_nor_t *flash, uint8_t *buf, uint16_t data_len, uint32_t address)</argsstring>
        <name>hpm_serial_nor_read</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>read the data of specified serial nor flash address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the data source pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>the data length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor flash reading address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if read success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="137" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="1105" bodyend="1128" declfile="components/serial_nor/hpm_serial_nor.h" declline="137" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1ac05f5d25c93a86f12b270ea4fdc6adae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_init</definition>
        <argsstring>(hpm_serial_nor_t *flash, hpm_serial_nor_info_t *info)</argsstring>
        <name>hpm_serial_nor_init</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type><ref refid="structhpm__serial__nor__info__t" kindref="compound">hpm_serial_nor_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>the serial nor flash initialization </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>serial_nor_flash_info_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if initialization success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="146" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="1131" bodyend="1165" declfile="components/serial_nor/hpm_serial_nor.h" declline="146" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__serial__nor_8h_1a7bd252db2c1e5417d091669bd9b48b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_serial_nor_get_info</definition>
        <argsstring>(hpm_serial_nor_t *flash, hpm_serial_nor_info_t *info)</argsstring>
        <name>hpm_serial_nor_get_info</name>
        <param>
          <type><ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref> *</type>
          <declname>flash</declname>
        </param>
        <param>
          <type><ref refid="structhpm__serial__nor__info__t" kindref="compound">hpm_serial_nor_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>get the serial nor flash information </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flash</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial nor context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>serial_nor_flash_info_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref>: status_success if get information success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/serial_nor/hpm_serial_nor.h" line="154" column="12" bodyfile="components/serial_nor/hpm_serial_nor.c" bodystart="1167" bodyend="1174" declfile="components/serial_nor/hpm_serial_nor.h" declline="154" declcolumn="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_HPM_SERIAL_NOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_HPM_SERIAL_NOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__serial__nor__host_8h" kindref="compound">hpm_serial_nor_host.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="17" refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caa78e08c0aec5c3442e1031a5e1d7a21c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caa78e08c0aec5c3442e1031a5e1d7a21c3" kindref="member">status_spi_nor_sfdp_not_found</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggacad94efac306983cc3f6080053dbb94faac3cef2c8147e19cc322c637a41973e0" kindref="member">status_group_spi_nor_flash</ref>,<sp/>0),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="18" refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caaee68d6c9d4a2ff1a912058f1a1704e64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caaee68d6c9d4a2ff1a912058f1a1704e64" kindref="member">status_spi_nor_ddr_read_dummy_cycle_probe_failed</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggacad94efac306983cc3f6080053dbb94faac3cef2c8147e19cc322c637a41973e0" kindref="member">status_group_spi_nor_flash</ref>,<sp/>1),<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="19" refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caaa8606d4c279f4c6227c0ff27f5ef0d10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caaa8606d4c279f4c6227c0ff27f5ef0d10" kindref="member">status_spi_nor_flash_not_found</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggacad94efac306983cc3f6080053dbb94faac3cef2c8147e19cc322c637a41973e0" kindref="member">status_group_spi_nor_flash</ref>,<sp/>2),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20" refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caaf16ea269b941bad615c0b3d19dfccc40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caaf16ea269b941bad615c0b3d19dfccc40" kindref="member">status_spi_nor_flash_para_err</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggacad94efac306983cc3f6080053dbb94faac3cef2c8147e19cc322c637a41973e0" kindref="member">status_group_spi_nor_flash</ref>,<sp/>3),</highlight></codeline>
<codeline lineno="21" refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caa7a92b9b792fd02e506abe74ad1fd31fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caa7a92b9b792fd02e506abe74ad1fd31fa" kindref="member">status_spi_nor_flash_is_busy</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggacad94efac306983cc3f6080053dbb94faac3cef2c8147e19cc322c637a41973e0" kindref="member">status_group_spi_nor_flash</ref>,<sp/>4),</highlight></codeline>
<codeline lineno="22" refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caacc8f13b930a7bf3abda540b5fb552ace" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__serial__nor_8h_1ae65e7af7842c17c4c3bb245f0baeb2caacc8f13b930a7bf3abda540b5fb552ace" kindref="member">status_spi_nor_flash_not_qe_bit_in_sfdp</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggacad94efac306983cc3f6080053dbb94faac3cef2c8147e19cc322c637a41973e0" kindref="member">status_group_spi_nor_flash</ref>,<sp/>5),</highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1afcdddf89bb30fae84c850e2862723e13" kindref="member">hpm_serial_nor_is_busy</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1a6a5ea1e426c9e64de6a1f56391272cb9" kindref="member">hpm_serial_nor_write_enable</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1a1a2d79a333bb04944ba53a545bbac027" kindref="member">hpm_serial_nor_erase_chip</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1afd73b804ef5b17a4d2304fc1816cbe53" kindref="member">hpm_serial_nor_erase_block_blocking</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/>uint32_t<sp/>block_addr);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1a15630308baed20437d6057cb4d1b66b8" kindref="member">hpm_serial_nor_erase_block_nonblocking</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/>uint32_t<sp/>block_addr);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1ac9cde33f8e2bdf1e47f84e7d371e6e03" kindref="member">hpm_serial_nor_erase_sector_blocking</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/>uint32_t<sp/>sector_addr);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1abeee578a623f71cbe326bb12658836ac" kindref="member">hpm_serial_nor_erase_sector_nonblocking</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/>uint32_t<sp/>sector_addr);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1aede78c86e7a50d752ce7a9abb9845de1" kindref="member">hpm_serial_nor_erase_blocking</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/>uint32_t<sp/>start,<sp/>uint32_t<sp/>length);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1a7e5e93a32f3f7df57b3d0e8c2219df9a" kindref="member">hpm_serial_nor_program_blocking</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/>data_len,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>address);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1a48042e08c8e9f9e3e6ecf0be5d6010e5" kindref="member">hpm_serial_nor_page_program_nonblocking</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/>uint8_t<sp/>*buf,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>data_len,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>address);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1a0b6e427042edcfbb650aaca8558dc555" kindref="member">hpm_serial_nor_read</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/>uint8_t<sp/>*buf,<sp/>uint16_t<sp/>data_len,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>address);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1ac05f5d25c93a86f12b270ea4fdc6adae" kindref="member">hpm_serial_nor_init</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/><ref refid="structhpm__serial__nor__info__t" kindref="compound">hpm_serial_nor_info_t</ref><sp/>*info);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__serial__nor_8h_1a7bd252db2c1e5417d091669bd9b48b5d" kindref="member">hpm_serial_nor_get_info</ref>(<ref refid="structhpm__serial__nor__t" kindref="compound">hpm_serial_nor_t</ref><sp/>*flash,<sp/><ref refid="structhpm__serial__nor__info__t" kindref="compound">hpm_serial_nor_info_t</ref><sp/>*info);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="components/serial_nor/hpm_serial_nor.h"/>
  </compounddef>
</doxygen>
