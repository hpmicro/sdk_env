<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="hpm__panel_8h" kind="file" language="C++">
    <compoundname>hpm_panel.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdbool.h</includes>
    <includedby refid="hpm__panel_8c" local="yes">components/panel/hpm_panel.c</includedby>
    <includedby refid="cc10128007_8c" local="yes">components/panel/panels/cc10128007.c</includedby>
    <includedby refid="mc10128007__31b_8c" local="yes">components/panel/panels/mc10128007_31b.c</includedby>
    <includedby refid="tm070rdh13_8c" local="yes">components/panel/panels/tm070rdh13.c</includedby>
    <includedby refid="tm103xdgp01_8c" local="yes">components/panel/panels/tm103xdgp01.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>components/panel/hpm_panel.h</label>
        <link refid="hpm__panel_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>components/panel/hpm_panel.c</label>
        <link refid="hpm__panel_8c"/>
      </node>
      <node id="1">
        <label>components/panel/hpm_panel.h</label>
        <link refid="hpm__panel_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>components/panel/panels/cc10128007.c</label>
        <link refid="cc10128007_8c"/>
      </node>
      <node id="4">
        <label>components/panel/panels/mc10128007_31b.c</label>
        <link refid="mc10128007__31b_8c"/>
      </node>
      <node id="5">
        <label>components/panel/panels/tm070rdh13.c</label>
        <link refid="tm070rdh13_8c"/>
      </node>
      <node id="6">
        <label>components/panel/panels/tm103xdgp01.c</label>
        <link refid="tm103xdgp01_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structhpm__panel__timing" prot="public">hpm_panel_timing</innerclass>
    <innerclass refid="structhpm__panel__hw__interface" prot="public">hpm_panel_hw_interface</innerclass>
    <innerclass refid="structhpm__panel__funcs" prot="public">hpm_panel_funcs</innerclass>
    <innerclass refid="structhpm__panel__state" prot="public">hpm_panel_state</innerclass>
    <innerclass refid="structhpm__panel" prot="public">hpm_panel</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4f" prot="public" static="no" strong="no">
        <type></type>
        <name>hpm_panel_mipi_format</name>
        <enumvalue id="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4faa7485717dda631dfbd7395388843d096" prot="public">
          <name>HPM_PANEL_MIPI_FORMAT_RGB888</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4fac0a4e2d3bfe461e18f8dd8e4372b2cc7" prot="public">
          <name>HPM_PANEL_MIPI_FORMAT_RGB666</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4fa474a3129966e98896652afe03f21f1b3" prot="public">
          <name>HPM_PANEL_MIPI_FORMAT_RGB666_PACKED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4fa8d0edf4c80c90e495fffebb6c4b2a0fd" prot="public">
          <name>HPM_PANEL_MIPI_FORMAT_RGB565</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="36" column="1" bodyfile="components/panel/hpm_panel.h" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27" prot="public" static="no" strong="no">
        <type></type>
        <name>hpm_panel_if_type</name>
        <enumvalue id="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27af4335974bb27e8f1b3c96035bd209252" prot="public">
          <name>HPM_PANEL_IF_TYPE_RGB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27afc982147df8411021f28b906b1e0993d" prot="public">
          <name>HPM_PANEL_IF_TYPE_LVDS_SINGLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27aff8adff2f5821af143235aae2e756c9e" prot="public">
          <name>HPM_PANEL_IF_TYPE_LVDS_SPLIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27abe26d61cc08d3359c42829e7b66b7506" prot="public">
          <name>HPM_PANEL_IF_TYPE_MIPI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="69" column="1" bodyfile="components/panel/hpm_panel.h" bodystart="69" bodyend="74"/>
      </memberdef>
      <memberdef kind="enum" id="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdf" prot="public" static="no" strong="no">
        <type></type>
        <name>hpm_panel_mem_type</name>
        <enumvalue id="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa02357b9228e8941377b04e28570ed5d5" prot="public">
          <name>HPM_PANEL_MEM_TYPE_NONCACHEABLE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa69c604d7ab10a056b5cdaa606b44bbbd" prot="public">
          <name>HPM_PANEL_MEM_TYPE_CACHEABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa24adba53bd5b750b7a2ef7ce7b173605" prot="public">
          <name>HPM_PANEL_MEM_TYPE_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa0bba963c6e47cd02f9a76d3c4ec807bd" prot="public">
          <name>HPM_PANEL_MEM_TYPE_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="76" column="1" bodyfile="components/panel/hpm_panel.h" bodystart="76" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2" prot="public" static="no" strong="no">
        <type></type>
        <name>hpm_panel_state_power</name>
        <enumvalue id="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2aaff225f55fb64aba36e77d0c04036499" prot="public">
          <name>HPM_PANEL_STATE_POWER_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2a32e6d8a85e01cae4c26767b9583015b2" prot="public">
          <name>HPM_PANEL_STATE_POWER_ON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="83" column="1" bodyfile="components/panel/hpm_panel.h" bodystart="83" bodyend="86"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" prot="public" static="no">
        <type>struct <ref refid="structhpm__panel" kindref="compound">hpm_panel</ref></type>
        <definition>typedef struct hpm_panel hpm_panel_t</definition>
        <argsstring></argsstring>
        <name>hpm_panel_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="16" column="24" bodyfile="components/panel/hpm_panel.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__panel_8h_1a7bcd509fd4d6697ced5376ab368334d3" prot="public" static="no">
        <type>struct <ref refid="structhpm__panel__timing" kindref="compound">hpm_panel_timing</ref></type>
        <definition>typedef struct hpm_panel_timing hpm_panel_timing_t</definition>
        <argsstring></argsstring>
        <name>hpm_panel_timing_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="34" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__panel_8h_1a976f2f2aab9019fae3ffea16fd35e50f" prot="public" static="no">
        <type>enum <ref refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4f" kindref="member">hpm_panel_mipi_format</ref></type>
        <definition>typedef enum hpm_panel_mipi_format hpm_panel_mipi_format</definition>
        <argsstring></argsstring>
        <name>hpm_panel_mipi_format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="41" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__panel_8h_1add6c20fa922fb67498fe50b44983d5ce" prot="public" static="no">
        <type>struct <ref refid="structhpm__panel__hw__interface" kindref="compound">hpm_panel_hw_interface</ref></type>
        <definition>typedef struct hpm_panel_hw_interface hpm_panel_hw_interface_t</definition>
        <argsstring></argsstring>
        <name>hpm_panel_hw_interface_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="60" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__panel_8h_1aa0f2ad18e8dca82bdb858ffb1c4dc76e" prot="public" static="no">
        <type>struct <ref refid="structhpm__panel__funcs" kindref="compound">hpm_panel_funcs</ref></type>
        <definition>typedef struct hpm_panel_funcs hpm_panel_funcs_t</definition>
        <argsstring></argsstring>
        <name>hpm_panel_funcs_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="67" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__panel_8h_1a6bcbee3b0dab5879c329e5d4cd855888" prot="public" static="no">
        <type>enum <ref refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27" kindref="member">hpm_panel_if_type</ref></type>
        <definition>typedef enum hpm_panel_if_type hpm_panel_if_type_t</definition>
        <argsstring></argsstring>
        <name>hpm_panel_if_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="74" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__panel_8h_1aa99409fc15f9115c131ddb5365e9b11d" prot="public" static="no">
        <type>enum <ref refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdf" kindref="member">hpm_panel_mem_type</ref></type>
        <definition>typedef enum hpm_panel_mem_type hpm_panel_mem_type_t</definition>
        <argsstring></argsstring>
        <name>hpm_panel_mem_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="81" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__panel_8h_1a2fa2de5082a35ada6f667239fadfea8e" prot="public" static="no">
        <type>enum <ref refid="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2" kindref="member">hpm_panel_state_power</ref></type>
        <definition>typedef enum hpm_panel_state_power hpm_panel_power_state_t</definition>
        <argsstring></argsstring>
        <name>hpm_panel_power_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="86" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__panel_8h_1a3c126cdbfa06dc7c96787c998646a1b0" prot="public" static="no">
        <type>struct <ref refid="structhpm__panel__state" kindref="compound">hpm_panel_state</ref></type>
        <definition>typedef struct hpm_panel_state hpm_panel_state_t</definition>
        <argsstring></argsstring>
        <name>hpm_panel_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="91" column="19"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="hpm__panel_8h_1a5f49fe905e10e7da150ecb3fb988243d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
        <definition>hpm_panel_t * hpm_panel_find_device_default</definition>
        <argsstring>(void)</argsstring>
        <name>hpm_panel_find_device_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Find default panel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer of panel instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="111" column="13" bodyfile="components/panel/hpm_panel.c" bodystart="34" bodyend="39" declfile="components/panel/hpm_panel.h" declline="111" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1aaa49b6d94ae528494ca5b27343aaa69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
        <definition>hpm_panel_t * hpm_panel_find_device</definition>
        <argsstring>(const char *name)</argsstring>
        <name>hpm_panel_find_device</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find panel for name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>of panel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer of panel instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="120" column="13" bodyfile="components/panel/hpm_panel.c" bodystart="41" bodyend="50" declfile="components/panel/hpm_panel.h" declline="120" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a3a5fa859e400c9930aa100a322505cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * hpm_panel_get_name</definition>
        <argsstring>(hpm_panel_t *panel)</argsstring>
        <name>hpm_panel_get_name</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <briefdescription>
<para>Get panel name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>panel name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="129" column="12" bodyfile="components/panel/hpm_panel.c" bodystart="52" bodyend="55" declfile="components/panel/hpm_panel.h" declline="129" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1aaf8550bc7ed4c7c50cdece54bcd66983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="hpm__panel_8h_1a7bcd509fd4d6697ced5376ab368334d3" kindref="member">hpm_panel_timing_t</ref> *</type>
        <definition>const hpm_panel_timing_t * hpm_panel_get_timing</definition>
        <argsstring>(hpm_panel_t *panel)</argsstring>
        <name>hpm_panel_get_timing</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <briefdescription>
<para>Get panel timing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer of timing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="138" column="26" bodyfile="components/panel/hpm_panel.c" bodystart="57" bodyend="60" declfile="components/panel/hpm_panel.h" declline="138" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a2c50b1eee369efa91fb93637a6adc7ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__panel_8h_1a6bcbee3b0dab5879c329e5d4cd855888" kindref="member">hpm_panel_if_type_t</ref></type>
        <definition>hpm_panel_if_type_t hpm_panel_get_if_type</definition>
        <argsstring>(hpm_panel_t *panel)</argsstring>
        <name>hpm_panel_get_if_type</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <briefdescription>
<para>Get panel interface type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>panel interface type <ref refid="hpm__panel_8h_1a6bcbee3b0dab5879c329e5d4cd855888" kindref="member">hpm_panel_if_type_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="147" column="21" bodyfile="components/panel/hpm_panel.c" bodystart="62" bodyend="65" declfile="components/panel/hpm_panel.h" declline="147" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a5858271196f94f562300ee5834b6ff8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_panel_register_interface</definition>
        <argsstring>(hpm_panel_t *panel, hpm_panel_hw_interface_t *hw_if)</argsstring>
        <name>hpm_panel_register_interface</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <param>
          <type><ref refid="hpm__panel_8h_1add6c20fa922fb67498fe50b44983d5ce" kindref="member">hpm_panel_hw_interface_t</ref> *</type>
          <declname>hw_if</declname>
        </param>
        <briefdescription>
<para>Register platform level hardware interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hw_if</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of hardware interface </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="155" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="67" bodyend="71" declfile="components/panel/hpm_panel.h" declline="155" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a30dac453e8169ca96ddceb9c014cb5a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_panel_reset</definition>
        <argsstring>(hpm_panel_t *panel)</argsstring>
        <name>hpm_panel_reset</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <briefdescription>
<para>Reset the panel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="162" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="73" bodyend="77" declfile="components/panel/hpm_panel.h" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a95f73d7d67c7e9b471e3c269eb72ce2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_panel_init</definition>
        <argsstring>(hpm_panel_t *panel)</argsstring>
        <name>hpm_panel_init</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <briefdescription>
<para>Initialize the panel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="169" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="79" bodyend="83" declfile="components/panel/hpm_panel.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a140a21f4b95f362df5b5873d3fd0e626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_panel_power_on</definition>
        <argsstring>(hpm_panel_t *panel)</argsstring>
        <name>hpm_panel_power_on</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <briefdescription>
<para>Power on the panel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="176" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="85" bodyend="89" declfile="components/panel/hpm_panel.h" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a837bf394a63288ec289c950bc8b4084a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_panel_power_off</definition>
        <argsstring>(hpm_panel_t *panel)</argsstring>
        <name>hpm_panel_power_off</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <briefdescription>
<para>Power off the panel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="183" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="91" bodyend="95" declfile="components/panel/hpm_panel.h" declline="183" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a37151cd0c3dab3abeecf00e288c6dfee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_panel_set_backlight</definition>
        <argsstring>(hpm_panel_t *panel, uint16_t percent)</argsstring>
        <name>hpm_panel_set_backlight</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
<para>Set backlight value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">percent</parametername>
</parameternamelist>
<parameterdescription>
<para>percent of backlight [0 - 100] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="191" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="97" bodyend="107" declfile="components/panel/hpm_panel.h" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1ade6e9b00983ba55798676caf028fd685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t hpm_panel_get_backlight</definition>
        <argsstring>(hpm_panel_t *panel)</argsstring>
        <name>hpm_panel_get_backlight</name>
        <param>
          <type><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref> *</type>
          <declname>panel</declname>
        </param>
        <briefdescription>
<para>Get backlight value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">panel</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of panel instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>percent of backlight [0 - 100] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="200" column="9" bodyfile="components/panel/hpm_panel.c" bodystart="109" bodyend="112" declfile="components/panel/hpm_panel.h" declline="200" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1aa89cf49e16950aa0bc733c430d1b33ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_panel_delay_ms</definition>
        <argsstring>(uint32_t ms)</argsstring>
        <name>hpm_panel_delay_ms</name>
        <param>
          <type>uint32_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>Delay specified milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ms</parametername>
</parameternamelist>
<parameterdescription>
<para>expected delay interval in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="207" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="114" bodyend="117" declfile="components/panel/hpm_panel.h" declline="207" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1ad9d54e80ea8f8fd998b25765a575ca69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_panel_delay_us</definition>
        <argsstring>(uint32_t us)</argsstring>
        <name>hpm_panel_delay_us</name>
        <param>
          <type>uint32_t</type>
          <declname>us</declname>
        </param>
        <briefdescription>
<para>Delay specified microseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">us</parametername>
</parameternamelist>
<parameterdescription>
<para>expected delay interval in microseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="214" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="119" bodyend="122" declfile="components/panel/hpm_panel.h" declline="214" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a9c6803a89ab6f71cf1d590d530fa28b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * hpm_panel_memory_alloc</definition>
        <argsstring>(hpm_panel_mem_type_t type, uint32_t size)</argsstring>
        <name>hpm_panel_memory_alloc</name>
        <param>
          <type><ref refid="hpm__panel_8h_1aa99409fc15f9115c131ddb5365e9b11d" kindref="member">hpm_panel_mem_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate panel memory of a specified type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>memory type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>memory size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="223" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="195" bodyend="236" declfile="components/panel/hpm_panel.h" declline="223" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1a1a91d680ec1fb477267aba8aace657cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_panel_memory_free</definition>
        <argsstring>(void *addr)</argsstring>
        <name>hpm_panel_memory_free</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Free panel memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>memory address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="231" column="6" bodyfile="components/panel/hpm_panel.c" bodystart="238" bodyend="285" declfile="components/panel/hpm_panel.h" declline="231" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1af030a0c64d4748705dd83cc1bff9ea6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__panel_8h_1aa99409fc15f9115c131ddb5365e9b11d" kindref="member">hpm_panel_mem_type_t</ref></type>
        <definition>hpm_panel_mem_type_t hpm_panel_memory_get_type</definition>
        <argsstring>(void *addr)</argsstring>
        <name>hpm_panel_memory_get_type</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Get panel memory type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>memory address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>memory type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="241" column="22" bodyfile="components/panel/hpm_panel.c" bodystart="287" bodyend="303" declfile="components/panel/hpm_panel.h" declline="241" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="hpm__panel_8h_1adb510ed50480e59899e7f227c4f6df24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hpm_panel_memory_register</definition>
        <argsstring>(hpm_panel_mem_type_t type, void *addr, uint32_t size)</argsstring>
        <name>hpm_panel_memory_register</name>
        <param>
          <type><ref refid="hpm__panel_8h_1aa99409fc15f9115c131ddb5365e9b11d" kindref="member">hpm_panel_mem_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Register panel memory block to panel subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>memory block type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>memory block address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>memory block size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0: success, other: failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/panel/hpm_panel.h" line="253" column="5" bodyfile="components/panel/hpm_panel.c" bodystart="305" bodyend="342" declfile="components/panel/hpm_panel.h" declline="253" declcolumn="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023-2025<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_HPM_PANEL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_HPM_PANEL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpm__panel" kindref="compound">hpm_panel</ref>;</highlight></codeline>
<codeline lineno="16" refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpm__panel" kindref="compound">hpm_panel</ref><sp/><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="structhpm__panel__timing" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpm__panel__timing" kindref="compound">hpm_panel_timing</ref><sp/>{</highlight></codeline>
<codeline lineno="19" refid="structhpm__panel__timing_1ac893a35af014246eb0524e3cf2592d8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1ac893a35af014246eb0524e3cf2592d8b" kindref="member">pixel_clock_khz</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="20" refid="structhpm__panel__timing_1aac387ac8ae7f4d392e62bb14093a3e81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1aac387ac8ae7f4d392e62bb14093a3e81" kindref="member">hactive</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21" refid="structhpm__panel__timing_1a01063e6ce006922aaef0ac6da15c7e4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1a01063e6ce006922aaef0ac6da15c7e4d" kindref="member">hfront_porch</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22" refid="structhpm__panel__timing_1aaa6e5423d022da290ed6239779dc630a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1aaa6e5423d022da290ed6239779dc630a" kindref="member">hback_porch</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23" refid="structhpm__panel__timing_1a0fd10ad094dec39e7427d1d69b8f7500" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1a0fd10ad094dec39e7427d1d69b8f7500" kindref="member">hsync_len</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structhpm__panel__timing_1addf9e4ea0c40e30e08cde21e7127a367" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1addf9e4ea0c40e30e08cde21e7127a367" kindref="member">vactive</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26" refid="structhpm__panel__timing_1a39ceaf435cdbfed50514ba5a69f0a590" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1a39ceaf435cdbfed50514ba5a69f0a590" kindref="member">vfront_porch</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="27" refid="structhpm__panel__timing_1aaf8f34875b81580cef5d6f9bf6e0b0be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1aaf8f34875b81580cef5d6f9bf6e0b0be" kindref="member">vback_porch</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28" refid="structhpm__panel__timing_1acc85a12320040d1453b750d8f1a25a29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1acc85a12320040d1453b750d8f1a25a29" kindref="member">vsync_len</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29" refid="structhpm__panel__timing_1abc29f89fd0b61798fae9147cfb1dff5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1abc29f89fd0b61798fae9147cfb1dff5a" kindref="member">hsync_pol</ref><sp/>:1;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30" refid="structhpm__panel__timing_1a3560ad1f8642fcaa014e1495eacd9fd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1a3560ad1f8642fcaa014e1495eacd9fd6" kindref="member">vsync_pol</ref><sp/>:1;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31" refid="structhpm__panel__timing_1a205f52dffb1271d3d5ce21b906599da3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1a205f52dffb1271d3d5ce21b906599da3" kindref="member">de_pol</ref><sp/>:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32" refid="structhpm__panel__timing_1a046349ae301b111090a1d996996e324b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1a046349ae301b111090a1d996996e324b" kindref="member">pixel_clk_pol</ref><sp/>:1;<sp/></highlight></codeline>
<codeline lineno="33" refid="structhpm__panel__timing_1a454699fd60541e66225c85c469847c05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__timing_1a454699fd60541e66225c85c469847c05" kindref="member">pixel_data_pol</ref><sp/>:1;</highlight></codeline>
<codeline lineno="34" refid="hpm__panel_8h_1a7bcd509fd4d6697ced5376ab368334d3" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__panel_8h_1a7bcd509fd4d6697ced5376ab368334d3" kindref="member">hpm_panel_timing_t</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4f" kindref="member">hpm_panel_mipi_format</ref><sp/>{</highlight></codeline>
<codeline lineno="37" refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4faa7485717dda631dfbd7395388843d096" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4faa7485717dda631dfbd7395388843d096" kindref="member">HPM_PANEL_MIPI_FORMAT_RGB888</ref>,</highlight></codeline>
<codeline lineno="38" refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4fac0a4e2d3bfe461e18f8dd8e4372b2cc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4fac0a4e2d3bfe461e18f8dd8e4372b2cc7" kindref="member">HPM_PANEL_MIPI_FORMAT_RGB666</ref>,</highlight></codeline>
<codeline lineno="39" refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4fa474a3129966e98896652afe03f21f1b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4fa474a3129966e98896652afe03f21f1b3" kindref="member">HPM_PANEL_MIPI_FORMAT_RGB666_PACKED</ref>,</highlight></codeline>
<codeline lineno="40" refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4fa8d0edf4c80c90e495fffebb6c4b2a0fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4fa8d0edf4c80c90e495fffebb6c4b2a0fd" kindref="member">HPM_PANEL_MIPI_FORMAT_RGB565</ref></highlight></codeline>
<codeline lineno="41" refid="hpm__panel_8h_1a976f2f2aab9019fae3ffea16fd35e50f" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4f" kindref="member">hpm_panel_mipi_format</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="structhpm__panel__hw__interface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpm__panel__hw__interface" kindref="compound">hpm_panel_hw_interface</ref><sp/>{</highlight></codeline>
<codeline lineno="44" refid="structhpm__panel__hw__interface_1a332880e2ddee9115d12b37940925c726" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__hw__interface_1a332880e2ddee9115d12b37940925c726" kindref="member">lcdc_pixel_clk_khz</ref>;</highlight></codeline>
<codeline lineno="45" refid="structhpm__panel__hw__interface_1a4f8f83b4d087c6782f1cf2319962b4b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structhpm__panel__hw__interface_1a4f8f83b4d087c6782f1cf2319962b4b1" kindref="member">set_reset_pin_level</ref>)(uint8_t<sp/>level);</highlight></codeline>
<codeline lineno="46" refid="structhpm__panel__hw__interface_1a206afc5fa0495e0c1de09ace725d784f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structhpm__panel__hw__interface_1a206afc5fa0495e0c1de09ace725d784f" kindref="member">set_backlight</ref>)(uint16_t<sp/>percent);</highlight></codeline>
<codeline lineno="47" refid="structhpm__panel__hw__interface_1a83a21325d2890baee3d8efef8115a060" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structhpm__panel__hw__interface_1a83a21325d2890baee3d8efef8115a060" kindref="member">set_video_router</ref>)(void);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50" refid="structhpm__panel__hw__interface_1a810bc99850ec1d603c377848c0be7b2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a6e449cf9aee7bc5b133d6748b5a61a4f" kindref="member">hpm_panel_mipi_format</ref><sp/><ref refid="structhpm__panel__hw__interface_1a810bc99850ec1d603c377848c0be7b2b" kindref="member">format</ref>;</highlight></codeline>
<codeline lineno="51" refid="structhpm__panel__hw__interface_1a48c98dd1f0fd57c06adf3917f3921343" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structhpm__panel__hw__interface_1a48c98dd1f0fd57c06adf3917f3921343" kindref="member">mipi_host_base</ref>;</highlight></codeline>
<codeline lineno="52" refid="structhpm__panel__hw__interface_1aa61e1499c9a5434723475dd98a2d82bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structhpm__panel__hw__interface_1aa61e1499c9a5434723475dd98a2d82bf" kindref="member">mipi_phy_base</ref>;</highlight></codeline>
<codeline lineno="53" refid="structhpm__panel__hw__interface_1a9127b56f53d49f495133eed8a78f3fed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structhpm__panel__hw__interface_1a9127b56f53d49f495133eed8a78f3fed" kindref="member">mipi</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55" refid="structhpm__panel__hw__interface_1acf63530a6459e4a17895c4b1c54b02ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__hw__interface_1acf63530a6459e4a17895c4b1c54b02ab" kindref="member">channel_di_index</ref><sp/>:8;</highlight></codeline>
<codeline lineno="56" refid="structhpm__panel__hw__interface_1a9639803c2c7bc885ca901b7dd8537f2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structhpm__panel__hw__interface_1a9639803c2c7bc885ca901b7dd8537f2b" kindref="member">channel_index</ref><sp/>:8;</highlight></codeline>
<codeline lineno="57" refid="structhpm__panel__hw__interface_1ad12bb090a28976829ca80ae8607b1211" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structhpm__panel__hw__interface_1ad12bb090a28976829ca80ae8607b1211" kindref="member">lvb_base</ref>;</highlight></codeline>
<codeline lineno="58" refid="structhpm__panel__hw__interface_1a309416da73f38a4e20343f705435be21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structhpm__panel__hw__interface_1a309416da73f38a4e20343f705435be21" kindref="member">lvds</ref>;</highlight></codeline>
<codeline lineno="59" refid="structhpm__panel__hw__interface_1a5be0df4be3a4be249f7c6730fe69f8e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><ref refid="structhpm__panel__hw__interface_1a5be0df4be3a4be249f7c6730fe69f8e9" kindref="member">video</ref>;</highlight></codeline>
<codeline lineno="60" refid="hpm__panel_8h_1add6c20fa922fb67498fe50b44983d5ce" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__panel_8h_1add6c20fa922fb67498fe50b44983d5ce" kindref="member">hpm_panel_hw_interface_t</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="structhpm__panel__funcs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpm__panel__funcs" kindref="compound">hpm_panel_funcs</ref><sp/>{</highlight></codeline>
<codeline lineno="63" refid="structhpm__panel__funcs_1a3a605928271b567b2fdac7049f528632" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structhpm__panel__funcs_1a3a605928271b567b2fdac7049f528632" kindref="member">reset</ref>)(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="64" refid="structhpm__panel__funcs_1add22016107e005a45f8a5f158c035024" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structhpm__panel__funcs_1add22016107e005a45f8a5f158c035024" kindref="member">init</ref>)(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="65" refid="structhpm__panel__funcs_1a63620cff55432ca592fb4b0965f00479" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structhpm__panel__funcs_1a63620cff55432ca592fb4b0965f00479" kindref="member">power_on</ref>)(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="66" refid="structhpm__panel__funcs_1aef8e78d8cb9b8b6d0a8b48fac8e81287" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structhpm__panel__funcs_1aef8e78d8cb9b8b6d0a8b48fac8e81287" kindref="member">power_off</ref>)(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="67" refid="hpm__panel_8h_1aa0f2ad18e8dca82bdb858ffb1c4dc76e" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__panel_8h_1aa0f2ad18e8dca82bdb858ffb1c4dc76e" kindref="member">hpm_panel_funcs_t</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27" kindref="member">hpm_panel_if_type</ref><sp/>{</highlight></codeline>
<codeline lineno="70" refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27af4335974bb27e8f1b3c96035bd209252" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27af4335974bb27e8f1b3c96035bd209252" kindref="member">HPM_PANEL_IF_TYPE_RGB</ref>,</highlight></codeline>
<codeline lineno="71" refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27afc982147df8411021f28b906b1e0993d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27afc982147df8411021f28b906b1e0993d" kindref="member">HPM_PANEL_IF_TYPE_LVDS_SINGLE</ref>,</highlight></codeline>
<codeline lineno="72" refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27aff8adff2f5821af143235aae2e756c9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27aff8adff2f5821af143235aae2e756c9e" kindref="member">HPM_PANEL_IF_TYPE_LVDS_SPLIT</ref>,</highlight></codeline>
<codeline lineno="73" refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27abe26d61cc08d3359c42829e7b66b7506" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1aee37ba3d7e07181d3dff50f0c94d3b27abe26d61cc08d3359c42829e7b66b7506" kindref="member">HPM_PANEL_IF_TYPE_MIPI</ref>,</highlight></codeline>
<codeline lineno="74" refid="hpm__panel_8h_1a6bcbee3b0dab5879c329e5d4cd855888" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__panel_8h_1a6bcbee3b0dab5879c329e5d4cd855888" kindref="member">hpm_panel_if_type_t</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdf" kindref="member">hpm_panel_mem_type</ref><sp/>{</highlight></codeline>
<codeline lineno="77" refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa02357b9228e8941377b04e28570ed5d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa02357b9228e8941377b04e28570ed5d5" kindref="member">HPM_PANEL_MEM_TYPE_NONCACHEABLE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="78" refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa69c604d7ab10a056b5cdaa606b44bbbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa69c604d7ab10a056b5cdaa606b44bbbd" kindref="member">HPM_PANEL_MEM_TYPE_CACHEABLE</ref>,</highlight></codeline>
<codeline lineno="79" refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa24adba53bd5b750b7a2ef7ce7b173605" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa24adba53bd5b750b7a2ef7ce7b173605" kindref="member">HPM_PANEL_MEM_TYPE_MAX</ref>,</highlight></codeline>
<codeline lineno="80" refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa0bba963c6e47cd02f9a76d3c4ec807bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a7f71a904e44d9ec2b7bce5c58d87dcdfa0bba963c6e47cd02f9a76d3c4ec807bd" kindref="member">HPM_PANEL_MEM_TYPE_UNKNOWN</ref>,</highlight></codeline>
<codeline lineno="81" refid="hpm__panel_8h_1aa99409fc15f9115c131ddb5365e9b11d" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__panel_8h_1aa99409fc15f9115c131ddb5365e9b11d" kindref="member">hpm_panel_mem_type_t</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2" kindref="member">hpm_panel_state_power</ref><sp/>{</highlight></codeline>
<codeline lineno="84" refid="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2aaff225f55fb64aba36e77d0c04036499" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2aaff225f55fb64aba36e77d0c04036499" kindref="member">HPM_PANEL_STATE_POWER_OFF</ref>,</highlight></codeline>
<codeline lineno="85" refid="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2a32e6d8a85e01cae4c26767b9583015b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a2e5bfd3219f28b9cf83b995f40857ad2a32e6d8a85e01cae4c26767b9583015b2" kindref="member">HPM_PANEL_STATE_POWER_ON</ref></highlight></codeline>
<codeline lineno="86" refid="hpm__panel_8h_1a2fa2de5082a35ada6f667239fadfea8e" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__panel_8h_1a2fa2de5082a35ada6f667239fadfea8e" kindref="member">hpm_panel_power_state_t</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structhpm__panel__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpm__panel__state" kindref="compound">hpm_panel_state</ref><sp/>{</highlight></codeline>
<codeline lineno="89" refid="structhpm__panel__state_1a7163a522c32dd28c0a72368e63d98db3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structhpm__panel__state_1a7163a522c32dd28c0a72368e63d98db3" kindref="member">backlight_percent</ref>;</highlight></codeline>
<codeline lineno="90" refid="structhpm__panel__state_1a62c2a1e31cca4c8b4a5ea0420b45eb85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structhpm__panel__state_1a62c2a1e31cca4c8b4a5ea0420b45eb85" kindref="member">power_state</ref>;</highlight></codeline>
<codeline lineno="91" refid="hpm__panel_8h_1a3c126cdbfa06dc7c96787c998646a1b0" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__panel_8h_1a3c126cdbfa06dc7c96787c998646a1b0" kindref="member">hpm_panel_state_t</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structhpm__panel" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpm__panel" kindref="compound">hpm_panel</ref><sp/>{</highlight></codeline>
<codeline lineno="94" refid="structhpm__panel_1a70a7994f8fbf56b9b6c993a8f2ef443a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structhpm__panel_1a70a7994f8fbf56b9b6c993a8f2ef443a" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="95" refid="structhpm__panel_1a5aed835423ffc22cf404a9e06f3296a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a6bcbee3b0dab5879c329e5d4cd855888" kindref="member">hpm_panel_if_type_t</ref><sp/><ref refid="structhpm__panel_1a5aed835423ffc22cf404a9e06f3296a6" kindref="member">if_type</ref>;</highlight></codeline>
<codeline lineno="96" refid="structhpm__panel_1ac873b90c63b8952521ef2d29143e3bff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a7bcd509fd4d6697ced5376ab368334d3" kindref="member">hpm_panel_timing_t</ref><sp/><ref refid="structhpm__panel_1ac873b90c63b8952521ef2d29143e3bff" kindref="member">timing</ref>;</highlight></codeline>
<codeline lineno="97" refid="structhpm__panel_1a306e0e06a2d08a6e2988832243aac1a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1a3c126cdbfa06dc7c96787c998646a1b0" kindref="member">hpm_panel_state_t</ref><sp/><ref refid="structhpm__panel_1a306e0e06a2d08a6e2988832243aac1a8" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="98" refid="structhpm__panel_1a8b0f988109a60bc272edb034a82b6110" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1add6c20fa922fb67498fe50b44983d5ce" kindref="member">hpm_panel_hw_interface_t</ref><sp/><ref refid="structhpm__panel_1a8b0f988109a60bc272edb034a82b6110" kindref="member">hw_if</ref>;</highlight></codeline>
<codeline lineno="99" refid="structhpm__panel_1a09a8d4c18fa9956ac7cb66dad83c5129" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__panel_8h_1aa0f2ad18e8dca82bdb858ffb1c4dc76e" kindref="member">hpm_panel_funcs_t</ref><sp/><ref refid="structhpm__panel_1a09a8d4c18fa9956ac7cb66dad83c5129" kindref="member">funcs</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*<ref refid="hpm__panel_8h_1a5f49fe905e10e7da150ecb3fb988243d" kindref="member">hpm_panel_find_device_default</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*<ref refid="hpm__panel_8h_1aaa49b6d94ae528494ca5b27343aaa69c" kindref="member">hpm_panel_find_device</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="hpm__panel_8h_1a3a5fa859e400c9930aa100a322505cad" kindref="member">hpm_panel_get_name</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a7bcd509fd4d6697ced5376ab368334d3" kindref="member">hpm_panel_timing_t</ref><sp/>*<ref refid="hpm__panel_8h_1aaf8550bc7ed4c7c50cdece54bcd66983" kindref="member">hpm_panel_get_timing</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="hpm__panel_8h_1a6bcbee3b0dab5879c329e5d4cd855888" kindref="member">hpm_panel_if_type_t</ref><sp/><ref refid="hpm__panel_8h_1a2c50b1eee369efa91fb93637a6adc7ab" kindref="member">hpm_panel_get_if_type</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a5858271196f94f562300ee5834b6ff8c" kindref="member">hpm_panel_register_interface</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel,<sp/><ref refid="hpm__panel_8h_1add6c20fa922fb67498fe50b44983d5ce" kindref="member">hpm_panel_hw_interface_t</ref><sp/>*hw_if);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a30dac453e8169ca96ddceb9c014cb5a9" kindref="member">hpm_panel_reset</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a95f73d7d67c7e9b471e3c269eb72ce2d" kindref="member">hpm_panel_init</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a140a21f4b95f362df5b5873d3fd0e626" kindref="member">hpm_panel_power_on</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a837bf394a63288ec289c950bc8b4084a" kindref="member">hpm_panel_power_off</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a37151cd0c3dab3abeecf00e288c6dfee" kindref="member">hpm_panel_set_backlight</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel,<sp/>uint16_t<sp/>percent);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">uint8_t<sp/><ref refid="hpm__panel_8h_1ade6e9b00983ba55798676caf028fd685" kindref="member">hpm_panel_get_backlight</ref>(<ref refid="hpm__panel_8h_1a7862798a9cdfbf3622dc98a0273ee7e8" kindref="member">hpm_panel_t</ref><sp/>*panel);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1aa89cf49e16950aa0bc733c430d1b33ce" kindref="member">hpm_panel_delay_ms</ref>(uint32_t<sp/>ms);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1ad9d54e80ea8f8fd998b25765a575ca69" kindref="member">hpm_panel_delay_us</ref>(uint32_t<sp/>us);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="hpm__panel_8h_1a9c6803a89ab6f71cf1d590d530fa28b6" kindref="member">hpm_panel_memory_alloc</ref>(<ref refid="hpm__panel_8h_1aa99409fc15f9115c131ddb5365e9b11d" kindref="member">hpm_panel_mem_type_t</ref><sp/>type,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1a1a91d680ec1fb477267aba8aace657cc" kindref="member">hpm_panel_memory_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><ref refid="hpm__panel_8h_1aa99409fc15f9115c131ddb5365e9b11d" kindref="member">hpm_panel_mem_type_t</ref><sp/><ref refid="hpm__panel_8h_1af030a0c64d4748705dd83cc1bff9ea6e" kindref="member">hpm_panel_memory_get_type</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="hpm__panel_8h_1adb510ed50480e59899e7f227c4f6df24" kindref="member">hpm_panel_memory_register</ref>(<ref refid="hpm__panel_8h_1aa99409fc15f9115c131ddb5365e9b11d" kindref="member">hpm_panel_mem_type_t</ref><sp/>type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_HPM_PANEL_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="components/panel/hpm_panel.h"/>
  </compounddef>
</doxygen>
