<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="hpm__mcl__detect_8h" kind="file" language="C++">
    <compoundname>hpm_mcl_detect.h</compoundname>
    <includes refid="hpm__mcl__common_8h" local="yes">hpm_mcl_common.h</includes>
    <includes refid="hpm__mcl__loop_8h" local="yes">hpm_mcl_loop.h</includes>
    <includedby refid="hpm__mcl__detect_8c" local="yes">middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>hpm_mcl_control.h</label>
        <link refid="hpm__mcl__control_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hpm_mcl_filter.h</label>
        <link refid="hpm__mcl__filter_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>hpm_mcl_path_plan.h</label>
        <link refid="hpm__mcl__path__plan_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.h</label>
        <link refid="hpm__mcl__detect_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>hpm_mcl_drivers.h</label>
        <link refid="hpm__mcl__drivers_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>hpm_mcl_loop.h</label>
        <link refid="hpm__mcl__loop_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>hpm_mcl_analog.h</label>
        <link refid="hpm__mcl__analog_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>hpm_mcl_encoder.h</label>
        <link refid="hpm__mcl__encoder_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>hpm_mcl_cfg.h</label>
        <link refid="hpm__mcl__cfg_8h"/>
      </node>
      <node id="2">
        <label>hpm_mcl_common.h</label>
        <link refid="hpm__mcl__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>hpm_mcl_debug.h</label>
        <link refid="hpm__mcl__debug_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>hpm_mcl_math.h</label>
        <link refid="hpm__mcl__math_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>hpm_mcl_physical.h</label>
        <link refid="hpm__mcl__physical_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="12">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="13">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.c</label>
        <link refid="hpm__mcl__detect_8c"/>
      </node>
      <node id="1">
        <label>middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.h</label>
        <link refid="hpm__mcl__detect_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmcl__detect__status" prot="public">mcl_detect_status</innerclass>
    <innerclass refid="structmcl__detect__callback__t" prot="public">mcl_detect_callback_t</innerclass>
    <innerclass refid="structmcl__detect__cfg__t" prot="public">mcl_detect_cfg_t</innerclass>
    <innerclass refid="structmcl__detect__t" prot="public">mcl_detect_t</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="hpm__mcl__detect_8h_1a72d143b921733b1bba2746fdee2c906a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref></type>
        <definition>hpm_mcl_stat_t hpm_mcl_detect_init</definition>
        <argsstring>(mcl_detect_t *detect, mcl_detect_cfg_t *cfg, mcl_loop_t *loop, mcl_encoder_t *encoder, mcl_analog_t *analog, mcl_drivers_t *drivers)</argsstring>
        <name>hpm_mcl_detect_init</name>
        <param>
          <type><ref refid="structmcl__detect__t" kindref="compound">mcl_detect_t</ref> *</type>
          <declname>detect</declname>
        </param>
        <param>
          <type><ref refid="structmcl__detect__cfg__t" kindref="compound">mcl_detect_cfg_t</ref> *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type><ref refid="structmcl__loop__t" kindref="compound">mcl_loop_t</ref> *</type>
          <declname>loop</declname>
        </param>
        <param>
          <type><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> *</type>
          <declname>encoder</declname>
        </param>
        <param>
          <type><ref refid="structmcl__analog__t" kindref="compound">mcl_analog_t</ref> *</type>
          <declname>analog</declname>
        </param>
        <param>
          <type><ref refid="structmcl__drivers__t" kindref="compound">mcl_drivers_t</ref> *</type>
          <declname>drivers</declname>
        </param>
        <briefdescription>
<para>Initialising data structures for fault detection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>detect</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__detect__t" kindref="compound">mcl_detect_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cfg</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__detect__cfg__t" kindref="compound">mcl_detect_cfg_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loop</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__loop__t" kindref="compound">mcl_loop_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>analog</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__analog__t" kindref="compound">mcl_analog_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drivers</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__drivers__t" kindref="compound">mcl_drivers_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.h" line="73" column="16" bodyfile="middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.c" bodystart="10" bodyend="28" declfile="middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.h" declline="73" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="hpm__mcl__detect_8h_1a045e4fb1dc8d746a2964620a1a0ab4e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref></type>
        <definition>hpm_mcl_stat_t hpm_mcl_detect_loop</definition>
        <argsstring>(mcl_detect_t *detect)</argsstring>
        <name>hpm_mcl_detect_loop</name>
        <param>
          <type><ref refid="structmcl__detect__t" kindref="compound">mcl_detect_t</ref> *</type>
          <declname>detect</declname>
        </param>
        <briefdescription>
<para>Loop for detection function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>detect</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmcl__detect__t" kindref="compound">mcl_detect_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.h" line="82" column="16" bodyfile="middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.c" bodystart="30" bodyend="42" declfile="middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.h" declline="82" declcolumn="16"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_MCL_DETECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_MCL_DETECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__mcl__common_8h" kindref="compound">hpm_mcl_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__mcl__loop_8h" kindref="compound">hpm_mcl_loop.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="structmcl__detect__status" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="18" refid="structmcl__detect__status_1a2550d3410594519e1d5e8a6f1b31b20e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__loop_8h_1af5c8ea9874903da335e430fd33298555" kindref="member">mcl_loop_status_t</ref><sp/>*<ref refid="structmcl__detect__status_1a2550d3410594519e1d5e8a6f1b31b20e" kindref="member">control_loop</ref>;</highlight></codeline>
<codeline lineno="19" refid="structmcl__detect__status_1acc9f4e22c476428a6d2f218694a19e75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__encoder_8h_1ada292d0bcc6c9a8bb5ffd264f3f572c7" kindref="member">mcl_encoder_status_t</ref><sp/>*<ref refid="structmcl__detect__status_1acc9f4e22c476428a6d2f218694a19e75" kindref="member">encoder</ref>;</highlight></codeline>
<codeline lineno="20" refid="structmcl__detect__status_1a3f3932205b3c0a32504ef16b0730e3fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__analog_8h_1a80e36af09fe54b06fef465e5fd60497e" kindref="member">mcl_analog_status_t</ref><sp/>*<ref refid="structmcl__detect__status_1a3f3932205b3c0a32504ef16b0730e3fc" kindref="member">analog</ref>;</highlight></codeline>
<codeline lineno="21" refid="structmcl__detect__status_1a3649a4c09fed06840847414a95e15064" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__drivers_8h_1ab43e4eea6738e53c1c0d2aabd0004301" kindref="member">mcl_drivers_status_t</ref><sp/>*<ref refid="structmcl__detect__status_1a3649a4c09fed06840847414a95e15064" kindref="member">drivers</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}<sp/><ref refid="structmcl__detect__status" kindref="compound">mcl_detect_status</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structmcl__detect__callback__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="29" refid="structmcl__detect__callback__t_1aab61787dda3618fca17473928fdbda61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/>(*<ref refid="structmcl__detect__callback__t_1aab61787dda3618fca17473928fdbda61" kindref="member">disable_output</ref>)(void);<sp/></highlight></codeline>
<codeline lineno="30" refid="structmcl__detect__callback__t_1a931465c9da7a2a9ba6ec1c8e2ad8c41a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structmcl__detect__callback__t_1a931465c9da7a2a9ba6ec1c8e2ad8c41a" kindref="member">user_process</ref>)(<ref refid="structmcl__detect__status" kindref="compound">mcl_detect_status</ref><sp/>status);<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal">}<sp/><ref refid="structmcl__detect__callback__t" kindref="compound">mcl_detect_callback_t</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structmcl__detect__cfg__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38" refid="structmcl__detect__cfg__t_1a53b93335c4bc38cadf9747aa128eec3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmcl__detect__cfg__t_1a53b93335c4bc38cadf9747aa128eec3b" kindref="member">enable_detect</ref>;<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40" refid="structmcl__detect__cfg__t_1ad7d1dce96804d62cc75904c4f9af7932" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmcl__detect__cfg__t_1ad7d1dce96804d62cc75904c4f9af7932" kindref="member">loop</ref>;</highlight></codeline>
<codeline lineno="41" refid="structmcl__detect__cfg__t_1a6587a3a51e6ac6b5f0e58d615a7de951" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmcl__detect__cfg__t_1a6587a3a51e6ac6b5f0e58d615a7de951" kindref="member">encoder</ref>;</highlight></codeline>
<codeline lineno="42" refid="structmcl__detect__cfg__t_1a794435f4a2648e05a0638ad9b5d037bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmcl__detect__cfg__t_1a794435f4a2648e05a0638ad9b5d037bd" kindref="member">analog</ref>;</highlight></codeline>
<codeline lineno="43" refid="structmcl__detect__cfg__t_1adc0346c447ff8950e07db337a1349776" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmcl__detect__cfg__t_1adc0346c447ff8950e07db337a1349776" kindref="member">drivers</ref>;</highlight></codeline>
<codeline lineno="44" refid="structmcl__detect__cfg__t_1a19f8e2898a640a60b9e26b4036061073" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>en_submodule_detect;<sp/><sp/></highlight></codeline>
<codeline lineno="45" refid="structmcl__detect__cfg__t_1aee467912387e14d913a7681d30efad6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__detect__callback__t" kindref="compound">mcl_detect_callback_t</ref><sp/><ref refid="structmcl__detect__cfg__t_1aee467912387e14d913a7681d30efad6d" kindref="member">callback</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}<sp/><ref refid="structmcl__detect__cfg__t" kindref="compound">mcl_detect_cfg_t</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structmcl__detect__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53" refid="structmcl__detect__t_1a41f7b7721fe157da834d4648e50259e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__detect__cfg__t" kindref="compound">mcl_detect_cfg_t</ref><sp/>*<ref refid="structmcl__detect__t_1a41f7b7721fe157da834d4648e50259e2" kindref="member">cfg</ref>;</highlight></codeline>
<codeline lineno="54" refid="structmcl__detect__t_1acca3ea8f727706ae0aa63b6362ed4da5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__detect__status" kindref="compound">mcl_detect_status</ref><sp/><ref refid="structmcl__detect__t_1acca3ea8f727706ae0aa63b6362ed4da5" kindref="member">status</ref>;</highlight></codeline>
<codeline lineno="55" refid="structmcl__detect__t_1a17aa815e94eeb16e92c0f9c6b70d242f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__drivers__t" kindref="compound">mcl_drivers_t</ref><sp/>*<ref refid="structmcl__detect__t_1a17aa815e94eeb16e92c0f9c6b70d242f" kindref="member">drivers</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}<sp/><ref refid="structmcl__detect__t" kindref="compound">mcl_detect_t</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/><ref refid="hpm__mcl__detect_8h_1a72d143b921733b1bba2746fdee2c906a" kindref="member">hpm_mcl_detect_init</ref>(<ref refid="structmcl__detect__t" kindref="compound">mcl_detect_t</ref><sp/>*detect,<sp/><ref refid="structmcl__detect__cfg__t" kindref="compound">mcl_detect_cfg_t</ref><sp/>*cfg,<sp/><ref refid="structmcl__loop__t" kindref="compound">mcl_loop_t</ref><sp/>*loop,<sp/><ref refid="structmcl__encoder__t" kindref="compound">mcl_encoder_t</ref><sp/>*encoder,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmcl__analog__t" kindref="compound">mcl_analog_t</ref><sp/>*analog,<sp/><ref refid="structmcl__drivers__t" kindref="compound">mcl_drivers_t</ref><sp/>*drivers);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="hpm__mcl__common_8h_1a572fcb9d78561a8859565bac839c49b1" kindref="member">hpm_mcl_stat_t</ref><sp/><ref refid="hpm__mcl__detect_8h_1a045e4fb1dc8d746a2964620a1a0ab4e3" kindref="member">hpm_mcl_detect_loop</ref>(<ref refid="structmcl__detect__t" kindref="compound">mcl_detect_t</ref><sp/>*detect);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="middleware/hpm_mcl_v2/core/detect/hpm_mcl_detect.h"/>
  </compounddef>
</doxygen>
