<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="group__spi__interface" kind="group">
    <compoundname>spi_interface</compoundname>
    <title>SPI driver APIs</title>
    <innerclass refid="structspi__master__timing__config__t" prot="public">spi_master_timing_config_t</innerclass>
    <innerclass refid="structspi__timing__config__t" prot="public">spi_timing_config_t</innerclass>
    <innerclass refid="structspi__master__format__config__t" prot="public">spi_master_format_config_t</innerclass>
    <innerclass refid="structspi__common__format__config__t" prot="public">spi_common_format_config_t</innerclass>
    <innerclass refid="structspi__format__config__t" prot="public">spi_format_config_t</innerclass>
    <innerclass refid="structspi__master__control__config__t" prot="public">spi_master_control_config_t</innerclass>
    <innerclass refid="structspi__slave__control__config__t" prot="public">spi_slave_control_config_t</innerclass>
    <innerclass refid="structspi__common__control__config__t" prot="public">spi_common_control_config_t</innerclass>
    <innerclass refid="structspi__control__config__t" prot="public">spi_control_config_t</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="group__spi__interface_1ga2c8676764b385d09b4e9e2b4d353d8c1" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_dma_enable_t</name>
        <enumvalue id="group__spi__interface_1gga2c8676764b385d09b4e9e2b4d353d8c1a08d828f01f93e2552890d96467df5c91" prot="public">
          <name>spi_tx_dma_enable</name>
          <initializer>= SPI_CTRL_TXDMAEN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga2c8676764b385d09b4e9e2b4d353d8c1adb471155f65aa3496c662d09c600297e" prot="public">
          <name>spi_rx_dma_enable</name>
          <initializer>= SPI_CTRL_RXDMAEN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi dma enable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="23" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1ga8557f7a2d6b673c86868c02184980e12" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_interrupt_t</name>
        <enumvalue id="group__spi__interface_1gga8557f7a2d6b673c86868c02184980e12a56948d2f74a9ea7f43b3e028f905d8f4" prot="public">
          <name>spi_rx_fifo_overflow_int</name>
          <initializer>= SPI_INTREN_RXFIFOORINTEN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga8557f7a2d6b673c86868c02184980e12a358bee49efe4665b033c3e284e936437" prot="public">
          <name>spi_tx_fifo_underflow_int</name>
          <initializer>= SPI_INTREN_TXFIFOURINTEN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga8557f7a2d6b673c86868c02184980e12a629039949e0fadcd4f87fc682cd99681" prot="public">
          <name>spi_rx_fifo_threshold_int</name>
          <initializer>= SPI_INTREN_RXFIFOINTEN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga8557f7a2d6b673c86868c02184980e12a096e74ab237d4f82d526bdb6530b09a2" prot="public">
          <name>spi_tx_fifo_threshold_int</name>
          <initializer>= SPI_INTREN_TXFIFOINTEN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga8557f7a2d6b673c86868c02184980e12ac84380ad248d497ff43bbedb04c4c66d" prot="public">
          <name>spi_end_int</name>
          <initializer>= SPI_INTREN_ENDINTEN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga8557f7a2d6b673c86868c02184980e12a840fe3f2725b002cf0b2bfc117d13213" prot="public">
          <name>spi_slave_cmd_int</name>
          <initializer>= SPI_INTREN_SLVCMDEN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi interrupt mask </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="31" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1ga9ac2dd2dcd0b2c3b5fb1363eac489a3e" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_mode_selection_t</name>
        <enumvalue id="group__spi__interface_1gga9ac2dd2dcd0b2c3b5fb1363eac489a3eaa45f1c195fc0e4f77a6871bd3c72ad30" prot="public">
          <name>spi_master_mode</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga9ac2dd2dcd0b2c3b5fb1363eac489a3ea6d237dd86032fe3495c45320e9ba4afb" prot="public">
          <name>spi_slave_mode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi mode selection </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="43" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1gaa216e00c4ce27ab3897a36c72e617968" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_sclk_idle_state_t</name>
        <enumvalue id="group__spi__interface_1ggaa216e00c4ce27ab3897a36c72e617968a6a05e63978b1c909f29fcd9e0afe2739" prot="public">
          <name>spi_sclk_low_idle</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggaa216e00c4ce27ab3897a36c72e617968ab30339f1b568344b818345078b7a8d99" prot="public">
          <name>spi_sclk_high_idle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi clock polarity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="51" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1gab063d70616d6d55c73b01e9a1d2fb162" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_sclk_sampling_clk_edges_t</name>
        <enumvalue id="group__spi__interface_1ggab063d70616d6d55c73b01e9a1d2fb162adfa02e88e6f8e2e588681d72e7ec0740" prot="public">
          <name>spi_sclk_sampling_odd_clk_edges</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggab063d70616d6d55c73b01e9a1d2fb162aea2fabd92a138e8c88809d265a2d0408" prot="public">
          <name>spi_sclk_sampling_even_clk_edges</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi clock phase </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="59" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1ga33e343fc2876a4886bcd808046ba8ebe" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_cs2sclk_duration_t</name>
        <enumvalue id="group__spi__interface_1gga33e343fc2876a4886bcd808046ba8ebeaf94ebaa71709afd9f6f4c3445227a729" prot="public">
          <name>spi_cs2sclk_half_sclk_1</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga33e343fc2876a4886bcd808046ba8ebeac2b418b2429a6cc534e3ba11f2d0c36c" prot="public">
          <name>spi_cs2sclk_half_sclk_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga33e343fc2876a4886bcd808046ba8ebea312a681b7bb0692606448ca9528ed793" prot="public">
          <name>spi_cs2sclk_half_sclk_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga33e343fc2876a4886bcd808046ba8ebeaa1f01e9f9e4ee1f26da466705433c8a3" prot="public">
          <name>spi_cs2sclk_half_sclk_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi cs to sclk edge duration </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="67" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="67" bodyend="72"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1ga410142b39b47da0d68fa76b42aa7e030" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_csht_duration_t</name>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030abd82a7856f4955ffa1cefbb2ff293fb3" prot="public">
          <name>spi_csht_half_sclk_1</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030a773dad60833d9f40f6769c51d7e73bea" prot="public">
          <name>spi_csht_half_sclk_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030a4cd196bb27440ad5ae065225a9da51f5" prot="public">
          <name>spi_csht_half_sclk_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030ae724ef94bfcb549f811fcf1b6ebdb844" prot="public">
          <name>spi_csht_half_sclk_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030adba4fdcf211cee3d9b7cd4d46b9b6d2e" prot="public">
          <name>spi_csht_half_sclk_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030ac143308845fb6a002ee6acd02045714c" prot="public">
          <name>spi_csht_half_sclk_6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030a1979cd9f44e66499a4c3097bedfeab34" prot="public">
          <name>spi_csht_half_sclk_7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030abab095143d449401f5d492a13e16fde7" prot="public">
          <name>spi_csht_half_sclk_8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030a958920e56d23246f39cf0dcf99084148" prot="public">
          <name>spi_csht_half_sclk_9</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030aa0a04e8ff6835c991494327b2fe9d248" prot="public">
          <name>spi_csht_half_sclk_10</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030a81472251e57b6b3abf105989a14e3988" prot="public">
          <name>spi_csht_half_sclk_11</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030a20e9ad1c6d82de9ab4fec35958997b58" prot="public">
          <name>spi_csht_half_sclk_12</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030a4022b88297a903dcc85c6ad51f54555e" prot="public">
          <name>spi_csht_half_sclk_13</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030a74fdc26e3f64e8a6ea084de94b3435b1" prot="public">
          <name>spi_csht_half_sclk_14</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030aa918aacc182608444255e0da7eceec89" prot="public">
          <name>spi_csht_half_sclk_15</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga410142b39b47da0d68fa76b42aa7e030a2ecf0f75bcca14605b7cfb7b265bfbee" prot="public">
          <name>spi_csht_half_sclk_16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi cs high level duration </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="77" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="77" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1ga005ab1f2922a495cd72705c4f97806ef" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_addr_phase_format_t</name>
        <enumvalue id="group__spi__interface_1gga005ab1f2922a495cd72705c4f97806efa190261bcad9b03c22a05c9d44ed4225b" prot="public">
          <name>spi_address_phase_format_single_io_mode</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga005ab1f2922a495cd72705c4f97806efaf81060a0bf7cf5a3800f0180b8d69ccb" prot="public">
          <name>spi_address_phase_format_dualquad_io_mode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi address phase format </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="99" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1gae719b4eb51210f7a6878861fcb374d15" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_trans_mode_t</name>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15ad2a478fbce4d16e6a53fda9d2a7d28a7" prot="public">
          <name>spi_trans_write_read_together</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15a49d8050552ae2f123d9e5894d6d99c54" prot="public">
          <name>spi_trans_write_only</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15a20a6bb5cff8d394455e770ab0f73c4b4" prot="public">
          <name>spi_trans_read_only</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15a65f770f7ab912d205a692621390ff981" prot="public">
          <name>spi_trans_write_read</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15a77520f7f2577b7e360fcae729d557ebb" prot="public">
          <name>spi_trans_read_write</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15a427d193ff9c71ad266027b15c6ea8033" prot="public">
          <name>spi_trans_write_dummy_read</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15a978ff206dd41af49c7e973a1277a6e61" prot="public">
          <name>spi_trans_read_dummy_write</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15aacc4a2b50914746ead941136d219909d" prot="public">
          <name>spi_trans_no_data</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15a19c72838dd5f1436b0d12764565d1f23" prot="public">
          <name>spi_trans_dummy_write</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggae719b4eb51210f7a6878861fcb374d15a938f0767762b6a2f353bb987314826c5" prot="public">
          <name>spi_trans_dummy_read</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi transfer mode </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="107" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="107" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1gafff636ea73cfd28e417690fcfcacc5f9" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_data_phase_format_t</name>
        <enumvalue id="group__spi__interface_1ggafff636ea73cfd28e417690fcfcacc5f9afa1be05243c70c676721e8d938096115" prot="public">
          <name>spi_single_io_mode</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggafff636ea73cfd28e417690fcfcacc5f9af1e1ca2d0ebd45c2305977fe8d060938" prot="public">
          <name>spi_dual_io_mode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggafff636ea73cfd28e417690fcfcacc5f9a179a6b44f520254c8220f027c3035dcb" prot="public">
          <name>spi_quad_io_mode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi data phase format </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="123" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1gac0796b7f31e5676ab9e039b8dfa3b7f5" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_token_value_t</name>
        <enumvalue id="group__spi__interface_1ggac0796b7f31e5676ab9e039b8dfa3b7f5a17a2324369c04c125198cf1e6bc32f18" prot="public">
          <name>spi_token_value_0x00</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggac0796b7f31e5676ab9e039b8dfa3b7f5a3795ec4e8784940f64983927322a95b3" prot="public">
          <name>spi_token_value_0x69</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi token value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="132" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1gac15a19c9674d3a82d5cd58bfbe9096ba" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_dummy_count_t</name>
        <enumvalue id="group__spi__interface_1ggac15a19c9674d3a82d5cd58bfbe9096baa9a79496f619dc35cf573304b23daeb7c" prot="public">
          <name>spi_dummy_count_1</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggac15a19c9674d3a82d5cd58bfbe9096baa76e0518b9444026b754f14565b008c30" prot="public">
          <name>spi_dummy_count_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggac15a19c9674d3a82d5cd58bfbe9096baa1c49d9467b2c767d5020f07c157f0b05" prot="public">
          <name>spi_dummy_count_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggac15a19c9674d3a82d5cd58bfbe9096baacf582dc4728f105408f70ff5ba747755" prot="public">
          <name>spi_dummy_count_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>spi dummy count </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="140" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="140" bodyend="145"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1gaa68518c16202382c2e1f1c7c66a9d53d" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_shift_direction_t</name>
        <enumvalue id="group__spi__interface_1ggaa68518c16202382c2e1f1c7c66a9d53daf32736f3740a3bb0da46775f24314b51" prot="public">
          <name>msb_first</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1ggaa68518c16202382c2e1f1c7c66a9d53da58e7384444d0f08edde227a31593115e" prot="public">
          <name>lsb_first</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="147" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1ga51060f220285ddf82d48d15d3ec751bb" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_cs_index_t</name>
        <enumvalue id="group__spi__interface_1gga51060f220285ddf82d48d15d3ec751bba04ddc15da2c1542ffd03dad5f0e4f376" prot="public">
          <name>spi_cs_0</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga51060f220285ddf82d48d15d3ec751bbaed827d5345b80dc4d2e3096a54831ffd" prot="public">
          <name>spi_cs_1</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga51060f220285ddf82d48d15d3ec751bbaa50fd87f07b77e031056562c486f0c13" prot="public">
          <name>spi_cs_2</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga51060f220285ddf82d48d15d3ec751bbaabb5f8cce1299d172b265cdac1a831ee" prot="public">
          <name>spi_cs_3</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="239" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="239" bodyend="244"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1ga2dfc87861824b591ae352a3c072c5b63" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_address_len_t</name>
        <enumvalue id="group__spi__interface_1gga2dfc87861824b591ae352a3c072c5b63a437233c31d08f9439bedbcf88bc0a56c" prot="public">
          <name>addrlen_8bit</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga2dfc87861824b591ae352a3c072c5b63a9b904ddbc71a5c73ac0a5d517a7607e3" prot="public">
          <name>addrlen_16bit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga2dfc87861824b591ae352a3c072c5b63a30989333162b71d95042e219a90c088c" prot="public">
          <name>addrlen_24bit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga2dfc87861824b591ae352a3c072c5b63ab0e9582af149b2ae9e2b48f9cfe40932" prot="public">
          <name>addrlen_32bit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="247" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="247" bodyend="252"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1ga6deabf23d3377ce418a7993f368edfcf" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_directio_pin_t</name>
        <enumvalue id="group__spi__interface_1gga6deabf23d3377ce418a7993f368edfcfa6b49d8577c21651d3151a26c09893d79" prot="public">
          <name>hold_pin</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga6deabf23d3377ce418a7993f368edfcfaea49b0f23d61f6464aa3563efc2b4974" prot="public">
          <name>wp_pin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga6deabf23d3377ce418a7993f368edfcfa7b665aeb7d309416d7131464b83749b6" prot="public">
          <name>miso_pin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga6deabf23d3377ce418a7993f368edfcfa040ba68bb6c4bf0328e0dd63674b09c8" prot="public">
          <name>mosi_pin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga6deabf23d3377ce418a7993f368edfcfa370e29665ef702afa0a1da003190eb98" prot="public">
          <name>sclk_pin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__spi__interface_1gga6deabf23d3377ce418a7993f368edfcfa39fccb78c96524a19748b5f1fb87e331" prot="public">
          <name>cs_pin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="255" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="255" bodyend="262"/>
      </memberdef>
      <memberdef kind="enum" id="group__spi__interface_1ga07422cff4c3dd5075f91f87bd0e57ee7" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <enumvalue id="group__spi__interface_1gga07422cff4c3dd5075f91f87bd0e57ee7a2d497018c6ac935d124ce6c3a3eb4ec0" prot="public">
          <name>status_spi_master_busy</name>
          <initializer>= MAKE_STATUS(status_group_spi, 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="269" column="1" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="269" bodyend="271"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__spi__interface_1ga3398ff3ef43abb865ba061fdac3922bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spi_master_get_default_timing_config</definition>
        <argsstring>(spi_timing_config_t *config)</argsstring>
        <name>spi_master_get_default_timing_config</name>
        <param>
          <type><ref refid="structspi__timing__config__t" kindref="compound">spi_timing_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>spi master get default timing config </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspi__timing__config__t" kindref="compound">spi_timing_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="282" column="6" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="271" bodyend="275" declfile="drivers/inc/hpm_spi_drv.h" declline="282" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga31168318ca7a3f8145d6991412bffdb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spi_master_get_default_format_config</definition>
        <argsstring>(spi_format_config_t *config)</argsstring>
        <name>spi_master_get_default_format_config</name>
        <param>
          <type><ref refid="structspi__format__config__t" kindref="compound">spi_format_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>spi master get default format config </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspi__format__config__t" kindref="compound">spi_format_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="289" column="6" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="277" bodyend="287" declfile="drivers/inc/hpm_spi_drv.h" declline="289" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga20fe4a9fd4254d69da5b3b5fa33f8f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spi_master_get_default_control_config</definition>
        <argsstring>(spi_control_config_t *config)</argsstring>
        <name>spi_master_get_default_control_config</name>
        <param>
          <type><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>spi master get default control config </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="296" column="6" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="300" bodyend="315" declfile="drivers/inc/hpm_spi_drv.h" declline="296" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga5a4c398026975ffff16080bdf1ba99f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spi_slave_get_default_format_config</definition>
        <argsstring>(spi_format_config_t *config)</argsstring>
        <name>spi_slave_get_default_format_config</name>
        <param>
          <type><ref refid="structspi__format__config__t" kindref="compound">spi_format_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>spi slave get default format config </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspi__format__config__t" kindref="compound">spi_format_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="303" column="6" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="289" bodyend="298" declfile="drivers/inc/hpm_spi_drv.h" declline="303" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga011f364572dba586730f36c93f589557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spi_slave_get_default_control_config</definition>
        <argsstring>(spi_control_config_t *config)</argsstring>
        <name>spi_slave_get_default_control_config</name>
        <param>
          <type><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>spi slave get default control config </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="310" column="6" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="317" bodyend="328" declfile="drivers/inc/hpm_spi_drv.h" declline="310" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga5f947eba318d5cf434442208fa013890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_master_timing_init</definition>
        <argsstring>(SPI_Type *ptr, spi_timing_config_t *config)</argsstring>
        <name>spi_master_timing_init</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structspi__timing__config__t" kindref="compound">spi_timing_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>spi master timing initialization </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspi__timing__config__t" kindref="compound">spi_timing_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_invalid_argument or status_success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="319" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="330" bodyend="356" declfile="drivers/inc/hpm_spi_drv.h" declline="319" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga6aa789fed3d323a5cf9d541649a909ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spi_format_init</definition>
        <argsstring>(SPI_Type *ptr, spi_format_config_t *config)</argsstring>
        <name>spi_format_init</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structspi__format__config__t" kindref="compound">spi_format_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>spi format initialization </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspi__format__config__t" kindref="compound">spi_format_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="327" column="6" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="358" bodyend="368" declfile="drivers/inc/hpm_spi_drv.h" declline="327" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga6541675ce7395a67e896f900a6171133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_transfer</definition>
        <argsstring>(SPI_Type *ptr, spi_control_config_t *config, uint8_t *cmd, uint32_t *addr, uint8_t *wbuff, uint32_t wcount, uint8_t *rbuff, uint32_t rcount)</argsstring>
        <name>spi_transfer</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>wbuff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wcount</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>rbuff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rcount</declname>
        </param>
        <briefdescription>
<para>spi transfer </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>spi transfer command address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>spi transfer target address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wbuff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wcount</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rbuff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rcount</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="342" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="416" bodyend="484" declfile="drivers/inc/hpm_spi_drv.h" declline="342" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga302f08c4fb52f1c0ac5049b2b91a8d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_setup_dma_transfer</definition>
        <argsstring>(SPI_Type *ptr, spi_control_config_t *config, uint8_t *cmd, uint32_t *addr, uint32_t wcount, uint32_t rcount)</argsstring>
        <name>spi_setup_dma_transfer</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wcount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rcount</declname>
        </param>
        <briefdescription>
<para>spi setup dma transfer </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>spi transfer command address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>spi transfer target address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wcount</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rcount</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi setup dma transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="358" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="486" bodyend="527" declfile="drivers/inc/hpm_spi_drv.h" declline="358" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga0bd47db6a31f4592c25b0b0ce4d26635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_wait_for_idle_status</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_wait_for_idle_status</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>spi wait for idle status </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>on slave mode, if CS signal is asserted, take it as busy; if SPI CS signal is de-asserted, take it as idle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in idle status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="371" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="16" bodyend="34" declfile="drivers/inc/hpm_spi_drv.h" declline="371" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga3292349e298ddb9f64819946afcea7d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_wait_for_busy_status</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_wait_for_busy_status</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>spi wait for busy status </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>on slave mode, if CS signal is asserted, take it as busy; if SPI CS signal is de-asserted, take it as idle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in busy status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="381" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="36" bodyend="54" declfile="drivers/inc/hpm_spi_drv.h" declline="381" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gafc52355500b35061094306f08e1a13ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_tx_fifo_threshold</definition>
        <argsstring>(SPI_Type *ptr, uint32_t threshold)</argsstring>
        <name>spi_set_tx_fifo_threshold</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>SPI set TX FIFO threshold. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures SPI TX FIFO threshold.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The FIFO threshold value, the value should not greater than FIFO size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="391" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gac397be35fa26126ce85d46ca94d13c03" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_rx_fifo_threshold</definition>
        <argsstring>(SPI_Type *ptr, uint32_t threshold)</argsstring>
        <name>spi_set_rx_fifo_threshold</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>SPI set RX FIFO threshold. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures SPI RX FIFO threshold.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The FIFO threshold value, the value should not greater than FIFO size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="404" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="404" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga68ac78d70cc136fe264d65f32d07b7f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_enable_dma</definition>
        <argsstring>(SPI_Type *ptr, uint32_t mask)</argsstring>
        <name>spi_enable_dma</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Enables the SPI DMA request. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures the Rx and Tx DMA mask of the SPI. The parameters are base and a DMA mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The dma enable mask; Use the spi_dma_enable_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="417" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga46ec6520540c21decf07e5a82965a0c5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_disable_dma</definition>
        <argsstring>(SPI_Type *ptr, uint32_t mask)</argsstring>
        <name>spi_disable_dma</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Disables the SPI DMA request. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures the Rx and Tx DMA mask of the SPI. The parameters are base and a DMA mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The dma enable mask; Use the spi_dma_enable_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="430" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="430" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga71c5807b3273462e5e32f6c379fe6250" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t spi_get_interrupt_status</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_interrupt_status</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get the SPI interrupt status. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets interrupt status of the SPI.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SPI</parametername>
</parameternamelist>
<parameterdescription>
<para>interrupt status register value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="443" column="24" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga9708ee3711c2126bf5abb15b304ecdff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_clear_interrupt_status</definition>
        <argsstring>(SPI_Type *ptr, uint32_t mask)</argsstring>
        <name>spi_clear_interrupt_status</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Clear the SPI interrupt status. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears interrupt status of the SPI.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt mask; Use the spi_interrupt_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="457" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="457" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaca5a18ff3cabe7bb292313b8ce20b154" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_enable_interrupt</definition>
        <argsstring>(SPI_Type *ptr, uint32_t mask)</argsstring>
        <name>spi_enable_interrupt</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Enables the SPI interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures interrupt of the SPI. The parameters are base and a interrupt mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt mask; Use the spi_interrupt_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="471" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaff0c4e65f11fd06a4aaf56bc49d4bf53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_disable_interrupt</definition>
        <argsstring>(SPI_Type *ptr, uint32_t mask)</argsstring>
        <name>spi_disable_interrupt</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Disables the SPI interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures interrupt of the SPI. The parameters are base and a interrupt mask.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The interrupt mask; Use the spi_interrupt_t. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="484" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="484" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gabff410d7a08e77b7a8094df27d266605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_write_read_data</definition>
        <argsstring>(SPI_Type *ptr, uint8_t data_len_in_bytes, uint8_t *wbuff, uint32_t wcount, uint8_t *rbuff, uint32_t rcount)</argsstring>
        <name>spi_write_read_data</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data_len_in_bytes</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>wbuff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wcount</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>rbuff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rcount</declname>
        </param>
        <briefdescription>
<para>spi write and read data </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call this function after SPI CONTROL is configured by spi_control_init. The order of reading and writing is controlled by spi_control_init.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len_in_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>data length in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wbuff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wcount</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rbuff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rcount</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="503" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="193" bodyend="258" declfile="drivers/inc/hpm_spi_drv.h" declline="503" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga8b614bbd1672d0e1abef6a3e95c1040f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_read_data</definition>
        <argsstring>(SPI_Type *ptr, uint8_t data_len_in_bytes, uint8_t *buff, uint32_t count)</argsstring>
        <name>spi_read_data</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data_len_in_bytes</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>spi read data </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call this function after SPI CONTROL is configured by spi_control_init.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len_in_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>data length in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="516" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="145" bodyend="191" declfile="drivers/inc/hpm_spi_drv.h" declline="516" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga4f7dfe7ae3b9d7f280fc1aa47e228586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_write_data</definition>
        <argsstring>(SPI_Type *ptr, uint8_t data_len_in_bytes, uint8_t *buff, uint32_t count)</argsstring>
        <name>spi_write_data</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data_len_in_bytes</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>spi write data </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call this function after SPI CONTROL is configured by spi_control_init.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_len_in_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>data length in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="529" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="100" bodyend="143" declfile="drivers/inc/hpm_spi_drv.h" declline="529" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gad353177892d840687cd3ce3605bf0621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_write_command</definition>
        <argsstring>(SPI_Type *ptr, spi_mode_selection_t mode, spi_control_config_t *config, uint8_t *cmd)</argsstring>
        <name>spi_write_command</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga9ac2dd2dcd0b2c3b5fb1363eac489a3e" kindref="member">spi_mode_selection_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>spi write command </para>
        </briefdescription>
        <detaileddescription>
<para>Writing operations on this register will trigger SPI transfers, call this function on master mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>spi mode, use the spi_mode_selection_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>point to <ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>command data address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="542" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="56" bodyend="70" declfile="drivers/inc/hpm_spi_drv.h" declline="542" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga8dc3d203a1773ffb50514cdb9bced308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_read_command</definition>
        <argsstring>(SPI_Type *ptr, spi_mode_selection_t mode, spi_control_config_t *config, uint8_t *cmd)</argsstring>
        <name>spi_read_command</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga9ac2dd2dcd0b2c3b5fb1363eac489a3e" kindref="member">spi_mode_selection_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>spi read command </para>
        </briefdescription>
        <detaileddescription>
<para>On slave mode, the command field of the last received SPI transaction is stored in this SPI Command Register</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>spi mode, use the spi_mode_selection_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>point to <ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>command data address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="555" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="72" bodyend="84" declfile="drivers/inc/hpm_spi_drv.h" declline="555" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gadf1e05aae5113bde63bc975a18a85f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_write_address</definition>
        <argsstring>(SPI_Type *ptr, spi_mode_selection_t mode, spi_control_config_t *config, uint32_t *addr)</argsstring>
        <name>spi_write_address</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga9ac2dd2dcd0b2c3b5fb1363eac489a3e" kindref="member">spi_mode_selection_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>spi write address </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call this function on master mode.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>spi mode, use the spi_mode_selection_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>point to <ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>point to address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="568" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="86" bodyend="98" declfile="drivers/inc/hpm_spi_drv.h" declline="568" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gadfc7b3d8df21dcdb70b00ec76896512e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_control_init</definition>
        <argsstring>(SPI_Type *ptr, spi_control_config_t *config, uint32_t wcount, uint32_t rcount)</argsstring>
        <name>spi_control_init</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>wcount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rcount</declname>
        </param>
        <briefdescription>
<para>spi control initialization </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>point to <ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wcount</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rcount</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive count, not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="579" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="370" bodyend="414" declfile="drivers/inc/hpm_spi_drv.h" declline="579" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaee5cb066ffeae9e6c6f3146ad9673679" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t spi_get_data_length_in_bits</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_data_length_in_bits</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get the SPI data length in bits. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SPI</parametername>
</parameternamelist>
<parameterdescription>
<para>data length in bits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="587" column="23" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gacdb3db6c42352184bacb17222cb7635f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t spi_get_data_length_in_bytes</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_data_length_in_bytes</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get the SPI data length in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SPI</parametername>
</parameternamelist>
<parameterdescription>
<para>data length in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="598" column="23" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="598" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga0043a6affc864f586ce9a91b3725ce66" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool spi_is_active</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_is_active</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI get active status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>bool</parametername>
</parameternamelist>
<parameterdescription>
<para>true for active, false for inactive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="609" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="609" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gac2db9a3228352512393aae049a3ea03c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_enable_tx_dma</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_enable_tx_dma</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI enable tx dma. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="619" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="619" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga4502ff3183ab82b24ab064452e948630" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_disable_tx_dma</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_disable_tx_dma</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI disable tx dma. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="629" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="629" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga657e67d00646b00b6c973fa2ef547f97" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_enable_rx_dma</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_enable_rx_dma</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI enable rx dma. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="639" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="639" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gafc2c95d3d748afce3797778072931179" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_disable_rx_dma</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_disable_rx_dma</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI disable rx dma. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="649" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="649" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga9a656cfa815f7005f5f73ca562f49da6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t spi_slave_get_sent_data_count</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_slave_get_sent_data_count</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI slave get sent data count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>uint32_t</parametername>
</parameternamelist>
<parameterdescription>
<para>data count </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="660" column="24" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="660" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga4ed2c5dc7ca0a221cf687c2122a976e5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t spi_slave_get_received_data_count</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_slave_get_received_data_count</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI slave get received data count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>uint32_t</parametername>
</parameternamelist>
<parameterdescription>
<para>data count </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="675" column="24" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="675" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga661c40e2f8b145bfac40eaaf9b1f05eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_clock_phase</definition>
        <argsstring>(SPI_Type *ptr, spi_sclk_sampling_clk_edges_t clock_phase)</argsstring>
        <name>spi_set_clock_phase</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1gab063d70616d6d55c73b01e9a1d2fb162" kindref="member">spi_sclk_sampling_clk_edges_t</ref></type>
          <declname>clock_phase</declname>
        </param>
        <briefdescription>
<para>set spi clock phase </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock_phase</parametername>
</parameternamelist>
<parameterdescription>
<para>clock phase enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="690" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="690" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga7c7e5fea3347afff5c73b6a6626950e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__spi__interface_1gab063d70616d6d55c73b01e9a1d2fb162" kindref="member">spi_sclk_sampling_clk_edges_t</ref></type>
        <definition>static spi_sclk_sampling_clk_edges_t spi_get_clock_phase</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_clock_phase</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>get spi clock phase </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>spi_sclk_sampling_clk_edges_t</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_sclk_sampling_odd_clk_edges if CPHA is 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="701" column="45" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga0cc5dc04048e81f719b4b5f7cb31e063" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_clock_polarity</definition>
        <argsstring>(SPI_Type *ptr, spi_sclk_idle_state_t clock_polarity)</argsstring>
        <name>spi_set_clock_polarity</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1gaa216e00c4ce27ab3897a36c72e617968" kindref="member">spi_sclk_idle_state_t</ref></type>
          <declname>clock_polarity</declname>
        </param>
        <briefdescription>
<para>set spi clock polarity </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock_polarity</parametername>
</parameternamelist>
<parameterdescription>
<para>clock polarity enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="712" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="712" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga2a16ce39c0a0adeae1186ab8716d3b38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__spi__interface_1gaa216e00c4ce27ab3897a36c72e617968" kindref="member">spi_sclk_idle_state_t</ref></type>
        <definition>static spi_sclk_idle_state_t spi_get_clock_polarity</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_clock_polarity</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>get spi clock phase </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>spi_sclk_idle_state_t</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_sclk_low_idle if CPOL is 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="723" column="37" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="723" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaa4cff3b8b0cb8f5bf03c36e69d5ee5bb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t spi_set_data_bits</definition>
        <argsstring>(SPI_Type *ptr, uint8_t nbits)</argsstring>
        <name>spi_set_data_bits</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>nbits</declname>
        </param>
        <briefdescription>
<para>set spi the length of each data unit in bits </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbits</parametername>
</parameternamelist>
<parameterdescription>
<para>the actual bits number of a data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>hpm_stat_t</parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi transfer without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="735" column="26" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="735" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga5c26a576ac4ad1c200f61bcdef602be7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_transmit_fifo_reset</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_transmit_fifo_reset</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI transmit fifo reset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="750" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="750" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga9f13297d81585c938533cce5a246d163" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_receive_fifo_reset</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_receive_fifo_reset</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI receive fifo reset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="760" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="760" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga612e862742c37a8fb24d804f27d25c36" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_reset</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_reset</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI reset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="770" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="770" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga03f7b75ff650c1f629ddf57e5958d16c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_address_len</definition>
        <argsstring>(SPI_Type *ptr, spi_address_len_t addrlen)</argsstring>
        <name>spi_set_address_len</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga2dfc87861824b591ae352a3c072c5b63" kindref="member">spi_address_len_t</ref></type>
          <declname>addrlen</declname>
        </param>
        <briefdescription>
<para>set spi the length of address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addrlen</parametername>
</parameternamelist>
<parameterdescription>
<para>address lenth enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="781" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="781" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga94f3f3128177a3b446f7c4ee7421a7e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_enable_data_merge</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_enable_data_merge</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Enable SPI data merge. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="791" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="791" bodyend="794"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gad750cd2ccf1c1520693a7753dab10849" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_disable_data_merge</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_disable_data_merge</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Disable SPI data merge. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="801" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="801" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga512b377ea6545958877dcd3f3b62722f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_directio_enable_output</definition>
        <argsstring>(SPI_Type *ptr, spi_directio_pin_t pin)</argsstring>
        <name>spi_directio_enable_output</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga6deabf23d3377ce418a7993f368edfcf" kindref="member">spi_directio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>enable specific pin output for spi directio </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>must be used spi_enable_directio API before enable output function</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_directio_pin_t enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="815" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="531" bodyend="558" declfile="drivers/inc/hpm_spi_drv.h" declline="815" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaeb5f59746b951994a62af4833805f8f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_directio_disable_output</definition>
        <argsstring>(SPI_Type *ptr, spi_directio_pin_t pin)</argsstring>
        <name>spi_directio_disable_output</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga6deabf23d3377ce418a7993f368edfcf" kindref="member">spi_directio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>disable specific pin output for spi directio </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_directio_pin_t enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="823" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="560" bodyend="587" declfile="drivers/inc/hpm_spi_drv.h" declline="823" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga64f70d73d56253d89d2229d30cffecd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t spi_directio_write</definition>
        <argsstring>(SPI_Type *ptr, spi_directio_pin_t pin, bool high)</argsstring>
        <name>spi_directio_write</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga6deabf23d3377ce418a7993f368edfcf" kindref="member">spi_directio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>high</declname>
        </param>
        <briefdescription>
<para>write specified pin level for spi directio </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_directio_pin_t enum </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">high</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin level set to high when it is set to true </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="832" column="12" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="589" bodyend="616" declfile="drivers/inc/hpm_spi_drv.h" declline="832" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga494456b6c602ebb92342683413eb03c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t spi_directio_read</definition>
        <argsstring>(SPI_Type *ptr, spi_directio_pin_t pin)</argsstring>
        <name>spi_directio_read</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga6deabf23d3377ce418a7993f368edfcf" kindref="member">spi_directio_pin_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Read specified pin level for spi directio. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_directio_pin_t enum</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pin status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="842" column="9" bodyfile="drivers/src/hpm_spi_drv.c" bodystart="618" bodyend="644" declfile="drivers/inc/hpm_spi_drv.h" declline="842" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga3c0c0d8dd106651b5df9f6b0e9bf8bec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_enable_directio</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_enable_directio</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Enable SPI directIO control function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if SPI transmission is required, the function must be disable</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="851" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="851" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gac5b6dc4872ea3af07d46cd27c62ab559" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_disable_directio</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_disable_directio</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Disable SPI directIO control function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="861" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="861" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga1dc8eb6f679553b2f291fa75173f438d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t spi_get_directio_enable_status</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_directio_enable_status</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>get whether spi directio function is enabled </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if pi directio function is enable, it will return 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="873" column="23" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="873" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga84886a9846cb90b103a964b3e21f758b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t spi_get_rx_fifo_valid_data_size</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_rx_fifo_valid_data_size</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get valid data size in receive FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rx fifo valid data size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="887" column="23" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="887" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga018f780445a809c06c0079f56b4917c5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t spi_get_tx_fifo_valid_data_size</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_tx_fifo_valid_data_size</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get valid data size in transmit FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tx fifo valid data size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="899" column="23" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="899" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaa2770ca9fa6405ec315339e62e70da33" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t spi_get_rx_fifo_size</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_rx_fifo_size</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get SPI RXFIFO size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RXFIFO size, the unit is word </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="911" column="23" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="911" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gac7530cb52d282a0f587dcaf0cc13aa78" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t spi_get_tx_fifo_size</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_tx_fifo_size</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get SPI TXFIFO size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TXFIFO size, the unit is word </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="924" column="23" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="924" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga4ef4c507dc9153fc8f3334a9c708881c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_slave_enable_data_only</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_slave_enable_data_only</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI slave enable only date mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This mode only works in the uni-directional regular (single) mode </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="936" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="936" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga684effa8061251b2444bab970ae0e147" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_slave_disable_data_only</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_slave_disable_data_only</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI slave disable only date mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="946" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="946" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga07fc6b8527da6e75e9f71d8308f6fa20" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_enable_command_phase</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_enable_command_phase</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master enable command phase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="956" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="956" bodyend="959"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga553a0ac19fd3138ddce04931e03307a6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_disable_command_phase</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_disable_command_phase</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master disable command phase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="966" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="966" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaed110cd079923ebb28d014e64b23bf68" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_enable_address_phase</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_enable_address_phase</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master enable address phase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="976" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="976" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga84180238db73ab7d6341ce2bcc51c295" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_disable_address_phase</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_disable_address_phase</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master disable address phase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="986" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="986" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga91dfa8cf3ec60a584d8cfc556fd32a7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_set_address_phase_format</definition>
        <argsstring>(SPI_Type *ptr, spi_addr_phase_format_t format)</argsstring>
        <name>spi_master_set_address_phase_format</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga005ab1f2922a495cd72705c4f97806ef" kindref="member">spi_addr_phase_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>SPI master set address phase format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_addr_phase_format_t enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="997" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="997" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaeea2c67df32555cb1d06cd59a9cdce75" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_transfer_mode</definition>
        <argsstring>(SPI_Type *ptr, spi_trans_mode_t mode)</argsstring>
        <name>spi_set_transfer_mode</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1gae719b4eb51210f7a6878861fcb374d15" kindref="member">spi_trans_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>SPI master set transfer mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_trans_mode_t enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1008" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1008" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga1907108cb49846339378009cfbed6cfe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_enable_token_transfer</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_enable_token_transfer</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master enable token transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1018" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1018" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga2fddd7749dca5624e87e063acc69e169" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_disable_token_transfer</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_disable_token_transfer</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master disable token transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1028" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1028" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga64c2e39fd9475ae8c63c53b7b6525996" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_write_data_count</definition>
        <argsstring>(SPI_Type *ptr, uint32_t count)</argsstring>
        <name>spi_set_write_data_count</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>SPI master set transfer count for write data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of units of data to be transmitted to the SPI bus from the Data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1039" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1039" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga69f5bef4180ac170d76f93210b0a73a5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_read_data_count</definition>
        <argsstring>(SPI_Type *ptr, uint32_t count)</argsstring>
        <name>spi_set_read_data_count</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>SPI master set transfer count for read data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of units of data to be received from SPI bus and stored to the Data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1054" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1054" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga50cde01bb360e3609183229e451a920b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_set_token_value</definition>
        <argsstring>(SPI_Type *ptr, spi_token_value_t value)</argsstring>
        <name>spi_master_set_token_value</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1gac0796b7f31e5676ab9e039b8dfa3b7f5" kindref="member">spi_token_value_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>SPI master set the value of the one-byte special token following the address phase for SPI read transfers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_token_value_t enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1069" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1069" bodyend="1072"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga495651ac82f1826dfb13dfe8e595bc8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_dummy_count</definition>
        <argsstring>(SPI_Type *ptr, spi_dummy_count_t count)</argsstring>
        <name>spi_set_dummy_count</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1gac15a19c9674d3a82d5cd58bfbe9096ba" kindref="member">spi_dummy_count_t</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>SPI master set dummy data count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_dummy_count_t enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1080" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1080" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaeeca7594629b6890028b9c967415aa51" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_set_cs2sclk_timing</definition>
        <argsstring>(SPI_Type *ptr, spi_cs2sclk_duration_t duration)</argsstring>
        <name>spi_master_set_cs2sclk_timing</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga33e343fc2876a4886bcd808046ba8ebe" kindref="member">spi_cs2sclk_duration_t</ref></type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>SPI master set the minimum time between the edges of SPI CS and the edges of SCLK. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">duration</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_cs2sclk_duration_t enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1091" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1091" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gafb3f576ac06f554109b2ff27edc3346c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__spi__interface_1ga33e343fc2876a4886bcd808046ba8ebe" kindref="member">spi_cs2sclk_duration_t</ref></type>
        <definition>static spi_cs2sclk_duration_t spi_master_get_cs2sclk_timing</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_get_cs2sclk_timing</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master get the minimum time between the edges of SPI CS and the edges of SCLK. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>spi_cs2sclk_duration_t</parametername>
</parameternamelist>
<parameterdescription>
<para>enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1102" column="38" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1102" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaa5d631efc977c69f6979d91a6052fc53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_set_csht_timing</definition>
        <argsstring>(SPI_Type *ptr, spi_csht_duration_t duration)</argsstring>
        <name>spi_master_set_csht_timing</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1ga410142b39b47da0d68fa76b42aa7e030" kindref="member">spi_csht_duration_t</ref></type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>SPI master set the minimum time that SPI CS should stay HIGH. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">duration</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_csht_duration_t enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1113" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1113" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaeadbe0167ff59081d1e5451a8565ba6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__spi__interface_1ga410142b39b47da0d68fa76b42aa7e030" kindref="member">spi_csht_duration_t</ref></type>
        <definition>static spi_csht_duration_t spi_master_get_csht_timing</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_get_csht_timing</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master get the minimum time that SPI CS should stay HIGH. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>spi_csht_duration_t</parametername>
</parameternamelist>
<parameterdescription>
<para>enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1124" column="35" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1124" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gacfa3adaa305d91e7e24480e1a643bcaa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_set_sclk_div</definition>
        <argsstring>(SPI_Type *ptr, uint8_t div)</argsstring>
        <name>spi_master_set_sclk_div</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>div</declname>
        </param>
        <briefdescription>
<para>SPI master set the clock frequency ratio between the clock source and SPI SCLK. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">div</parametername>
</parameternamelist>
<parameterdescription>
<para>the frequency ratio value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1135" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1135" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gad37739361227074ad8669a6a3bf2035f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t spi_master_get_sclk_div</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_get_sclk_div</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master get the clock frequency ratio between the clock source and SPI SCLK. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>return</parametername>
</parameternamelist>
<parameterdescription>
<para>the frequency ratio value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1147" column="23" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1147" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga5fb630925ae5271c3fcb67dd05e9ae94" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_slave_set_user_status</definition>
        <argsstring>(SPI_Type *ptr, uint16_t user_status)</argsstring>
        <name>spi_slave_set_user_status</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>user_status</declname>
        </param>
        <briefdescription>
<para>SPI slave set the user defined status flags. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>in Non-SlvDataOnly, the command is read status command, such as 0x05\0x15\0x25 command</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">user_status</parametername>
</parameternamelist>
<parameterdescription>
<para>user status value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1160" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1160" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga5b49daf30da4c1b259ad9b760055b7fb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_master_set_data_phase_format</definition>
        <argsstring>(SPI_Type *ptr, spi_data_phase_format_t format)</argsstring>
        <name>spi_master_set_data_phase_format</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1gafff636ea73cfd28e417690fcfcacc5f9" kindref="member">spi_data_phase_format_t</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>SPI master set data phase format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_data_phase_format_t enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1171" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1171" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaadfbe7c0def75ad34d005bde61c92bdc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__spi__interface_1gafff636ea73cfd28e417690fcfcacc5f9" kindref="member">spi_data_phase_format_t</ref></type>
        <definition>static spi_data_phase_format_t spi_master_get_data_phase_format</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_master_get_data_phase_format</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>SPI master get data phase format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>return</parametername>
</parameternamelist>
<parameterdescription>
<para>the data phase format </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1183" column="39" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1183" bodyend="1186"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1ga9e420256bc43b0b31a9d196e8f3a8600" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void spi_set_shift_direction</definition>
        <argsstring>(SPI_Type *ptr, spi_shift_direction_t shift_direction)</argsstring>
        <name>spi_set_shift_direction</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__spi__interface_1gaa68518c16202382c2e1f1c7c66a9d53d" kindref="member">spi_shift_direction_t</ref></type>
          <declname>shift_direction</declname>
        </param>
        <briefdescription>
<para>set spi shift direction </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift_direction</parametername>
</parameternamelist>
<parameterdescription>
<para>shift direction enum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1194" column="20" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1194" bodyend="1197"/>
      </memberdef>
      <memberdef kind="function" id="group__spi__interface_1gaaa5be5cb6d769696eb4dca6bba0f6161" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__spi__interface_1gaa68518c16202382c2e1f1c7c66a9d53d" kindref="member">spi_shift_direction_t</ref></type>
        <definition>static spi_shift_direction_t spi_get_shift_direction</definition>
        <argsstring>(SPI_Type *ptr)</argsstring>
        <name>spi_get_shift_direction</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>get spi shift direction </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>spi_shift_direction_t</parametername>
</parameternamelist>
<parameterdescription>
<para>msb_first if frist MSB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_spi_drv.h" line="1205" column="37" bodyfile="drivers/inc/hpm_spi_drv.h" bodystart="1205" bodyend="1208"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>SPI driver APIs  . </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
