<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h" kind="file" language="C++">
    <compoundname>hpm_sdxc_soc_drv.h</compoundname>
    <includes refid="HPM6700_2HPM6750_2hpm__soc_8h" local="yes">hpm_soc.h</includes>
    <includes local="yes">hpm_sdxc_regs.h</includes>
    <incdepgraph>
      <node id="68">
        <label>riscv/riscv_core.h</label>
        <link refid="riscv__core_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>hpm_csr_drv.h</label>
        <link refid="hpm__csr__drv_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>hpm_batt_iomux.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__batt__iomux_8h"/>
      </node>
      <node id="69">
        <label>hpm_csr_regs.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__csr__regs_8h"/>
      </node>
      <node id="76">
        <label>hpm_dmamux_src.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__dmamux__src_8h"/>
      </node>
      <node id="70">
        <label>hpm_interrupt.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__interrupt_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>hpm_iomux.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__iomux_8h"/>
      </node>
      <node id="74">
        <label>hpm_misc.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__misc_8h"/>
      </node>
      <node id="75">
        <label>hpm_otp_table.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__otp__table_8h"/>
      </node>
      <node id="73">
        <label>hpm_plic_drv.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__plic__drv_8h"/>
      </node>
      <node id="79">
        <label>hpm_pmic_iomux.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__pmic__iomux_8h"/>
      </node>
      <node id="1">
        <label>soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hpm_soc.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__soc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>hpm_soc_irq.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__soc__irq_8h"/>
      </node>
      <node id="77">
        <label>hpm_trgmmux_src.h</label>
        <link refid="HPM6700_2HPM6750_2hpm__trgmmux__src_8h"/>
      </node>
      <node id="15">
        <label>hpm_adc12_regs.h</label>
        <link refid="hpm__adc12__regs_8h"/>
      </node>
      <node id="44">
        <label>hpm_conctl_regs.h</label>
        <link refid="hpm__conctl__regs_8h"/>
      </node>
      <node id="57">
        <label>hpm_pllctl_regs.h</label>
        <link refid="hpm__pllctl__regs_8h"/>
      </node>
      <node id="5">
        <label>assert.h</label>
      </node>
      <node id="17">
        <label>hpm_acmp_regs.h</label>
      </node>
      <node id="16">
        <label>hpm_adc16_regs.h</label>
      </node>
      <node id="59">
        <label>hpm_bcfg_regs.h</label>
      </node>
      <node id="61">
        <label>hpm_bgpr_regs.h</label>
      </node>
      <node id="64">
        <label>hpm_bkey_regs.h</label>
      </node>
      <node id="65">
        <label>hpm_bmon_regs.h</label>
      </node>
      <node id="58">
        <label>hpm_bpor_regs.h</label>
      </node>
      <node id="63">
        <label>hpm_bsec_regs.h</label>
      </node>
      <node id="60">
        <label>hpm_butn_regs.h</label>
      </node>
      <node id="37">
        <label>hpm_cam_regs.h</label>
      </node>
      <node id="20">
        <label>hpm_can_regs.h</label>
      </node>
      <node id="72">
        <label>hpm_csr_regs.h</label>
      </node>
      <node id="29">
        <label>hpm_dao_regs.h</label>
      </node>
      <node id="25">
        <label>hpm_dma_regs.h</label>
      </node>
      <node id="24">
        <label>hpm_dmamux_regs.h</label>
      </node>
      <node id="40">
        <label>hpm_enet_regs.h</label>
      </node>
      <node id="47">
        <label>hpm_femc_regs.h</label>
      </node>
      <node id="10">
        <label>hpm_gpio_regs.h</label>
      </node>
      <node id="14">
        <label>hpm_gpiom_regs.h</label>
      </node>
      <node id="41">
        <label>hpm_gptmr_regs.h</label>
      </node>
      <node id="32">
        <label>hpm_hall_regs.h</label>
      </node>
      <node id="45">
        <label>hpm_i2c_regs.h</label>
      </node>
      <node id="28">
        <label>hpm_i2s_regs.h</label>
      </node>
      <node id="49">
        <label>hpm_ioc_regs.h</label>
      </node>
      <node id="39">
        <label>hpm_jpeg_regs.h</label>
      </node>
      <node id="27">
        <label>hpm_keym_regs.h</label>
      </node>
      <node id="36">
        <label>hpm_lcdc_regs.h</label>
      </node>
      <node id="22">
        <label>hpm_mbx_regs.h</label>
      </node>
      <node id="12">
        <label>hpm_mchtmr_regs.h</label>
      </node>
      <node id="67">
        <label>hpm_mono_regs.h</label>
      </node>
      <node id="50">
        <label>hpm_otp_regs.h</label>
      </node>
      <node id="52">
        <label>hpm_pcfg_regs.h</label>
      </node>
      <node id="30">
        <label>hpm_pdm_regs.h</label>
      </node>
      <node id="38">
        <label>hpm_pdma_regs.h</label>
      </node>
      <node id="55">
        <label>hpm_pgpr_regs.h</label>
      </node>
      <node id="11">
        <label>hpm_plic_regs.h</label>
      </node>
      <node id="13">
        <label>hpm_plic_sw_regs.h</label>
      </node>
      <node id="54">
        <label>hpm_pmon_regs.h</label>
      </node>
      <node id="51">
        <label>hpm_ppor_regs.h</label>
      </node>
      <node id="53">
        <label>hpm_psec_regs.h</label>
      </node>
      <node id="23">
        <label>hpm_ptpc_regs.h</label>
      </node>
      <node id="31">
        <label>hpm_pwm_regs.h</label>
      </node>
      <node id="33">
        <label>hpm_qei_regs.h</label>
      </node>
      <node id="26">
        <label>hpm_rng_regs.h</label>
      </node>
      <node id="62">
        <label>hpm_rtc_regs.h</label>
      </node>
      <node id="46">
        <label>hpm_sdp_regs.h</label>
      </node>
      <node id="43">
        <label>hpm_sdxc_regs.h</label>
      </node>
      <node id="18">
        <label>hpm_spi_regs.h</label>
      </node>
      <node id="35">
        <label>hpm_synt_regs.h</label>
      </node>
      <node id="48">
        <label>hpm_sysctl_regs.h</label>
      </node>
      <node id="66">
        <label>hpm_tamp_regs.h</label>
      </node>
      <node id="34">
        <label>hpm_trgm_regs.h</label>
      </node>
      <node id="19">
        <label>hpm_uart_regs.h</label>
      </node>
      <node id="42">
        <label>hpm_usb_regs.h</label>
      </node>
      <node id="56">
        <label>hpm_vad_regs.h</label>
      </node>
      <node id="21">
        <label>hpm_wdg_regs.h</label>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a644ae1948ae662e463abdec62128325f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sdxc_enable_tm_clock</definition>
        <argsstring>(SDXC_Type *base)</argsstring>
        <name>sdxc_enable_tm_clock</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Enable TMCLK (for Data timeout detection) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="21" column="20" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="21" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1abd099e9a944b9a34499b205d9da1e241" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sdxc_wait_card_active</definition>
        <argsstring>(SDXC_Type *base)</argsstring>
        <name>sdxc_wait_card_active</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Wait at least 74 clocks until card is ready to receive the first command. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="30" column="20" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="30" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a43707fafd66869f34929e70b52896533" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sdxc_enable_inverse_clock</definition>
        <argsstring>(SDXC_Type *base, bool enable)</argsstring>
        <name>sdxc_enable_inverse_clock</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="46" column="20" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a6f036d47189430f4545a3c5221d3d054" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool sdxc_is_inverse_clock_enabled</definition>
        <argsstring>(SDXC_Type *base)</argsstring>
        <name>sdxc_is_inverse_clock_enabled</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="56" column="20" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1acce32a1f389146ce228423a687dc029d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sdxc_select_cardclk_delay_source</definition>
        <argsstring>(SDXC_Type *base, bool delay_from_pad)</argsstring>
        <name>sdxc_select_cardclk_delay_source</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>delay_from_pad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="62" column="20" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a41afc373aaddc64dbf35c12db68677b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sdxc_set_cardclk_delay_chain</definition>
        <argsstring>(SDXC_Type *base, uint32_t delay_chain)</argsstring>
        <name>sdxc_set_cardclk_delay_chain</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>delay_chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="68" column="20" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a4e67a1892614f221c045744c17e9be3c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sdxc_set_data_strobe_delay</definition>
        <argsstring>(SDXC_Type *base, uint32_t num_delaycells)</argsstring>
        <name>sdxc_set_data_strobe_delay</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_delaycells</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="76" column="20" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="76" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a4edd199c13d849ea0a0eb5c6d1cc80d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t sdxc_get_default_strobe_delay</definition>
        <argsstring>(SDXC_Type *base)</argsstring>
        <name>sdxc_get_default_strobe_delay</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="86" column="24" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a73b4daec3ac1f7d048546310af4b92f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void sdxc_set_rxclk_delay_chain</definition>
        <argsstring>(SDXC_Type *base, uint32_t num_delaycells)</argsstring>
        <name>sdxc_set_rxclk_delay_chain</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_delaycells</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="92" column="20" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a5df4bfa0c0f6fb571f502e860e2840e7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t sdxc_get_default_cardclk_delay_chain</definition>
        <argsstring>(SDXC_Type *base, uint32_t clock_freq)</argsstring>
        <name>sdxc_get_default_cardclk_delay_chain</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>clock_freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="101" column="24" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="101" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a3bc97677384ae9e6335a1e91e754355a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool sdxc_is_ddr50_supported</definition>
        <argsstring>(SDXC_Type *base)</argsstring>
        <name>sdxc_is_ddr50_supported</name>
        <param>
          <type><ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" line="111" column="20" bodyfile="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h" bodystart="111" bodyend="115"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021-2024<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_SDXC_SOC_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_SDXC_SOC_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="HPM6700_2HPM6750_2hpm__soc_8h" kindref="compound">hpm_soc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_sdxc_regs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a644ae1948ae662e463abdec62128325f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1a644ae1948ae662e463abdec62128325f" kindref="member">sdxc_enable_tm_clock</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*reg<sp/>=<sp/>(base<sp/>==<sp/><ref refid="HPM6300_2HPM6320_2hpm__soc_8h_1ade9472b38149b5817636a032e5f5571f" kindref="member">HPM_SDXC0</ref>)<sp/>?<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL4<sp/>:<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL5;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>(*reg)<sp/>|=<sp/>(1UL<sp/>&lt;&lt;<sp/>10);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1abd099e9a944b9a34499b205d9da1e241" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1abd099e9a944b9a34499b205d9da1e241" kindref="member">sdxc_wait_card_active</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structSDXC__Type_1af713f34d73cd19145bfcd4725d1c2cd3" kindref="member">SYS_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__sdxc__regs_8h_1aa6029d7ffb12680df88ad4050674e2e5" kindref="member">SDXC_SYS_CTRL_SD_CLK_EN_MASK</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="group__common__interface_1gae1eae6c44712583303b6e650a21d4875" kindref="member">IS_HPM_BITMASK_SET</ref>(base-&gt;<ref refid="structSDXC__Type_1af713f34d73cd19145bfcd4725d1c2cd3" kindref="member">SYS_CTRL</ref>,<sp/><ref refid="HPM6300_2ip_2hpm__sdxc__regs_8h_1aa6029d7ffb12680df88ad4050674e2e5" kindref="member">SDXC_SYS_CTRL_SD_CLK_EN_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Assume<sp/>that<sp/>the<sp/>BUS<sp/>clock<sp/>is<sp/>200MHz,<sp/>while<sp/>in<sp/>the<sp/>identification<sp/>state,<sp/>the<sp/>SD<sp/>clock<sp/>is<sp/>400KHz.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>Reading<sp/>the<sp/>register<sp/>costs<sp/>about<sp/>5ns<sp/>in<sp/>best<sp/>case,<sp/>hence<sp/>the<sp/>loop<sp/>should<sp/>be<sp/>(74<sp/>/<sp/>400KHz)<sp/>*<sp/>1000000000<sp/>/<sp/>5</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>For<sp/>robustness,<sp/>use<sp/>50000<sp/>here</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50000U;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/>base-&gt;<ref refid="structSDXC__Type_1a017839d5dba48c9b2560220a8a4d3f6b" kindref="member">CAPABILITIES1</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a43707fafd66869f34929e70b52896533" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1a43707fafd66869f34929e70b52896533" kindref="member">sdxc_enable_inverse_clock</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*reg<sp/>=<sp/>(base<sp/>==<sp/><ref refid="HPM6300_2HPM6320_2hpm__soc_8h_1ade9472b38149b5817636a032e5f5571f" kindref="member">HPM_SDXC0</ref>)<sp/>?<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL4<sp/>:<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL5;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*reg<sp/>|=<sp/>(1UL<sp/>&lt;&lt;<sp/>28);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*reg<sp/>&amp;=<sp/>~(1UL<sp/>&lt;&lt;<sp/>28);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a6f036d47189430f4545a3c5221d3d054" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1a6f036d47189430f4545a3c5221d3d054" kindref="member">sdxc_is_inverse_clock_enabled</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*reg<sp/>=<sp/>(base<sp/>==<sp/><ref refid="HPM6300_2HPM6320_2hpm__soc_8h_1ade9472b38149b5817636a032e5f5571f" kindref="member">HPM_SDXC0</ref>)<sp/>?<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL4<sp/>:<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL5;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((*reg)<sp/>&amp;<sp/>(1UL<sp/>&lt;&lt;<sp/>28))<sp/>!=<sp/>0U;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1acce32a1f389146ce228423a687dc029d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1a6378afa919d2e95f07151761527d66fd" kindref="member">sdxc_select_cardclk_delay_source</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delay_from_pad)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>base;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>delay_from_pad;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a41afc373aaddc64dbf35c12db68677b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1ab7a5cf405810370272706dbbacf08875" kindref="member">sdxc_set_cardclk_delay_chain</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base,<sp/>uint32_t<sp/>delay_chain)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>base;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*reg<sp/>=<sp/>(base<sp/>==<sp/><ref refid="HPM6300_2HPM6320_2hpm__soc_8h_1ade9472b38149b5817636a032e5f5571f" kindref="member">HPM_SDXC0</ref>)<sp/>?<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL4<sp/>:<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL5;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>=<sp/>(*reg<sp/>&amp;<sp/>~CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_MASK)<sp/>|</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__conctl__regs_8h_1a1b7fe6a4cb005c2784045191830cbfee" kindref="member">CONCTL_CTRL4_SDXC0_GPR_TUNING_CARD_CLK_SEL_SET</ref>(delay_chain);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a4e67a1892614f221c045744c17e9be3c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1ac18871869712e778cc1eee5e82067605" kindref="member">sdxc_set_data_strobe_delay</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base,<sp/>uint32_t<sp/>num_delaycells)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>base;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*reg<sp/>=<sp/>(base<sp/>==<sp/><ref refid="HPM6300_2HPM6320_2hpm__soc_8h_1ade9472b38149b5817636a032e5f5571f" kindref="member">HPM_SDXC0</ref>)<sp/>?<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL4<sp/>:<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL5;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>=<sp/>(*reg<sp/>&amp;<sp/>~CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_MASK)<sp/>|</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__conctl__regs_8h_1af0b38afd6a7f36072492589b4ebc5637" kindref="member">CONCTL_CTRL4_SDXC0_GPR_TUNING_STROBE_SEL_SET</ref>(num_delaycells);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>|=<sp/><ref refid="hpm__conctl__regs_8h_1a8c5436c2497a9249e2fdbd38afbb22f7" kindref="member">CONCTL_CTRL4_SDXC0_GPR_STROBE_IN_ENABLE_MASK</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a4edd199c13d849ea0a0eb5c6d1cc80d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1a4edd199c13d849ea0a0eb5c6d1cc80d9" kindref="member">sdxc_get_default_strobe_delay</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>base;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a73b4daec3ac1f7d048546310af4b92f7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a73b4daec3ac1f7d048546310af4b92f7" kindref="member">sdxc_set_rxclk_delay_chain</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base,<sp/>uint32_t<sp/>num_delaycells)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*reg<sp/>=<sp/>(base<sp/>==<sp/><ref refid="HPM6300_2HPM6320_2hpm__soc_8h_1ade9472b38149b5817636a032e5f5571f" kindref="member">HPM_SDXC0</ref>)<sp/>?<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL4<sp/>:<sp/>&amp;<ref refid="HPM6700_2HPM6430_2hpm__soc_8h_1a8226c0b163d40511554ed64a4b5a44b2" kindref="member">HPM_CONCTL</ref>-&gt;CTRL5;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>=<sp/>(*reg<sp/>&amp;<sp/>~CONCTL_CTRL4_SDXC0_GPR_CCLK_RX_DLY_SW_SEL_MASK)<sp/>|</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__conctl__regs_8h_1ada57bfa8315a9896d3e7c7be3d647532" kindref="member">CONCTL_CTRL4_SDXC0_GPR_CCLK_RX_DLY_SW_SEL_SET</ref>(num_delaycells);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>|=<sp/><ref refid="hpm__conctl__regs_8h_1a693a008d17fe28521abb3ed29b6d1d15" kindref="member">CONCTL_CTRL4_SDXC0_GPR_CCLK_RX_DLY_SW_FORCE_MASK</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a5df4bfa0c0f6fb571f502e860e2840e7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1a5df4bfa0c0f6fb571f502e860e2840e7" kindref="member">sdxc_get_default_cardclk_delay_chain</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base,<sp/>uint32_t<sp/>clock_freq)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>base;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_delaycells<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clock_freq<sp/>&lt;=<sp/>52000000)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_delaycells<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_delaycells;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="HPM6700_2HPM6750_2hpm__sdxc__soc__drv_8h_1a3bc97677384ae9e6335a1e91e754355a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2HPM6360_2hpm__sdxc__soc__drv_8h_1a3bc97677384ae9e6335a1e91e754355a" kindref="member">sdxc_is_ddr50_supported</ref>(<ref refid="structSDXC__Type" kindref="compound">SDXC_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>base;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HPM_SDXC_SOC_DRV_H<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="soc/HPM6700/HPM6750/hpm_sdxc_soc_drv.h"/>
  </compounddef>
</doxygen>
