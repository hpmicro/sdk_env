<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="hpm__i2c_8c" kind="file" language="C++">
    <compoundname>hpm_i2c.c</compoundname>
    <includes refid="hpm__i2c_8h" local="yes">hpm_i2c.h</includes>
    <includes local="yes">hpm_clock_drv.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="17">
        <label>hpm_l1c_drv.h</label>
        <link refid="hpm__l1c__drv_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>riscv/riscv_core.h</label>
        <link refid="riscv__core_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>components/i2c/hpm_i2c.c</label>
        <link refid="hpm__i2c_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hpm_i2c.h</label>
        <link refid="hpm__i2c_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>hpm_csr_drv.h</label>
        <link refid="hpm__csr__drv_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>hpm_dma_drv.h</label>
        <link refid="hpm__dma__drv_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>hpm_dmamux_drv.h</label>
        <link refid="hpm__dmamux__drv_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>hpm_i2c_drv.h</label>
        <link refid="hpm__i2c__drv_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>assert.h</label>
      </node>
      <node id="21">
        <label>hpm_clock_drv.h</label>
      </node>
      <node id="19">
        <label>hpm_csr_regs.h</label>
      </node>
      <node id="13">
        <label>hpm_dma_regs.h</label>
      </node>
      <node id="15">
        <label>hpm_dmamux_regs.h</label>
      </node>
      <node id="10">
        <label>hpm_i2c_regs.h</label>
      </node>
      <node id="16">
        <label>hpm_misc.h</label>
      </node>
      <node id="11">
        <label>hpm_soc_feature.h</label>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structhpm__i2c__cfg__t" prot="public">hpm_i2c_cfg_t</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="hpm__i2c_8c_1aba182bc8d0f920a20683e3043dd1ba9c" prot="public" static="yes" mutable="no">
        <type><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref></type>
        <definition>hpm_i2c_cfg_t i2c_cfg_table[]</definition>
        <argsstring>[]</argsstring>
        <name>i2c_cfg_table</name>
        <initializer>= {
























































































































}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="22" column="22" bodyfile="components/i2c/hpm_i2c.c" bodystart="22" bodyend="143"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref> *</type>
        <definition>static hpm_i2c_cfg_t * hpm_i2c_get_cfg_obj</definition>
        <argsstring>(I2C_Type *ptr)</argsstring>
        <name>hpm_i2c_get_cfg_obj</name>
        <param>
          <type><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="145" column="22" bodyfile="components/i2c/hpm_i2c.c" bodystart="145" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_i2c_master_phase_config</definition>
        <argsstring>(I2C_Type *ptr, uint16_t device_addr, uint8_t flags, uint32_t transfer_size, bool enable_dma)</argsstring>
        <name>hpm_i2c_master_phase_config</name>
        <param>
          <type><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>device_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>transfer_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_dma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="159" column="13" bodyfile="components/i2c/hpm_i2c.c" bodystart="159" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_i2c_release_bus</definition>
        <argsstring>(I2C_Type *ptr)</argsstring>
        <name>hpm_i2c_release_bus</name>
        <param>
          <type><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="197" column="13" bodyfile="components/i2c/hpm_i2c.c" bodystart="197" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1aa97398b8f7d1c288b6ca74afd717f572" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_i2c_get_default_init_config</definition>
        <argsstring>(hpm_i2c_initialize_config_t *config)</argsstring>
        <name>hpm_i2c_get_default_init_config</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1a6796ea3c4608201a64dacfda8f075eda" kindref="member">hpm_i2c_initialize_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="204" column="13" bodyfile="components/i2c/hpm_i2c.c" bodystart="204" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1a03037a2816fe45324b2a38bd5a80efc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_i2c_get_default_init_context</definition>
        <argsstring>(hpm_i2c_context_t *context)</argsstring>
        <name>hpm_i2c_get_default_init_context</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the default initialization context for I2C</para>
<para>This function initializes the I2C context structure, setting the default address endianness to little-endian.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2C context structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="211" column="6" bodyfile="components/i2c/hpm_i2c.c" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1af214b05f288899b92685ffe4cf5707b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_i2c_initialize</definition>
        <argsstring>(hpm_i2c_context_t *context)</argsstring>
        <name>hpm_i2c_initialize</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Initialize the I2C interface. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes the I2C module based on the provided configuration, setting it up for communication. It configures the I2C mode, speed, addressing method, and initializes the I2C device as either a master or slave.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;hpm_i2c_context_t&quot; which contains initialization configurations and base address information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the initialization status, indicating success or error codes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="217" column="12" bodyfile="components/i2c/hpm_i2c.c" bodystart="217" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1a716836874d1b64093a2c2fd91f2895d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_i2c_master_probe_slave_address</definition>
        <argsstring>(hpm_i2c_context_t *context, uint16_t device_address)</argsstring>
        <name>hpm_i2c_master_probe_slave_address</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>device_address</declname>
        </param>
        <briefdescription>
<para>Probes an I2C slave address. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sends a probe signal over the I2C bus to check if a slave device at the specified address is present. It is primarily used to verify that a slave device is correctly connected to the I2C bus without performing any data transfer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;hpm_i2c_context_t&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the slave device to probe </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Operation status, indicating success or error codes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="255" column="12" bodyfile="components/i2c/hpm_i2c.c" bodystart="255" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1a48bb6ebb4ae680d474531748274a97fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_i2c_master_addr_write_blocking</definition>
        <argsstring>(hpm_i2c_context_t *context, const uint16_t device_address, uint32_t addr, uint8_t addr_size, uint8_t *buf, uint32_t buf_size, uint32_t timeout)</argsstring>
        <name>hpm_i2c_master_addr_write_blocking</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>device_address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>addr_size</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>I2C master write data to a device&apos;s address over I2C in blocking mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function writes data to a specific device over the I2C bus in a blocking manner. It requires the base address of the I2C peripheral, the device&apos;s I2C address, the address within the device, the address size, the data buffer, and the buffer size. The function ensures that the data transfer is completed within the specified timeout period.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;hpm_i2c_context_t&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C slave device (7-bit or 10-bit address, depending on the hardware) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address within the device where data writing should start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the address, indicating the width of the device&apos;s internal address (in bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer containing the data to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer, indicating the length of the data to be written (in bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout period, within which the function must complete the data transfer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Operation status, indicating success or error codes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="276" column="12" bodyfile="components/i2c/hpm_i2c.c" bodystart="276" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1a594bd4e1d8210e75b8bbfa894f35215e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_i2c_master_addr_read_blocking</definition>
        <argsstring>(hpm_i2c_context_t *context, const uint16_t device_address, uint32_t addr, uint8_t addr_size, uint8_t *buf, uint32_t buf_size, uint32_t timeout)</argsstring>
        <name>hpm_i2c_master_addr_read_blocking</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>device_address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>addr_size</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>I2C master read data from a specified address of an I2C slave device in blocking mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function reads data from a specified address of an I2C slave device using the I2C bus in a blocking manner. It first sends the slave device address, then the memory address to read from, and finally reads the data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;hpm_i2c_context_t&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C slave device (7-bit or 10-bit address, depending on the hardware). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Internal address within the slave device to read from (can be a register or memory address). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the address in bytes, indicating the number of bits in the address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer where the read data will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout value in milliseconds. If the read operation does not complete within this time, the function returns a timeout error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Operation status, indicating success or error codes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="349" column="12" bodyfile="components/i2c/hpm_i2c.c" bodystart="349" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1a6f93dc07577c5dbf950cf0763c76c8b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_i2c_master_write_blocking</definition>
        <argsstring>(hpm_i2c_context_t *context, uint16_t device_address, uint8_t *buf, uint32_t size, uint32_t timeout)</argsstring>
        <name>hpm_i2c_master_write_blocking</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>device_address</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>I2C master write data to an I2C slave device in blocking mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs a blocking write operation for an I2C master device, writing a specified number of bytes to the I2C slave device. Blocking mode means the function will return only after the data transfer is complete, and it will occupy CPU resources during the data transfer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;hpm_i2c_context_t&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C slave device (7-bit or 10-bit address, depending on the hardware) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer containing the data to be written, data type is uint8_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write, data type is uint32_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout for the operation, in milliseconds. If the operation does not complete within this time, the function will return an error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Operation status, indicating success or error codes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="434" column="12" bodyfile="components/i2c/hpm_i2c.c" bodystart="434" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1a9e595881d520e18da5a70857b0bd8192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_i2c_master_read_blocking</definition>
        <argsstring>(hpm_i2c_context_t *context, const uint16_t device_address, uint8_t *buf, const uint32_t size, uint32_t timeout)</argsstring>
        <name>hpm_i2c_master_read_blocking</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>device_address</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>I2C master read data from an I2C device in blocking mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function reads a specified number of bytes from the I2C device with the given address and stores them in the provided buffer. The read operation is blocking, meaning it will wait until the read is complete or an error occurs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;hpm_i2c_context_t&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the I2C slave device (7-bit or 10-bit address, depending on the hardware) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer where the read data will be stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout for the operation in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Operation status, indicating success or error codes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="505" column="12" bodyfile="components/i2c/hpm_i2c.c" bodystart="505" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1aafbd3474a3bdb0bb5d81e9b0983261f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_i2c_slave_write_blocking</definition>
        <argsstring>(hpm_i2c_context_t *context, uint8_t *buf, uint32_t size, uint32_t timeout)</argsstring>
        <name>hpm_i2c_slave_write_blocking</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>I2C slave write operation in blocking mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function handles the write operation for an I2C slave in a blocking manner. It waits until all data is successfully written or an error occurs, or the specified timeout is exceeded.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;hpm_i2c_context_t&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer where received data will be stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to receive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout value for the operation; if the operation does not complete within this time, the function returns a timeout error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Operation status, indicating success or error codes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="575" column="12" bodyfile="components/i2c/hpm_i2c.c" bodystart="575" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="hpm__i2c_8c_1adb6aa1b94c46be31f7e5a72c778f782a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_i2c_slave_read_blocking</definition>
        <argsstring>(hpm_i2c_context_t *context, uint8_t *buf, uint32_t size, uint32_t timeout)</argsstring>
        <name>hpm_i2c_slave_read_blocking</name>
        <param>
          <type><ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>I2C slave read operation in blocking mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function reads data from the I2C slave device using the specified I2C interface in a blocking mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;hpm_i2c_context_t&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer where the read data will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read from the I2C slave device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout value in milliseconds for the read operation. If the read operation does not complete within this time, it will be terminated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Operation status, indicating success or error codes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/i2c/hpm_i2c.c" line="623" column="12" bodyfile="components/i2c/hpm_i2c.c" bodystart="623" bodyend="669"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2024<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__i2c_8h" kindref="compound">hpm_i2c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_clock_drv.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="structhpm__i2c__cfg__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*<ref refid="structhpm__i2c__cfg__t_1aeb4e978954883f82cf203084f2d82bc6" kindref="member">i2c_ptr</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HPM5300_2HPM5301_2hpm__clock__drv_8h_1a24298d5cfc4913a8c6970632ef6bc19f" kindref="member">clock_name_t</ref><sp/><ref refid="structhpm__i2c__cfg__t_1a74e9857c263f1374ca3269d7d0da43c0" kindref="member">i2c_clock_name</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>dmamux_src;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8h_1a2cb29626236e022cced99f3e498d18eb" kindref="member">dma_resource_t</ref><sp/>dma_resource;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>hpm_i2c_dma_complete_cb<sp/>dma_complete;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">}<sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/><ref refid="hpm__i2c_8c_1aba182bc8d0f920a20683e3043dd1ba9c" kindref="member">i2c_cfg_table</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc_8h_1abdf9eb4c9a8d0020b757b2b93c1d8d45" kindref="member">HPM_I2C0</ref>,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__clock__drv_8h_1ae7acdf00151e054507c886412eba911b" kindref="member">clock_i2c0</ref>,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__dmamux__src_8h_1a25d4a1ca215dcb076bbf4ba7d62a9914" kindref="member">HPM_DMA_SRC_I2C0</ref>,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc_8h_1abed1eace0e294c8c473186a3f581ffc0" kindref="member">HPM_I2C1</ref>,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__clock__drv_8h_1a9ca498be4bd83f6633a4d5a744caa557" kindref="member">clock_i2c1</ref>,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__dmamux__src_8h_1a3c8bacb96cbcb6f7f86292fcf1cfd42e" kindref="member">HPM_DMA_SRC_I2C1</ref>,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc_8h_1aee5ca70a47623892092c9787b5794f89" kindref="member">HPM_I2C2</ref>,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__clock__drv_8h_1a66b98f9a6175445aeaa64ca8c97757e0" kindref="member">clock_i2c2</ref>,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__dmamux__src_8h_1afd505b83c15a25d9631f039b683c4fd0" kindref="member">HPM_DMA_SRC_I2C2</ref>,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc_8h_1a0ad0f65676cee28cc248754e223b3af4" kindref="member">HPM_I2C3</ref>,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__clock__drv_8h_1ae0ca5c0b75c3e10614895e801496632e" kindref="member">clock_i2c3</ref>,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__dmamux__src_8h_1acb93332e5e494c9a167f68e3011462c9" kindref="member">HPM_DMA_SRC_I2C3</ref>,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/><ref refid="HPM6E00_2HPM6E60_2hpm__soc_8h_1a9266228069b1f87297d6ed7744e6ff7a" kindref="member">HPM_I2C4</ref>,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/><ref refid="HPM6E00_2HPM6E80_2hpm__clock__drv_8h_1aea3829a49808cd20e190ec163da6d098" kindref="member">clock_i2c4</ref>,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/><ref refid="HPM6E00_2HPM6E60_2hpm__dmamux__src_8h_1a6efb1ed4675d68efc20df4cdfa7378af" kindref="member">HPM_DMA_SRC_I2C4</ref>,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/><ref refid="HPM6E00_2HPM6E60_2hpm__soc_8h_1a3a25c3024510d508a86319be79f52a0e" kindref="member">HPM_I2C5</ref>,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/><ref refid="HPM6E00_2HPM6E80_2hpm__clock__drv_8h_1a74d604d06b8ee72e15cca1e42fe81f35" kindref="member">clock_i2c5</ref>,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/><ref refid="HPM6E00_2HPM6E60_2hpm__dmamux__src_8h_1a3ac37c2b275a44a7fd5215cbf5fc3acf" kindref="member">HPM_DMA_SRC_I2C5</ref>,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/><ref refid="HPM6E00_2HPM6E60_2hpm__soc_8h_1ad37e0446d05176bd66273e7e0101d18e" kindref="member">HPM_I2C6</ref>,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/><ref refid="HPM6E00_2HPM6E80_2hpm__clock__drv_8h_1af142e671eda8be74da64bc7a65657041" kindref="member">clock_i2c6</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/><ref refid="HPM6E00_2HPM6E60_2hpm__dmamux__src_8h_1a2623e70b20dd91a8490e2cd05f0d2ffe" kindref="member">HPM_DMA_SRC_I2C6</ref>,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/><ref refid="HPM6E00_2HPM6E60_2hpm__soc_8h_1a2507fc98ef274f9ba596d262f38be5f6" kindref="member">HPM_I2C7</ref>,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/><ref refid="HPM6E00_2HPM6E80_2hpm__clock__drv_8h_1ad41f55e19034878fd30561412e8c6e64" kindref="member">clock_i2c7</ref>,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/><ref refid="HPM6E00_2HPM6E60_2hpm__dmamux__src_8h_1ab2efba094ce991b1f9e9b4dd3782ef0a" kindref="member">HPM_DMA_SRC_I2C7</ref>,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/>HPM_I2C8,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/>clock_i2c8,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/>HPM_DMA_SRC_I2C8,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/>HPM_I2C9,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/>clock_i2c9,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/>HPM_DMA_SRC_I2C9,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_I2C10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_ptr<sp/>=<sp/>HPM_I2C10,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_clock_name<sp/>=<sp/>clock_i2c10,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dmamux_src<sp/>=<sp/>HPM_DMA_SRC_I2C10,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dma_complete<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*<ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(<ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="hpm__i2c_8c_1aba182bc8d0f920a20683e3043dd1ba9c" kindref="member">i2c_cfg_table</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref>));<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>&amp;<ref refid="hpm__i2c_8c_1aba182bc8d0f920a20683e3043dd1ba9c" kindref="member">i2c_cfg_table</ref>[i];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj-&gt;<ref refid="structhpm__i2c__cfg__t_1aeb4e978954883f82cf203084f2d82bc6" kindref="member">i2c_ptr</ref><sp/>==<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(<ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr,<sp/>uint16_t<sp/>device_addr,<sp/>uint8_t<sp/>flags,<sp/>uint32_t<sp/>transfer_size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable_dma)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="group__i2c__interface_1ga65b7f2f3b73a8113798bade8c2f94e38" kindref="member">I2C_NO_ADDRESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaac3132a6ea9708955c9b060b86b72720" kindref="member">i2c_master_disable_addr_phase</ref>(ptr);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga4b809a6af3d9c49c447a65a3768c5274" kindref="member">i2c_master_enable_addr_phase</ref>(ptr);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gae798328c75293956dc8e4f7e524f5021" kindref="member">i2c_master_set_slave_address</ref>(ptr,<sp/>device_addr);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="group__i2c__interface_1gacb13e35c5e812ea51d29e833be1b72be" kindref="member">I2C_RD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga24675ffd0203d44745663c76ac29f10d" kindref="member">i2c_set_direction</ref>(ptr,<sp/><ref refid="group__i2c__interface_1ga4df4850244dc050233a212061a027143" kindref="member">I2C_DIR_MASTER_READ</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga24675ffd0203d44745663c76ac29f10d" kindref="member">i2c_set_direction</ref>(ptr,<sp/><ref refid="group__i2c__interface_1gaa0c75bc99981a9797ae33555b9d1cd53" kindref="member">I2C_DIR_MASTER_WRITE</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>start<sp/>signal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="group__i2c__interface_1ga195853b1c095946d44b02780bc737258" kindref="member">I2C_NO_START</ref>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga3f54e3467fc4dd69fbdbf1cf25e7c123" kindref="member">i2c_master_disable_start_phase</ref>(ptr);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gae0a5fff141323da215135e3711ae4120" kindref="member">i2c_master_enable_start_phase</ref>(ptr);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>signal*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="group__i2c__interface_1gadda0d20bd6472bbee03bd0ac07256ef3" kindref="member">I2C_NO_STOP</ref>)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga3490c57b9485f6f396aa87114153c7a3" kindref="member">i2c_master_disable_stop_phase</ref>(ptr);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga9ea016d5a73766a0765f80e70ce17495" kindref="member">i2c_master_enable_stop_phase</ref>(ptr);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transfer_size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga52d122cda6245fdbe1fdfca7c692c771" kindref="member">i2c_master_enable_data_phase</ref>(ptr);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga32776bc1506b1cea4d89131732656ad1" kindref="member">i2c_set_data_count</ref>(ptr,<sp/>transfer_size);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga80f9c2daec9046002204c3dca7a91222" kindref="member">i2c_master_disable_data_phase</ref>(ptr);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_dma)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga6124fcfef43816c28ef4889222c6952b" kindref="member">i2c_dma_enable</ref>(ptr);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga7a1a6d26d62aa637d2b7030344ac9125" kindref="member">i2c_dma_disable</ref>(ptr);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(<ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>0,<sp/><ref refid="group__i2c__interface_1ga65b7f2f3b73a8113798bade8c2f94e38" kindref="member">I2C_NO_ADDRESS</ref><sp/>|<sp/><ref refid="group__i2c__interface_1ga195853b1c095946d44b02780bc737258" kindref="member">I2C_NO_START</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__i2c_8c_1aa97398b8f7d1c288b6ca74afd717f572" kindref="member">hpm_i2c_get_default_init_config</ref>(<ref refid="hpm__i2c_8h_1a6796ea3c4608201a64dacfda8f075eda" kindref="member">hpm_i2c_initialize_config_t</ref><sp/>*config)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;<ref refid="structi2c__initialize__config_1a71a8728608daf5ff8a421f818662f101" kindref="member">is_10bit_addressing</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;<ref refid="structi2c__initialize__config_1abf9fcd841f96414dfc8b0d047f44b8f3" kindref="member">communication_mode</ref><sp/>=<sp/><ref refid="hpm__i2c_8h_1ae31375f5922f2188a95394ba2661a7d7a91ad04c96c42765397dd0604f12d362f" kindref="member">i2c_master</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>config-&gt;<ref refid="structi2c__initialize__config_1aa77340c501122294210fed5e9ffbd434" kindref="member">speed</ref><sp/>=<sp/><ref refid="hpm__i2c_8h_1a996f39aff1206ec33079bcef705388e3a5b3968783fa1b615a28a06f7b09a368f" kindref="member">i2c_speed_100khz</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__i2c_8c_1a03037a2816fe45324b2a38bd5a80efc1" kindref="member">hpm_i2c_get_default_init_context</ref>(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>context-&gt;<ref refid="structi2c__context__t_1a4715ddb0408fe4184070fc1e2950a066" kindref="member">addr_endianness</ref><sp/>=<sp/><ref refid="hpm__i2c_8h_1aa598202fdf3ac425717209746d454a0ca648f8682b6f0d584a7458083ccbddcd5" kindref="member">i2c_master_addr_little_endian</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1aa97398b8f7d1c288b6ca74afd717f572" kindref="member">hpm_i2c_get_default_init_config</ref>(&amp;context-&gt;<ref refid="structi2c__context__t_1abce71717323baf850dd5ead2dd1eb80c" kindref="member">init_config</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__i2c_8c_1af214b05f288899b92685ffe4cf5707b8" kindref="member">hpm_i2c_initialize</ref>(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structi2c__config__t" kindref="compound">i2c_config_t</ref><sp/>cfg;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>freq;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8h_1a6796ea3c4608201a64dacfda8f075eda" kindref="member">hpm_i2c_initialize_config_t</ref><sp/>*config<sp/>=<sp/>&amp;context-&gt;<ref refid="structi2c__context__t_1abce71717323baf850dd5ead2dd1eb80c" kindref="member">init_config</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/><ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(ptr);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(config-&gt;<ref refid="structi2c__initialize__config_1aa77340c501122294210fed5e9ffbd434" kindref="member">speed</ref>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hpm__i2c_8h_1a996f39aff1206ec33079bcef705388e3a5b3968783fa1b615a28a06f7b09a368f" kindref="member">i2c_speed_100khz</ref>:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg.<ref refid="structi2c__config__t_1aa9fa1b342a038a78d740b46e4f8ba334" kindref="member">i2c_mode</ref><sp/>=<sp/><ref refid="group__i2c__interface_1gga9e7157514d73fc7628b8150ad6844b70add7e9b08db65db145a62fa6c3c098224" kindref="member">i2c_mode_normal</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hpm__i2c_8h_1a996f39aff1206ec33079bcef705388e3a8fdc9f74373f533d5bf45ed71c495bbf" kindref="member">i2c_speed_400khz</ref>:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg.<ref refid="structi2c__config__t_1aa9fa1b342a038a78d740b46e4f8ba334" kindref="member">i2c_mode</ref><sp/>=<sp/><ref refid="group__i2c__interface_1gga9e7157514d73fc7628b8150ad6844b70addb91a007e7287f2353f09491fa44fe1" kindref="member">i2c_mode_fast</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="hpm__i2c_8h_1a996f39aff1206ec33079bcef705388e3af9b2d607c1efa9c610c53b043354a41c" kindref="member">i2c_speed_1Mhz</ref>:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg.<ref refid="structi2c__config__t_1aa9fa1b342a038a78d740b46e4f8ba334" kindref="member">i2c_mode</ref><sp/>=<sp/><ref refid="group__i2c__interface_1gga9e7157514d73fc7628b8150ad6844b70a77cc85af18bbee252e768b9a3b37cce4" kindref="member">i2c_mode_fast_plus</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat<sp/>!=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>cfg.<ref refid="structi2c__config__t_1ab6e7e40fc8cfc21133f31dc6ab5c11e6" kindref="member">is_10bit_addressing</ref><sp/>=<sp/>config-&gt;<ref refid="structi2c__initialize__config_1a71a8728608daf5ff8a421f818662f101" kindref="member">is_10bit_addressing</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>freq<sp/>=<sp/><ref refid="group__clock__interface_1ga0b6cfe27aaccef750309ac03a4285189" kindref="member">clock_get_frequency</ref>(obj-&gt;<ref refid="structhpm__i2c__cfg__t_1a74e9857c263f1374ca3269d7d0da43c0" kindref="member">i2c_clock_name</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;<ref refid="structi2c__initialize__config_1abf9fcd841f96414dfc8b0d047f44b8f3" kindref="member">communication_mode</ref><sp/>==<sp/><ref refid="hpm__i2c_8h_1ae31375f5922f2188a95394ba2661a7d7a91ad04c96c42765397dd0604f12d362f" kindref="member">i2c_master</ref>)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>=<sp/><ref refid="group__i2c__interface_1ga98ba3b3648f7e7027e16b02af560bc31" kindref="member">i2c_init_master</ref>(obj-&gt;<ref refid="structhpm__i2c__cfg__t_1aeb4e978954883f82cf203084f2d82bc6" kindref="member">i2c_ptr</ref>,<sp/>freq,<sp/>&amp;cfg);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>=<sp/><ref refid="group__i2c__interface_1ga1441d4a0d033b13dfe8c345569124c00" kindref="member">i2c_init_slave</ref>(obj-&gt;<ref refid="structhpm__i2c__cfg__t_1aeb4e978954883f82cf203084f2d82bc6" kindref="member">i2c_ptr</ref>,<sp/>freq,<sp/>&amp;cfg,<sp/>config-&gt;<ref refid="structi2c__initialize__config_1ac9de7a8c32fb29488241e0cae2f002ad" kindref="member">slave_address</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__i2c_8c_1a716836874d1b64093a2c2fd91f2895d7" kindref="member">hpm_i2c_master_probe_slave_address</ref>(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/>uint16_t<sp/>device_address)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>speed<sp/>min<sp/>is<sp/>100Kbps,<sp/>and<sp/>mem<sp/>address<sp/>max<sp/>is<sp/>4<sp/>byte,<sp/>10us<sp/>*<sp/>(4<sp/>*<sp/>8)<sp/>=<sp/>320us,<sp/><sp/>so<sp/>500us<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1ga5a3e7b03fa275ec2d334e95a2caf6477" kindref="member">I2C_WR</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__i2c_8c_1a48bb6ebb4ae680d474531748274a97fe" kindref="member">hpm_i2c_master_addr_write_blocking</ref>(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>device_address,<sp/>uint32_t<sp/>addr,<sp/>uint8_t<sp/>addr_size,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/>buf_size,<sp/>uint32_t<sp/>timeout)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*p<sp/>=<sp/>(uint8_t<sp/>*)&amp;addr;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((addr_size<sp/>==<sp/>0)<sp/>||<sp/>(addr_size<sp/>&gt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)))<sp/>||</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((buf_size<sp/>==<sp/>0)<sp/>||<sp/>(buf_size<sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>))<sp/>||</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((addr_size<sp/>+<sp/>buf_size)<sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>))<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1abaa07f1883e06f82d99e622df46b2db0" kindref="member">I2C_STATUS_BUSBUSY_MASK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1ga5a3e7b03fa275ec2d334e95a2caf6477" kindref="member">I2C_WR</ref>,<sp/>(addr_size<sp/>+<sp/>buf_size),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>addr_size;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context-&gt;<ref refid="structi2c__context__t_1a4715ddb0408fe4184070fc1e2950a066" kindref="member">addr_endianness</ref><sp/>==<sp/><ref refid="hpm__i2c_8h_1aa598202fdf3ac425717209746d454a0ca58dc9b925d6bfa176d6c3309da49470e" kindref="member">i2c_master_addr_big_endian</ref>)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>p[left<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>*(p++));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>starting<sp/>to<sp/>transmit<sp/>data,<sp/>judge<sp/>addrhit<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>slave<sp/>address<sp/>exists<sp/>on<sp/>the<sp/>bus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>speed<sp/>min<sp/>is<sp/>100Kbps,<sp/>and<sp/>mem<sp/>address<sp/>max<sp/>is<sp/>4<sp/>byte,<sp/>10us<sp/>*<sp/>(4<sp/>*<sp/>8)<sp/>=<sp/>320us,<sp/><sp/>so<sp/>500us<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;<sp/></highlight><highlight class="comment">/*<sp/>500Us<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>buf_size;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a72a425805494dd4f75f71716ca6e8002" kindref="member">I2C_STATUS_FIFOFULL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>*(buf++));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__i2c_8c_1a594bd4e1d8210e75b8bbfa894f35215e" kindref="member">hpm_i2c_master_addr_read_blocking</ref>(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>device_address,<sp/>uint32_t<sp/>addr,<sp/>uint8_t<sp/>addr_size,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/>buf_size,<sp/>uint32_t<sp/>timeout)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*p<sp/>=<sp/>(uint8_t<sp/>*)&amp;addr;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((addr_size<sp/>==<sp/>0)<sp/>||<sp/>(addr_size<sp/>&gt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)))<sp/>||</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((buf_size<sp/>==<sp/>0)<sp/>||<sp/>(buf_size<sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>))<sp/>||</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((addr_size<sp/>+<sp/>buf_size)<sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>))<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1abaa07f1883e06f82d99e622df46b2db0" kindref="member">I2C_STATUS_BUSBUSY_MASK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1ga5a3e7b03fa275ec2d334e95a2caf6477" kindref="member">I2C_WR</ref><sp/>|<sp/><ref refid="group__i2c__interface_1gadda0d20bd6472bbee03bd0ac07256ef3" kindref="member">I2C_NO_STOP</ref>,<sp/>addr_size,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>addr_size;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context-&gt;<ref refid="structi2c__context__t_1a4715ddb0408fe4184070fc1e2950a066" kindref="member">addr_endianness</ref><sp/>==<sp/><ref refid="hpm__i2c_8h_1aa598202fdf3ac425717209746d454a0ca58dc9b925d6bfa176d6c3309da49470e" kindref="member">i2c_master_addr_big_endian</ref>)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>p[left<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>*(p++));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>starting<sp/>to<sp/>transmit<sp/>data,<sp/>judge<sp/>addrhit<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>slave<sp/>address<sp/>exists<sp/>on<sp/>the<sp/>bus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>speed<sp/>min<sp/>is<sp/>100Kbps,<sp/>and<sp/>mem<sp/>address<sp/>max<sp/>is<sp/>4<sp/>byte,<sp/>10us<sp/>*<sp/>(4<sp/>*<sp/>8)<sp/>=<sp/>320us,<sp/><sp/>so<sp/>500us<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;<sp/></highlight><highlight class="comment">/*<sp/>500Us<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1gacb13e35c5e812ea51d29e833be1b72be" kindref="member">I2C_RD</ref>,<sp/>buf_size,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>buf_size;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a2d248a68c012b15af38c96bea9d257ff" kindref="member">I2C_STATUS_FIFOEMPTY_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(buf++)<sp/>=<sp/><ref refid="group__i2c__interface_1gab870b908ecf3eef93b29b81763c2fdbc" kindref="member">i2c_read_byte</ref>(ptr);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__i2c_8c_1a6f93dc07577c5dbf950cf0763c76c8b7" kindref="member">hpm_i2c_master_write_blocking</ref>(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/>uint16_t<sp/>device_address,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/>uint32_t<sp/>timeout)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1abaa07f1883e06f82d99e622df46b2db0" kindref="member">I2C_STATUS_BUSBUSY_MASK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1ga5a3e7b03fa275ec2d334e95a2caf6477" kindref="member">I2C_WR</ref>,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>starting<sp/>to<sp/>transmit<sp/>data,<sp/>judge<sp/>addrhit<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>slave<sp/>address<sp/>exists<sp/>on<sp/>the<sp/>bus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>speed<sp/>min<sp/>is<sp/>100Kbps,<sp/>and<sp/>mem<sp/>address<sp/>max<sp/>is<sp/>4<sp/>byte,<sp/>10us<sp/>*<sp/>(4<sp/>*<sp/>8)<sp/>=<sp/>320us,<sp/><sp/>so<sp/>500us<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;<sp/></highlight><highlight class="comment">/*<sp/>500Us<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>when<sp/>size<sp/>is<sp/>zero,<sp/>it&apos;s<sp/>probe<sp/>slave<sp/>device,<sp/>so<sp/>directly<sp/>return<sp/>success<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a72a425805494dd4f75f71716ca6e8002" kindref="member">I2C_STATUS_FIFOFULL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>*(buf++));</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__i2c__interface_1ga4e198e4332806c2fa1e13720def4d260" kindref="member">i2c_get_data_count</ref>(ptr)<sp/>&amp;&amp;<sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>))<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a23ce76a1b8b224a249c628d63fa4ef03" kindref="member">status_i2c_transmit_not_completed</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__i2c_8c_1a9e595881d520e18da5a70857b0bd8192" kindref="member">hpm_i2c_master_read_blocking</ref>(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>device_address,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/>uint32_t<sp/>timeout)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1abaa07f1883e06f82d99e622df46b2db0" kindref="member">I2C_STATUS_BUSBUSY_MASK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1gacb13e35c5e812ea51d29e833be1b72be" kindref="member">I2C_RD</ref>,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>starting<sp/>to<sp/>transmit<sp/>data,<sp/>judge<sp/>addrhit<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>slave<sp/>address<sp/>exists<sp/>on<sp/>the<sp/>bus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>speed<sp/>min<sp/>is<sp/>100Kbps,<sp/>and<sp/>mem<sp/>address<sp/>max<sp/>is<sp/>4<sp/>byte,<sp/>10us<sp/>*<sp/>(4<sp/>*<sp/>8)<sp/>=<sp/>320us,<sp/><sp/>so<sp/>500us<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;<sp/></highlight><highlight class="comment">/*<sp/>500Us<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>when<sp/>size<sp/>is<sp/>zero,<sp/>it&apos;s<sp/>probe<sp/>slave<sp/>device,<sp/>so<sp/>directly<sp/>return<sp/>success<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a2d248a68c012b15af38c96bea9d257ff" kindref="member">I2C_STATUS_FIFOEMPTY_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(buf++)<sp/>=<sp/><ref refid="group__i2c__interface_1gab870b908ecf3eef93b29b81763c2fdbc" kindref="member">i2c_read_byte</ref>(ptr);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__i2c__interface_1ga4e198e4332806c2fa1e13720def4d260" kindref="member">i2c_get_data_count</ref>(ptr)<sp/>&amp;&amp;<sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>))<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a23ce76a1b8b224a249c628d63fa4ef03" kindref="member">status_i2c_transmit_not_completed</ref>;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__i2c_8c_1aafbd3474a3bdb0bb5d81e9b0983261f9" kindref="member">hpm_i2c_slave_write_blocking</ref>(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/>uint32_t<sp/>timeout)</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>==<sp/>0)<sp/>||<sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wait<sp/>for<sp/>address<sp/>hit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga7a1a6d26d62aa637d2b7030344ac9125" kindref="member">i2c_dma_disable</ref>(ptr);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>and<sp/>clear<sp/>ADDRHIT<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref><sp/>|<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a72a425805494dd4f75f71716ca6e8002" kindref="member">I2C_STATUS_FIFOFULL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>*(buf++));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>status,<sp/>CMPL<sp/>must<sp/>to<sp/>be<sp/>cleared<sp/>at<sp/>slave<sp/>mode<sp/>before<sp/>next<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__i2c__interface_1ga4e198e4332806c2fa1e13720def4d260" kindref="member">i2c_get_data_count</ref>(ptr)<sp/>!=<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a23ce76a1b8b224a249c628d63fa4ef03" kindref="member">status_i2c_transmit_not_completed</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__i2c_8c_1adb6aa1b94c46be31f7e5a72c778f782a" kindref="member">hpm_i2c_slave_read_blocking</ref>(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/>uint32_t<sp/>timeout)</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>==<sp/>0)<sp/>||<sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wait<sp/>for<sp/>address<sp/>hit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga7a1a6d26d62aa637d2b7030344ac9125" kindref="member">i2c_dma_disable</ref>(ptr);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>and<sp/>clear<sp/>ADDRHIT<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref><sp/>|<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a2d248a68c012b15af38c96bea9d257ff" kindref="member">I2C_STATUS_FIFOEMPTY_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(buf++)<sp/>=<sp/><ref refid="group__i2c__interface_1gab870b908ecf3eef93b29b81763c2fdbc" kindref="member">i2c_read_byte</ref>(ptr);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>1000UL<sp/>*<sp/>timeout;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>status,<sp/>CMPL<sp/>must<sp/>to<sp/>be<sp/>cleared<sp/>at<sp/>slave<sp/>mode<sp/>before<sp/>next<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__i2c__interface_1ga4e198e4332806c2fa1e13720def4d260" kindref="member">i2c_get_data_count</ref>(ptr)<sp/>!=<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a23ce76a1b8b224a249c628d63fa4ef03" kindref="member">status_i2c_transmit_not_completed</ref>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_I2C_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hpm_i2c_dma_channel_tc_callback(<ref refid="group__dma__interface_1gad318c67c9687e5174692025c50e8721c" kindref="member">DMA_Type</ref><sp/>*ptr,<sp/>uint32_t<sp/>channel,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user_data)</highlight></codeline>
<codeline lineno="673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/>(<ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*)user_data;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((obj-&gt;dma_resource.channel<sp/>==<sp/>channel)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(obj-&gt;dma_resource.base<sp/>==<sp/>ptr)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(obj-&gt;dma_complete<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;dma_complete(channel);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hpm_i2c_read_trigger_dma(<ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj,<sp/>uint32_t<sp/>addr,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1a7b4c9d986e28862b5b5e84197a17bafc" kindref="member">dma_mgr_set_chn_dst_addr</ref>(&amp;obj-&gt;dma_resource,<sp/>addr);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1abdfc709459c3fe6aa2803e151bb521cf" kindref="member">dma_mgr_set_chn_dst_work_mode</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="hpm__dma__mgr_8h_1aa6dbf20840d2626367b1004f62ebed94" kindref="member">DMA_MGR_HANDSHAKE_MODE_NORMAL</ref>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1ac7d197c2cb796b71374c60ab7024535d" kindref="member">dma_mgr_set_chn_dst_addr_ctrl</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="hpm__dma__mgr_8h_1acd3e64e6a97e8b07eb8ce75f78519db2" kindref="member">DMA_MGR_ADDRESS_CONTROL_INCREMENT</ref>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1abfc9a26dc8544020a7784682f9fd2bed" kindref="member">dma_mgr_set_chn_src_addr</ref>(&amp;obj-&gt;dma_resource,<sp/>(uint32_t)&amp;obj-&gt;<ref refid="structhpm__i2c__cfg__t_1aeb4e978954883f82cf203084f2d82bc6" kindref="member">i2c_ptr</ref>-&gt;<ref refid="structI2C__Type_1a8c61f6c4ce377961703ed67a83132051" kindref="member">DATA</ref>);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1ad96030183ad5290966012036b367c521" kindref="member">dma_mgr_set_chn_src_work_mode</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="hpm__dma__mgr_8h_1a20c3bf11dfdafef0b1c54d1f1da18676" kindref="member">DMA_MGR_HANDSHAKE_MODE_HANDSHAKE</ref>);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1add39b865af20dbf83b9b11dc87ab5a07" kindref="member">dma_mgr_set_chn_src_addr_ctrl</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="hpm__dma__mgr_8h_1a98b27499465acf45a40905c2fd7e71af" kindref="member">DMA_MGR_ADDRESS_CONTROL_FIXED</ref>);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1aa3df75bd4e70012eb4091f5966dec8e4" kindref="member">dma_mgr_set_chn_transize</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1a66418c75052465b695b7fe6cc54ecf5a" kindref="member">dma_mgr_enable_channel</ref>(&amp;obj-&gt;dma_resource);</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hpm_i2c_write_trigger_dma(<ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj,<sp/>uint32_t<sp/>addr,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1abfc9a26dc8544020a7784682f9fd2bed" kindref="member">dma_mgr_set_chn_src_addr</ref>(&amp;obj-&gt;dma_resource,<sp/>addr);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1ad96030183ad5290966012036b367c521" kindref="member">dma_mgr_set_chn_src_work_mode</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="hpm__dma__mgr_8h_1aa6dbf20840d2626367b1004f62ebed94" kindref="member">DMA_MGR_HANDSHAKE_MODE_NORMAL</ref>);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1add39b865af20dbf83b9b11dc87ab5a07" kindref="member">dma_mgr_set_chn_src_addr_ctrl</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="hpm__dma__mgr_8h_1acd3e64e6a97e8b07eb8ce75f78519db2" kindref="member">DMA_MGR_ADDRESS_CONTROL_INCREMENT</ref>);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1a7b4c9d986e28862b5b5e84197a17bafc" kindref="member">dma_mgr_set_chn_dst_addr</ref>(&amp;obj-&gt;dma_resource,<sp/>(uint32_t)&amp;obj-&gt;<ref refid="structhpm__i2c__cfg__t_1aeb4e978954883f82cf203084f2d82bc6" kindref="member">i2c_ptr</ref>-&gt;<ref refid="structI2C__Type_1a8c61f6c4ce377961703ed67a83132051" kindref="member">DATA</ref>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1abdfc709459c3fe6aa2803e151bb521cf" kindref="member">dma_mgr_set_chn_dst_work_mode</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="hpm__dma__mgr_8h_1a20c3bf11dfdafef0b1c54d1f1da18676" kindref="member">DMA_MGR_HANDSHAKE_MODE_HANDSHAKE</ref>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1ac7d197c2cb796b71374c60ab7024535d" kindref="member">dma_mgr_set_chn_dst_addr_ctrl</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="hpm__dma__mgr_8h_1a98b27499465acf45a40905c2fd7e71af" kindref="member">DMA_MGR_ADDRESS_CONTROL_FIXED</ref>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1aa3df75bd4e70012eb4091f5966dec8e4" kindref="member">dma_mgr_set_chn_transize</ref>(&amp;obj-&gt;dma_resource,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1a66418c75052465b695b7fe6cc54ecf5a" kindref="member">dma_mgr_enable_channel</ref>(&amp;obj-&gt;dma_resource);</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_i2c_dma_mgr_install_callback(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/>hpm_i2c_dma_complete_cb<sp/>complete)</highlight></codeline>
<codeline lineno="707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8h_1a219e66052c4c274fcf81bcc2f77652e4" kindref="member">dma_mgr_chn_conf_t</ref><sp/>chg_config;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8h_1a2cb29626236e022cced99f3e498d18eb" kindref="member">dma_resource_t</ref><sp/>*resource<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/><ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(ptr);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1a6fa7c7a09d860dd39bfc697dc86b8805" kindref="member">dma_mgr_get_default_chn_config</ref>(&amp;chg_config);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>chg_config.<ref refid="structhpm__dma__mgr__chn__conf_1abf3c7490a04d741952f14117c0c219ca" kindref="member">src_width</ref><sp/>=<sp/><ref refid="hpm__dma__mgr_8h_1a5a0fd3fe9f17a72e9bdda9612f59e7c3" kindref="member">DMA_MGR_TRANSFER_WIDTH_BYTE</ref>;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>chg_config.<ref refid="structhpm__dma__mgr__chn__conf_1a055cf9ef45e9b7868f53821997a40297" kindref="member">dst_width</ref><sp/>=<sp/><ref refid="hpm__dma__mgr_8h_1a5a0fd3fe9f17a72e9bdda9612f59e7c3" kindref="member">DMA_MGR_TRANSFER_WIDTH_BYTE</ref>;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>dma<sp/>config<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>resource<sp/>=<sp/>&amp;obj-&gt;dma_resource;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="hpm__dma__mgr_8c_1a319e00568b443c04dd481e53ee5bea9f" kindref="member">dma_mgr_request_resource</ref>(resource)<sp/>==<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chg_config.<ref refid="structhpm__dma__mgr__chn__conf_1ac303c1f78599127bfd07a5521b043d96" kindref="member">src_mode</ref><sp/>=<sp/><ref refid="hpm__dma__mgr_8h_1a20c3bf11dfdafef0b1c54d1f1da18676" kindref="member">DMA_MGR_HANDSHAKE_MODE_HANDSHAKE</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chg_config.<ref refid="structhpm__dma__mgr__chn__conf_1a3b847bbfd4476ca8b9b21262c038e40a" kindref="member">src_addr_ctrl</ref><sp/>=<sp/><ref refid="hpm__dma__mgr_8h_1a98b27499465acf45a40905c2fd7e71af" kindref="member">DMA_MGR_ADDRESS_CONTROL_FIXED</ref>;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chg_config.<ref refid="structhpm__dma__mgr__chn__conf_1ac01d4358e7b04bd3a475761e065faa33" kindref="member">src_addr</ref><sp/>=<sp/>(uint32_t)&amp;ptr-&gt;<ref refid="structI2C__Type_1a8c61f6c4ce377961703ed67a83132051" kindref="member">DATA</ref>;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chg_config.<ref refid="structhpm__dma__mgr__chn__conf_1a54a6d295af50ab705a6ecd6371d6893f" kindref="member">dst_mode</ref><sp/>=<sp/><ref refid="hpm__dma__mgr_8h_1aa6dbf20840d2626367b1004f62ebed94" kindref="member">DMA_MGR_HANDSHAKE_MODE_NORMAL</ref>;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chg_config.<ref refid="structhpm__dma__mgr__chn__conf_1ab573d54934a8be3099437c5f2acb0311" kindref="member">dst_addr_ctrl</ref><sp/>=<sp/><ref refid="hpm__dma__mgr_8h_1acd3e64e6a97e8b07eb8ce75f78519db2" kindref="member">DMA_MGR_ADDRESS_CONTROL_INCREMENT</ref>;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chg_config.<ref refid="structhpm__dma__mgr__chn__conf_1a02caa298cdd484fca1177cf515c3f1fb" kindref="member">en_dmamux</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chg_config.<ref refid="structhpm__dma__mgr__chn__conf_1a1f3e6087105526e53e49f1323a987e34" kindref="member">dmamux_src</ref><sp/>=<sp/>obj-&gt;dmamux_src;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1a978e7e2f4e8e9b342de6a43d6975ff5b" kindref="member">dma_mgr_setup_channel</ref>(resource,<sp/>&amp;chg_config);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1ab8a9c9b98d527ef61714031db448f1a4" kindref="member">dma_mgr_install_chn_tc_callback</ref>(resource,<sp/>hpm_i2c_dma_channel_tc_callback,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)obj);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1a35fdb678c747b3d8bf30e3f7b857ee63" kindref="member">dma_mgr_enable_chn_irq</ref>(resource,<sp/><ref refid="hpm__dma__mgr_8h_1a1ed5cb39f6d24c95fa17f26de4618868" kindref="member">DMA_MGR_INTERRUPT_MASK_TC</ref>);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__dma__mgr_8c_1a52da40cfe270e122d620feacecaab729" kindref="member">dma_mgr_enable_dma_irq_with_priority</ref>(resource,<sp/>1);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj-&gt;dma_complete<sp/>=<sp/>complete;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_i2c_slave_read_nonblocking(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>buf_addr;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/><ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(ptr);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((obj<sp/>==<sp/>NULL)<sp/>||<sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>))<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga7a1a6d26d62aa637d2b7030344ac9125" kindref="member">i2c_dma_disable</ref>(ptr);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>buf_addr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a721e0d5de9fd2d5dd577d5e89e1abb3a" kindref="member">core_local_mem_to_sys_address</ref>(<ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a72373b15bc6fffd9ec6688b6406cc65d" kindref="member">HPM_CORE0</ref>,<sp/>(uint32_t)buf);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga32776bc1506b1cea4d89131732656ad1" kindref="member">i2c_set_data_count</ref>(ptr,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga6124fcfef43816c28ef4889222c6952b" kindref="member">i2c_dma_enable</ref>(ptr);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>hpm_i2c_read_trigger_dma(obj,<sp/>buf_addr,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_i2c_slave_write_nonblocking(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>buf_addr;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/><ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(ptr);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((obj<sp/>==<sp/>NULL)<sp/>||<sp/>(<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>))<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga7a1a6d26d62aa637d2b7030344ac9125" kindref="member">i2c_dma_disable</ref>(ptr);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>buf_addr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a721e0d5de9fd2d5dd577d5e89e1abb3a" kindref="member">core_local_mem_to_sys_address</ref>(<ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a72373b15bc6fffd9ec6688b6406cc65d" kindref="member">HPM_CORE0</ref>,<sp/>(uint32_t)buf);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>hpm_i2c_write_trigger_dma(obj,<sp/>buf_addr,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga32776bc1506b1cea4d89131732656ad1" kindref="member">i2c_set_data_count</ref>(ptr,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga6124fcfef43816c28ef4889222c6952b" kindref="member">i2c_dma_enable</ref>(ptr);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_i2c_master_addr_write_nonblocking(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>device_address,<sp/>uint32_t<sp/>addr,<sp/>uint8_t<sp/>addr_size,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/>buf_size)</highlight></codeline>
<codeline lineno="775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*p<sp/>=<sp/>(uint8_t<sp/>*)&amp;addr;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>buf_addr;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/><ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(ptr);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((addr_size<sp/>==<sp/>0)<sp/>||<sp/>(addr_size<sp/>&gt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)))<sp/>||</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((buf_size<sp/>==<sp/>0)<sp/>||<sp/>(buf_size<sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>))<sp/>||</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((addr_size<sp/>+<sp/>buf_size)<sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>)<sp/>||</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(obj<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1ga5a3e7b03fa275ec2d334e95a2caf6477" kindref="member">I2C_WR</ref>,<sp/>(addr_size<sp/>+<sp/>buf_size),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>addr_size;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context-&gt;<ref refid="structi2c__context__t_1a4715ddb0408fe4184070fc1e2950a066" kindref="member">addr_endianness</ref><sp/>==<sp/><ref refid="hpm__i2c_8h_1aa598202fdf3ac425717209746d454a0ca58dc9b925d6bfa176d6c3309da49470e" kindref="member">i2c_master_addr_big_endian</ref>)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>p[left<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>*(p++));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>starting<sp/>to<sp/>transmit<sp/>data,<sp/>judge<sp/>addrhit<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>slave<sp/>address<sp/>exists<sp/>on<sp/>the<sp/>bus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>speed<sp/>min<sp/>is<sp/>100Kbps,<sp/>and<sp/>mem<sp/>address<sp/>max<sp/>is<sp/>4<sp/>byte,<sp/>10us<sp/>*<sp/>(4<sp/>*<sp/>8)<sp/>=<sp/>320us,<sp/><sp/>so<sp/>500us<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;<sp/></highlight><highlight class="comment">/*<sp/>500Us<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>buf_addr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a721e0d5de9fd2d5dd577d5e89e1abb3a" kindref="member">core_local_mem_to_sys_address</ref>(<ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a72373b15bc6fffd9ec6688b6406cc65d" kindref="member">HPM_CORE0</ref>,<sp/>(uint32_t)buf);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>hpm_i2c_write_trigger_dma(obj,<sp/>buf_addr,<sp/>buf_size);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga6124fcfef43816c28ef4889222c6952b" kindref="member">i2c_dma_enable</ref>(ptr);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_i2c_master_addr_read_nonblocking(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>device_address,<sp/>uint32_t<sp/>addr,<sp/>uint8_t<sp/>addr_size,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/>buf_size)</highlight></codeline>
<codeline lineno="825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>left;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*p<sp/>=<sp/>(uint8_t<sp/>*)&amp;addr;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>buf_addr;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/><ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(ptr);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((addr_size<sp/>==<sp/>0)<sp/>||<sp/>(addr_size<sp/>&gt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)))<sp/>||</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((buf_size<sp/>==<sp/>0)<sp/>||<sp/>(buf_size<sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>))<sp/>||</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((addr_size<sp/>+<sp/>buf_size)<sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>)<sp/>||</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(obj<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1ga5a3e7b03fa275ec2d334e95a2caf6477" kindref="member">I2C_WR</ref><sp/>|<sp/><ref refid="group__i2c__interface_1gadda0d20bd6472bbee03bd0ac07256ef3" kindref="member">I2C_NO_STOP</ref>,<sp/>(addr_size),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>addr_size;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context-&gt;<ref refid="structi2c__context__t_1a4715ddb0408fe4184070fc1e2950a066" kindref="member">addr_endianness</ref><sp/>==<sp/><ref refid="hpm__i2c_8h_1aa598202fdf3ac425717209746d454a0ca58dc9b925d6bfa176d6c3309da49470e" kindref="member">i2c_master_addr_big_endian</ref>)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>p[left<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga25c50964cd228de22193f6ccc59ca721" kindref="member">i2c_write_byte</ref>(ptr,<sp/>*(p++));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left--;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>starting<sp/>to<sp/>transmit<sp/>data,<sp/>judge<sp/>addrhit<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>slave<sp/>address<sp/>exists<sp/>on<sp/>the<sp/>bus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>speed<sp/>min<sp/>is<sp/>100Kbps,<sp/>and<sp/>mem<sp/>address<sp/>max<sp/>is<sp/>4<sp/>byte,<sp/>10us<sp/>*<sp/>(4<sp/>*<sp/>8)<sp/>=<sp/>320us,<sp/><sp/>so<sp/>500us<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;<sp/></highlight><highlight class="comment">/*<sp/>500Us<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa19319d05fb8a35cc93f77e40e06b9617" kindref="member">status_timeout</ref>;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>buf_addr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a721e0d5de9fd2d5dd577d5e89e1abb3a" kindref="member">core_local_mem_to_sys_address</ref>(<ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a72373b15bc6fffd9ec6688b6406cc65d" kindref="member">HPM_CORE0</ref>,<sp/>(uint32_t)buf);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>hpm_i2c_read_trigger_dma(obj,<sp/>buf_addr,<sp/>buf_size);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1gacb13e35c5e812ea51d29e833be1b72be" kindref="member">I2C_RD</ref>,<sp/>buf_size,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_i2c_master_write_nonblocking(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/>uint16_t<sp/>device_address,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*buf,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>buf_addr;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/><ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(ptr);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>)<sp/>||<sp/>(obj<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1ga5a3e7b03fa275ec2d334e95a2caf6477" kindref="member">I2C_WR</ref>,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>starting<sp/>to<sp/>transmit<sp/>data,<sp/>judge<sp/>addrhit<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>slave<sp/>address<sp/>exists<sp/>on<sp/>the<sp/>bus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>speed<sp/>min<sp/>is<sp/>100Kbps,<sp/>and<sp/>mem<sp/>address<sp/>max<sp/>is<sp/>4<sp/>byte,<sp/>10us<sp/>*<sp/>(4<sp/>*<sp/>8)<sp/>=<sp/>320us,<sp/><sp/>so<sp/>500us<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;<sp/></highlight><highlight class="comment">/*<sp/>500Us<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga6124fcfef43816c28ef4889222c6952b" kindref="member">i2c_dma_enable</ref>(ptr);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>buf_addr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a721e0d5de9fd2d5dd577d5e89e1abb3a" kindref="member">core_local_mem_to_sys_address</ref>(<ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a72373b15bc6fffd9ec6688b6406cc65d" kindref="member">HPM_CORE0</ref>,<sp/>(uint32_t)buf);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>hpm_i2c_write_trigger_dma(obj,<sp/>buf_addr,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_i2c_master_read_nonblocking(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>device_address,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>buf_addr;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*ptr<sp/>=<sp/>context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ticks_per_us<sp/>=<sp/><ref refid="group__clock__interface_1gab66c8cf6ac649dc572308c55a7467424" kindref="member">clock_get_core_clock_ticks_per_us</ref>();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>expected_ticks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/><ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(ptr);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref><sp/>&gt;<sp/><ref refid="HPM5300_2HPM5301_2hpm__soc__feature_8h_1a214369ce4fafa9caa85c2bf60449caf6" kindref="member">I2C_SOC_TRANSFER_COUNT_MAX</ref>)<sp/>||<sp/>(obj<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gga57008dafb69438605b6d0039d9ed7a8fa380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>W1C,<sp/>clear<sp/>CMPL<sp/>bit<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a53987b400b207e5730764a9e1fa618a8" kindref="member">I2C_STATUS_CMPL_MASK</ref>);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga020e48df31a0ef5ec203dcb484692f41" kindref="member">i2c_clear_fifo</ref>(ptr);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a55ef7a2f3592763a4bf4c2fd64712f75" kindref="member">hpm_i2c_master_phase_config</ref>(ptr,<sp/>device_address,<sp/><ref refid="group__i2c__interface_1gacb13e35c5e812ea51d29e833be1b72be" kindref="member">I2C_RD</ref>,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga73fce469e1c469821afe3d9887811a1f" kindref="member">i2c_master_issue_data_transmission</ref>(ptr);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>starting<sp/>to<sp/>transmit<sp/>data,<sp/>judge<sp/>addrhit<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>slave<sp/>address<sp/>exists<sp/>on<sp/>the<sp/>bus.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>i2c<sp/>speed<sp/>min<sp/>is<sp/>100Kbps,<sp/>and<sp/>mem<sp/>address<sp/>max<sp/>is<sp/>4<sp/>byte,<sp/>10us<sp/>*<sp/>(4<sp/>*<sp/>8)<sp/>=<sp/>320us,<sp/><sp/>so<sp/>500us<sp/>is<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_ticks<sp/>=<sp/><ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>+<sp/>(uint64_t)ticks_per_us<sp/>*<sp/>500UL;<sp/></highlight><highlight class="comment">/*<sp/>500Us<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(<ref refid="group__i2c__interface_1ga975e4af1ae245576ca8a3a7459582b5f" kindref="member">i2c_get_status</ref>(ptr)<sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__csr__interface_1gadd6bea98cfd952f51d4829277c8c967d" kindref="member">hpm_csr_get_core_cycle</ref>()<sp/>&gt;<sp/>expected_ticks)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hpm__i2c_8c_1a6658b64d9044b46c06872bc3235632e6" kindref="member">hpm_i2c_release_bus</ref>(ptr);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__i2c__interface_1ggad2d0aa8988c75981972c1aed8ffad898a29df3e1817110c936c78e13a324e51f7" kindref="member">status_i2c_no_addr_hit</ref>;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1gaafec08679095cc82d2d5a12cc335327e" kindref="member">i2c_clear_status</ref>(ptr,<sp/><ref refid="HPM5300_2ip_2hpm__i2c__regs_8h_1a77568918c27e61ae717e6c48dc1452cb" kindref="member">I2C_STATUS_ADDRHIT_MASK</ref>);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__i2c__interface_1ga6124fcfef43816c28ef4889222c6952b" kindref="member">i2c_dma_enable</ref>(ptr);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>buf_addr<sp/>=<sp/><ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a721e0d5de9fd2d5dd577d5e89e1abb3a" kindref="member">core_local_mem_to_sys_address</ref>(<ref refid="HPM5300_2HPM5301_2hpm__misc_8h_1a72373b15bc6fffd9ec6688b6406cc65d" kindref="member">HPM_CORE0</ref>,<sp/>(uint32_t)buf);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>hpm_i2c_read_trigger_dma(obj,<sp/>buf_addr,<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><ref refid="hpm__dma__mgr_8h_1a2cb29626236e022cced99f3e498d18eb" kindref="member">dma_resource_t</ref><sp/>*hpm_i2c_get_dma_mgr_resource(<ref refid="hpm__i2c_8h_1af009c382c39ddca7c2dfb42b5fb4a340" kindref="member">hpm_i2c_context_t</ref><sp/>*context)</highlight></codeline>
<codeline lineno="957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhpm__i2c__cfg__t" kindref="compound">hpm_i2c_cfg_t</ref><sp/>*obj<sp/>=<sp/><ref refid="hpm__i2c_8c_1a220e41cad2633f7b7cf411087a211f88" kindref="member">hpm_i2c_get_cfg_obj</ref>(context-&gt;<ref refid="structi2c__context__t_1a51b8a9bddeba55ffea2a0b4855ef0d9b" kindref="member">base</ref>);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;obj-&gt;dma_resource;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="components/i2c/hpm_i2c.c"/>
  </compounddef>
</doxygen>
