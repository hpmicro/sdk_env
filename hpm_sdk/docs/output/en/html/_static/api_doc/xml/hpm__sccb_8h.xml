<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="hpm__sccb_8h" kind="file" language="C++">
    <compoundname>hpm_sccb.h</compoundname>
    <includes refid="hpm__common_8h" local="yes">hpm_common.h</includes>
    <includes local="yes">hpm_soc_feature.h</includes>
    <includes refid="hpm__i2c__drv_8h" local="yes">hpm_i2c_drv.h</includes>
    <includedby refid="hpm__sccb_8c" local="yes">components/sccb/hpm_sccb.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>components/sccb/hpm_sccb.h</label>
        <link refid="hpm__sccb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>hpm_i2c_drv.h</label>
        <link refid="hpm__i2c__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="10">
        <label>hpm_i2c_regs.h</label>
      </node>
      <node id="8">
        <label>hpm_soc_feature.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>components/sccb/hpm_sccb.c</label>
        <link refid="hpm__sccb_8c"/>
      </node>
      <node id="1">
        <label>components/sccb/hpm_sccb.h</label>
        <link refid="hpm__sccb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" prot="public" static="no">
        <type><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref> *</type>
        <definition>typedef I2C_Type* sccb_type</definition>
        <argsstring></argsstring>
        <name>sccb_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="15" column="18" bodyfile="components/sccb/hpm_sccb.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__sccb_8h_1a8810c3de4ab64c2f9fc97fe04ba72866" prot="public" static="no">
        <type>enum _sccb_xfer_flag</type>
        <definition>typedef enum _sccb_xfer_flag sccb_xfer_flags_t</definition>
        <argsstring></argsstring>
        <name>sccb_xfer_flags_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="24" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="hpm__sccb_8h_1a6f1d214c329b4f498bce461eb0f6e4c5" prot="public" static="no">
        <type>struct _sccb_bus</type>
        <definition>typedef struct _sccb_bus hpm_sccb_bus_t</definition>
        <argsstring></argsstring>
        <name>hpm_sccb_bus_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="29" column="16"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="hpm__sccb_8h_1a2b2762d001463933e9f6bb6093a4f0a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_init</definition>
        <argsstring>(sccb_type sccb)</argsstring>
        <name>sccb_master_init</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <briefdescription>
<para>sccb master initialization </para>
        </briefdescription>
        <detaileddescription>
<para>Initialized sccb working at master mode</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if initialization is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="44" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="10" bodyend="14" declfile="components/sccb/hpm_sccb.h" declline="44" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a610c5f2bfe8d50eceedf5dd827f9fa94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t sccb_master_scan</definition>
        <argsstring>(sccb_type sccb)</argsstring>
        <name>sccb_master_scan</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <briefdescription>
<para>sccb master scan slave addr </para>
        </briefdescription>
        <detaileddescription>
<para>master scan the slave</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>uint8_t</parametername>
</parameternamelist>
<parameterdescription>
<para>the slave address val is zero if scan slave fail </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="54" column="9" bodyfile="components/sccb/hpm_sccb.c" bodystart="16" bodyend="24" declfile="components/sccb/hpm_sccb.h" declline="54" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a7e260c1661f453e7a3278c4e94fc9e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_gencall</definition>
        <argsstring>(sccb_type sccb, uint8_t cmd)</argsstring>
        <name>sccb_master_gencall</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>sccb master gen call slave </para>
        </briefdescription>
        <detaileddescription>
<para>the controller sends the command to determine whether the slave responds</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb master sends command </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if the slave responds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="65" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="26" bodyend="30" declfile="components/sccb/hpm_sccb.h" declline="65" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a2d8fb977d3b9902564b7dd8445a9512a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_readb</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint8_t reg_addr, uint8_t *reg_data)</argsstring>
        <name>sccb_master_readb</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>reg_data</declname>
        </param>
        <briefdescription>
<para>sccb master read 8bit data of specify 8bit register from certain slave device </para>
        </briefdescription>
        <detaileddescription>
<para>the function used to access 8 bit register address,read 8bit data <simplesect kind="note"><para>the register address must be 8bit</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>8bit register address of sccb slave device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_data</parametername>
</parameternamelist>
<parameterdescription>
<para>point of the buffer to store 8bit data from device the number of bytes is 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if reading is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="79" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="32" bodyend="35" declfile="components/sccb/hpm_sccb.h" declline="79" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a907a137f9830e478e3d69f2a2bff8b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_writeb</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint8_t reg_addr, uint8_t reg_data)</argsstring>
        <name>sccb_master_writeb</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg_data</declname>
        </param>
        <briefdescription>
<para>sccb master write 8bit data of specify 8bit register from certain slave device </para>
        </briefdescription>
        <detaileddescription>
<para>the function used to access 8 bit register address,write 8bit data <simplesect kind="note"><para>the register address must be 8bit</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>8bit register address of sccb slave device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_data</parametername>
</parameternamelist>
<parameterdescription>
<para>write 8bit data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if writing is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="93" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="37" bodyend="40" declfile="components/sccb/hpm_sccb.h" declline="93" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1adddb38ebb89369c102372e295b15c0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_readb2</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint16_t reg_addr, uint8_t *reg_data)</argsstring>
        <name>sccb_master_readb2</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>reg_data</declname>
        </param>
        <briefdescription>
<para>sccb master read 8bit data of specify 16bit register from certain slave device </para>
        </briefdescription>
        <detaileddescription>
<para>the function used to access 16 bit register address,read 8bit data <simplesect kind="note"><para>the register address must be 16bit</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>16bit register address of sccb slave device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_data</parametername>
</parameternamelist>
<parameterdescription>
<para>point of the buffer to store 8bit data from device the number of bytes is 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if reading is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="107" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="42" bodyend="48" declfile="components/sccb/hpm_sccb.h" declline="107" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a88bb6385d6c11bf72bf44be1c87b7ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_writeb2</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint16_t reg_addr, uint8_t reg_data)</argsstring>
        <name>sccb_master_writeb2</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg_data</declname>
        </param>
        <briefdescription>
<para>sccb master write 8bit data of specify 16bit register from certain slave device </para>
        </briefdescription>
        <detaileddescription>
<para>the function used to access 16 bit register address,write 8bit data <simplesect kind="note"><para>the register address must be 8bit</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>16bit register address of sccb slave device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_data</parametername>
</parameternamelist>
<parameterdescription>
<para>wirite 8bit data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if writing is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="121" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="50" bodyend="57" declfile="components/sccb/hpm_sccb.h" declline="121" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a7fce75c990fd1a293a1269c9a7b1065e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_readw</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint8_t reg_addr, uint16_t *reg_data)</argsstring>
        <name>sccb_master_readw</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>reg_data</declname>
        </param>
        <briefdescription>
<para>sccb master read 16bit data of specify 8bit register from certain slave device </para>
        </briefdescription>
        <detaileddescription>
<para>the function used to access 8 bit register address,read 16bit data <simplesect kind="note"><para>the register address must be 8bit</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>8bit register address of sccb slave device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_data</parametername>
</parameternamelist>
<parameterdescription>
<para>point of the buffer to store 16bit data from device the number of bytes is 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if reading is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="135" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="59" bodyend="68" declfile="components/sccb/hpm_sccb.h" declline="135" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1aacb727dcdae989a831673f268f1542a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_writew</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint8_t reg_addr, uint16_t reg_data)</argsstring>
        <name>sccb_master_writew</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>reg_data</declname>
        </param>
        <briefdescription>
<para>sccb master write 16bit data of specify 8bit register from certain slave device </para>
        </briefdescription>
        <detaileddescription>
<para>the function used to access 8 bit register address,write 16bit data <simplesect kind="note"><para>the register address must be 8bit</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>8bit register address of sccb slave device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_data</parametername>
</parameternamelist>
<parameterdescription>
<para>wirite 16bit data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if writing is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="149" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="70" bodyend="74" declfile="components/sccb/hpm_sccb.h" declline="149" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a4f7b284935f2ea60fa51beef539687dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_readw2</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint16_t reg_addr, uint16_t *reg_data)</argsstring>
        <name>sccb_master_readw2</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>reg_data</declname>
        </param>
        <briefdescription>
<para>sccb master read 16bit data of specify 16it register from certain slave device </para>
        </briefdescription>
        <detaileddescription>
<para>the function used to access 16 bit register address,read 16bit data <simplesect kind="note"><para>the register address must be 16bit</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>16bit register address of sccb slave device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_data</parametername>
</parameternamelist>
<parameterdescription>
<para>point of the buffer to store 16bit data from device the number of bytes is 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if reading is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="163" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="76" bodyend="85" declfile="components/sccb/hpm_sccb.h" declline="163" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a177b11b98864c2d75a3b4359d0083e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_writew2</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint16_t reg_addr, uint16_t reg_data)</argsstring>
        <name>sccb_master_writew2</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>reg_data</declname>
        </param>
        <briefdescription>
<para>sccb master write 16bit data of specify 16bit register from certain slave device </para>
        </briefdescription>
        <detaileddescription>
<para>the function used to access 16bit register address,write 16bit data <simplesect kind="note"><para>the register address must be 16bit</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>16bit register address of sccb slave device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg_data</parametername>
</parameternamelist>
<parameterdescription>
<para>wirite 16bit data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if writing is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="177" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="87" bodyend="94" declfile="components/sccb/hpm_sccb.h" declline="177" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a99ecf7736aa12c176316daa2d85fbe5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t sccb_master_read_bytes</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint8_t *buf, const uint32_t len, uint8_t flags)</argsstring>
        <name>sccb_master_read_bytes</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>sccb master reads the specified number of bytes continuously at the specified flag </para>
        </briefdescription>
        <detaileddescription>
<para>the size should not not greater than I2C_SOC_TRANSFER_COUNT_MAX</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>point of the buffer to store 8bit data from device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">len</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data to be read in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="hpm__sccb_8h_1a8810c3de4ab64c2f9fc97fe04ba72866" kindref="member">sccb_xfer_flags_t</ref> enmu flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if reading is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="191" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="96" bodyend="99" declfile="components/sccb/hpm_sccb.h" declline="191" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__sccb_8h_1a71dc8b6b8d3347542b5e8da07e72c3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t cambus_write_bytes</definition>
        <argsstring>(sccb_type sccb, uint8_t slv_addr, uint8_t *buf, const uint32_t len, uint8_t flags)</argsstring>
        <name>cambus_write_bytes</name>
        <param>
          <type><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref></type>
          <declname>sccb</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slv_addr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>sccb master weite the specified number of bytes continuously at the specified flag </para>
        </briefdescription>
        <detaileddescription>
<para>the size should not not greater than I2C_SOC_TRANSFER_COUNT_MAX</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sccb</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slv_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>sccb slave address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>point of the buffer to store 8bit data from device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">len</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data to be write in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="hpm__sccb_8h_1a8810c3de4ab64c2f9fc97fe04ba72866" kindref="member">sccb_xfer_flags_t</ref> enmu flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if writing is completed without any error </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/sccb/hpm_sccb.h" line="205" column="12" bodyfile="components/sccb/hpm_sccb.c" bodystart="101" bodyend="118" declfile="components/sccb/hpm_sccb.h" declline="205" declcolumn="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_SCCB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_SCCB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__common_8h" kindref="compound">hpm_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_soc_feature.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__i2c__drv_8h" kindref="compound">hpm_i2c_drv.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structI2C__Type" kindref="compound">I2C_Type</ref><sp/>*<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_sccb_xfer_flag<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Normal<sp/>transfer<sp/>with<sp/>start<sp/>condition,<sp/>address,<sp/>data<sp/>and<sp/>stop<sp/>condition.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="hpm__sccb_8h_1a701055c8e077d644ebd1b1b881c4bae7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__sccb_8h_1a701055c8e077d644ebd1b1b881c4bae7" kindref="member">sccb_xfer_no_flags</ref>,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*This<sp/>flag<sp/>allows<sp/>the<sp/>next<sp/>transfer<sp/>to<sp/>change<sp/>direction<sp/>with<sp/>repeated<sp/>start*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="hpm__sccb_8h_1a9425330d78b28fe2dcc06ccea26b3fa0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__sccb_8h_1a9425330d78b28fe2dcc06ccea26b3fa0" kindref="member">sccb_xfer_no_stop</ref>,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*This<sp/>flag<sp/>allows<sp/>chaining<sp/>multiple<sp/>writes<sp/>or<sp/>reads<sp/>with<sp/>the<sp/>same<sp/>direction*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="hpm__sccb_8h_1a0e8d004f671d836a39e0531a2806e9e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__sccb_8h_1a0e8d004f671d836a39e0531a2806e9e8" kindref="member">sccb_xfer_suspend</ref>,</highlight></codeline>
<codeline lineno="24" refid="hpm__sccb_8h_1a8810c3de4ab64c2f9fc97fe04ba72866" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__sccb_8h_1a8810c3de4ab64c2f9fc97fe04ba72866" kindref="member">sccb_xfer_flags_t</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_sccb_bus<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>initialzed;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb;</highlight></codeline>
<codeline lineno="29" refid="hpm__sccb_8h_1a6f1d214c329b4f498bce461eb0f6e4c5" refkind="member"><highlight class="normal">}<sp/><ref refid="hpm__sccb_8h_1a6f1d214c329b4f498bce461eb0f6e4c5" kindref="member">hpm_sccb_bus_t</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a2b2762d001463933e9f6bb6093a4f0a3" kindref="member">sccb_master_init</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">uint8_t<sp/><ref refid="hpm__sccb_8h_1a610c5f2bfe8d50eceedf5dd827f9fa94" kindref="member">sccb_master_scan</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a7e260c1661f453e7a3278c4e94fc9e5d" kindref="member">sccb_master_gencall</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>cmd);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a2d8fb977d3b9902564b7dd8445a9512a" kindref="member">sccb_master_readb</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint8_t<sp/>reg_addr,<sp/>uint8_t<sp/>*reg_data);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a907a137f9830e478e3d69f2a2bff8b9e" kindref="member">sccb_master_writeb</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint8_t<sp/>reg_addr,<sp/>uint8_t<sp/>reg_data);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1adddb38ebb89369c102372e295b15c0c9" kindref="member">sccb_master_readb2</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint16_t<sp/>reg_addr,<sp/>uint8_t<sp/>*reg_data);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a88bb6385d6c11bf72bf44be1c87b7ce4" kindref="member">sccb_master_writeb2</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint16_t<sp/>reg_addr,<sp/>uint8_t<sp/>reg_data);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a7fce75c990fd1a293a1269c9a7b1065e" kindref="member">sccb_master_readw</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint8_t<sp/>reg_addr,<sp/>uint16_t<sp/>*reg_data);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1aacb727dcdae989a831673f268f1542a6" kindref="member">sccb_master_writew</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint8_t<sp/>reg_addr,<sp/>uint16_t<sp/>reg_data);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a4f7b284935f2ea60fa51beef539687dd" kindref="member">sccb_master_readw2</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint16_t<sp/>reg_addr,<sp/>uint16_t<sp/>*reg_data);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a177b11b98864c2d75a3b4359d0083e36" kindref="member">sccb_master_writew2</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint16_t<sp/>reg_addr,<sp/>uint16_t<sp/>reg_data);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a99ecf7736aa12c176316daa2d85fbe5c" kindref="member">sccb_master_read_bytes</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint8_t<sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>len,<sp/>uint8_t<sp/>flags);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__sccb_8h_1a71dc8b6b8d3347542b5e8da07e72c3b9" kindref="member">cambus_write_bytes</ref>(<ref refid="hpm__sccb_8h_1ae68220b108e3275fd7bde9f038fbf2ad" kindref="member">sccb_type</ref><sp/>sccb,<sp/>uint8_t<sp/>slv_addr,<sp/>uint8_t<sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>len,<sp/>uint8_t<sp/>flags);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="components/sccb/hpm_sccb.h"/>
  </compounddef>
</doxygen>
