<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="group__nnactivation" kind="group">
    <compoundname>nnactivation</compoundname>
    <title>NN Activation Functions</title>
    <sectiondef kind="var">
      <memberdef kind="variable" id="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" prot="public" static="no" mutable="no">
        <type>void</type>
        <definition>int32_t size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="6899" column="6" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="6899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__nnactivation_1gae45c0213e0185b0a3bffc49ea24f5744" prot="public" static="no" mutable="no">
        <type>void</type>
        <definition>void slope</definition>
        <argsstring></argsstring>
        <name>slope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="6899" column="11" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="6899" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__nnactivation_1gac909d6f396f354938fd91f745b41f4fd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_nn_activate_s8</definition>
        <argsstring>(q7_t *in_out, uint32_t size, uint16_t int_bits, riscv_nn_activation_fun act_fun)</argsstring>
        <name>hpm_nn_activate_s8</name>
        <param>
          <type>q7_t *</type>
          <declname>in_out</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>int_bits</declname>
        </param>
        <param>
          <type>riscv_nn_activation_fun</type>
          <declname>act_fun</declname>
        </param>
        <briefdescription>
<para>This function uses the sigmoid or tanh function to perform activation for signed 8-bit integer input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">in_out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">int_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>number of the bits in the integer part, which is supposed to be smaller than 4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">act_fun</parametername>
</parameternamelist>
<parameterdescription>
<para>selection of activation functions. See the Note below for details.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The available activation functions for selection include:<itemizedlist>
<listitem><para>NN_SIGMOID: Use the sigmoid activation function</para>
</listitem><listitem><para>NN_TANH: Use the tanh activation function</para>
</listitem></itemizedlist>
</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SIZE<sp/>32</highlight></codeline>
<codeline><highlight class="normal">q7_t<sp/>in_out[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">hpm_nn_activate_s8(in_out,<sp/>SIZE,<sp/>0,<sp/>NN_SIGMOID);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="6837" column="20" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="6837" bodyend="6847"/>
      </memberdef>
      <memberdef kind="function" id="group__nnactivation_1ga11bb53fefef60cb8c979319e638fddec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_nn_activate_s16</definition>
        <argsstring>(q15_t *in_out, uint32_t size, uint16_t int_bits, riscv_nn_activation_fun act_fun)</argsstring>
        <name>hpm_nn_activate_s16</name>
        <param>
          <type>q15_t *</type>
          <declname>in_out</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>int_bits</declname>
        </param>
        <param>
          <type>riscv_nn_activation_fun</type>
          <declname>act_fun</declname>
        </param>
        <briefdescription>
<para>This function uses sigmoid or tanh function to perform activation for signed 16-bit integer input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">in_out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">int_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>number of the bits in the integer part, which is supposed to be smaller than 4 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">act_fun</parametername>
</parameternamelist>
<parameterdescription>
<para>selection of activation functions. See the Note below for details.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The availbale activation functions for selection include:<itemizedlist>
<listitem><para>NN_SIGMOID: Use the sigmoid activation function</para>
</listitem><listitem><para>NN_TANH: Use the tanh activation function </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="6864" column="20" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="6864" bodyend="6874"/>
      </memberdef>
      <memberdef kind="function" id="group__nnactivation_1ga377120517dc98545840980dfe5c871ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_nn_leaky_relu_s8</definition>
        <argsstring>(q7_t *in_out, uint32_t size, q15_t slope) riscv_nn_leaky_relu_s8(in_out</argsstring>
        <name>hpm_nn_leaky_relu_s8</name>
        <param>
          <type>q7_t *</type>
          <declname>in_out</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>q15_t</type>
          <declname>slope</declname>
        </param>
        <briefdescription>
<para>This function uses the leaky ReLU function to perform activation for signed 8-bit integer input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">in_out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slope</parametername>
</parameternamelist>
<parameterdescription>
<para>slope value to be multiplied with the negative inputs. The result will be right shifted 15 bits to scale back to signed 8-bit integer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SIZE<sp/>1024</highlight></codeline>
<codeline><highlight class="normal">q15_t<sp/>slope<sp/>=<sp/>16384;</highlight></codeline>
<codeline><highlight class="normal">q7_t<sp/>in_out[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">hpm_nn_leaky_relu_s8(in_out,<sp/>SIZE,<sp/>slope);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="6893" column="20"/>
      </memberdef>
      <memberdef kind="function" id="group__nnactivation_1gae7c27f21813b3ed5303c17cbf37da14e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_nn_relu_any_s8</definition>
        <argsstring>(q7_t *data, uint16_t size, q7_t max_val)</argsstring>
        <name>hpm_nn_relu_any_s8</name>
        <param>
          <type>q7_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>q7_t</type>
          <declname>max_val</declname>
        </param>
        <briefdescription>
<para>This function uses the ReLU function to perform activation for signed 8-bit integer input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_val</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value to limit the output vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="6910" column="20" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="6910" bodyend="6917"/>
      </memberdef>
      <memberdef kind="function" id="group__nnactivation_1gaf8ac0b3f5c47200437be14a9099b97e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_nn_relu_s8</definition>
        <argsstring>(q7_t *in_out, uint32_t size)</argsstring>
        <name>hpm_nn_relu_s8</name>
        <param>
          <type>q7_t *</type>
          <declname>in_out</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>This function uses the ReLU function to perform activation for signed 8-bit integer input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">in_out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input/output vector</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>H<sp/>16</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>W<sp/>16</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CH<sp/>5</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM<sp/>(H<sp/>*<sp/>W<sp/>*CH)</highlight></codeline>
<codeline><highlight class="normal">q7_t<sp/>in_out[NUM]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">hpm_nn_relu_s8(in_out,<sp/>NUM);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="6935" column="20" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="6935" bodyend="6942"/>
      </memberdef>
      <memberdef kind="function" id="group__nnactivation_1ga3d562b326764a17af405c2d2ddb8cbb9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_nn_relu_s16</definition>
        <argsstring>(q15_t *in_out, uint32_t size)</argsstring>
        <name>hpm_nn_relu_s16</name>
        <param>
          <type>q15_t *</type>
          <declname>in_out</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>This function uses the ReLU function to perform activation for signed 16-bit integer input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">in_out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the input/output vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input/output vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="6950" column="20" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="6950" bodyend="6957"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The activation functions are used to filter out some input data. They include sigmoid, tanh and ReLU (Rectified Linear Unit) functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
