<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="group__nnbasic" kind="group">
    <compoundname>nnbasic</compoundname>
    <title>NN Basic Functions</title>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__nnbasic_1ga6d7992c8de4387220a5be4106a61a690" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_nn_add_s8_sym</definition>
        <argsstring>(const q7_t *in_tensor1, const q7_t *in_tensor2, const int16_t *scale1, const int16_t *scale2, const uint32_t size, const uint16_t pre_rshift, const uint16_t out_scale, const uint16_t post_rshift, q7_t *out)</argsstring>
        <name>hpm_nn_add_s8_sym</name>
        <param>
          <type>const q7_t *</type>
          <declname>in_tensor1</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>in_tensor2</declname>
        </param>
        <param>
          <type>const int16_t *</type>
          <declname>scale1</declname>
        </param>
        <param>
          <type>const int16_t *</type>
          <declname>scale2</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>pre_rshift</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>post_rshift</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>This function performs element-wise addition for signed 8-bit integer input vectors with two-stage shift. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_tensor1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_tensor2</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the first scaling vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale2</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the second scaling vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pre_rshift</parametername>
</parameternamelist>
<parameterdescription>
<para>right shift amount for the accumulator before the scaling </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling value for the accumulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">post_rshift</parametername>
</parameternamelist>
<parameterdescription>
<para>right shift amount for the accumulator after the scaling </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the element-wise addition results</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SIZE<sp/>1024</highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/>pre_rshift<sp/>=<sp/>8;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>addition<sp/>results<sp/>of<sp/>both<sp/>scaled<sp/>input</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>tensors<sp/>are<sp/>in<sp/>the<sp/>range<sp/>of<sp/>24-bit;<sp/>thus,<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pre_rshift<sp/>should<sp/>be<sp/>in<sp/>the<sp/>range<sp/>of<sp/>[0,<sp/>24].</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Here<sp/>we<sp/>scale<sp/>down<sp/>the<sp/>results<sp/>into<sp/>16-bit</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>range.</highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/>out_scale<sp/>=<sp/>3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>up<sp/>the<sp/>result<sp/>into<sp/>18-bit<sp/>range.</highlight></codeline>
<codeline><highlight class="normal">uint16_t<sp/>post_rshift<sp/>=<sp/>11;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>down<sp/>the<sp/>result<sp/>into<sp/>7-bit<sp/>range.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">q7_t<sp/>in_tensor1[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">q7_t<sp/>in_tensor2[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">q15_t<sp/>scale1[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">q15_t<sp/>scale2[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">q7_t<sp/>out[SIZE];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">hpm_nn_add_s8_sym(in_tensor1,<sp/>in_tensor2,<sp/>scale1,<sp/>scale2,<sp/>SIZE,<sp/>pre_rshift,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out_scale,<sp/>post_rshift,<sp/>out);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="7058" column="20" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="7058" bodyend="7075"/>
      </memberdef>
      <memberdef kind="function" id="group__nnbasic_1gafe1a64a3acdd254eaf9fd192048433fb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_nn_add_s8_sym_round</definition>
        <argsstring>(const q7_t *in_tensor1, const q7_t *in_tensor2, const uint32_t scale1, const uint32_t scale2, const uint32_t size, const uint16_t pre_rshift, const uint16_t out_scale, const uint16_t post_rshift, q7_t *out)</argsstring>
        <name>hpm_nn_add_s8_sym_round</name>
        <param>
          <type>const q7_t *</type>
          <declname>in_tensor1</declname>
        </param>
        <param>
          <type>const q7_t *</type>
          <declname>in_tensor2</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>scale1</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>scale2</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>pre_rshift</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>post_rshift</declname>
        </param>
        <param>
          <type>q7_t *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>This function performs element-wise addition for signed 8-bit integer input vectors with two-stage shift with rounding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_tensor1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_tensor2</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale1</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling value for the first input vector. It should be in the range of 0 to {2^23}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale2</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling value for the second input vector. It should be in the range of 0 to {2^23}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pre_rshift</parametername>
</parameternamelist>
<parameterdescription>
<para>right shift amount for the accumulator before the scaling </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling value for the accumulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">post_rshift</parametername>
</parameternamelist>
<parameterdescription>
<para>right shift amount for the accumulator after the scaling </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of element-wise addition results </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="7096" column="20" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="7096" bodyend="7113"/>
      </memberdef>
      <memberdef kind="function" id="group__nnbasic_1gac031be61d74c569dfa159b05cb236e64" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int hpm_nn_ew_add_s8_asym</definition>
        <argsstring>(const int8_t *in_tensor1, const int8_t *in_tensor2, const int32_t in_offset1, const int32_t in_scale1, const int32_t in_rshift1, const int32_t in_offset2, const int32_t in_scale2, const int32_t in_rshift2, const int32_t lshift, int8_t *out, const int32_t out_offset, const int32_t out_scale, const int32_t out_rshift, const int32_t act_min, const int32_t act_max, const uint32_t size)</argsstring>
        <name>hpm_nn_ew_add_s8_asym</name>
        <param>
          <type>const int8_t *</type>
          <declname>in_tensor1</declname>
        </param>
        <param>
          <type>const int8_t *</type>
          <declname>in_tensor2</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>in_offset1</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>in_scale1</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>in_rshift1</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>in_offset2</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>in_scale2</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>in_rshift2</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>lshift</declname>
        </param>
        <param>
          <type>int8_t *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>out_offset</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>out_rshift</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>act_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>act_max</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>This function performs element-wise addition for signed 8-bit integer input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_tensor1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_tensor2</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_offset1</parametername>
</parameternamelist>
<parameterdescription>
<para>offset value for first input vector. It should be in the range of -127 to 128. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_scale1</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling value for first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_rshift1</parametername>
</parameternamelist>
<parameterdescription>
<para>right shift amount for the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_offset2</parametername>
</parameternamelist>
<parameterdescription>
<para>offset value for the second input vector. It should be in the range of -127 to 128. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_scale2</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling value for the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_rshift2</parametername>
</parameternamelist>
<parameterdescription>
<para>right shift amount for the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lshift</parametername>
</parameternamelist>
<parameterdescription>
<para>left shift amount for the first and second input vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the element-wise addition results </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset value for the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling value for the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_rshift</parametername>
</parameternamelist>
<parameterdescription>
<para>right shift amount for the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">act_min</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value that the output is limited to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">act_max</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value that the output is limited to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input vectors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns 0.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SIZE<sp/>1024</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>in_offset1<sp/>=<sp/>16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Offset<sp/>for<sp/>in_tensor1</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>in_scale1<sp/>=<sp/>(1&lt;&lt;28);<sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>down<sp/>in_tensor1<sp/>by<sp/>1/23</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>in_rshift1<sp/>=<sp/>3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>down<sp/>in_tensor1<sp/>by<sp/>1/23</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>in_offset2<sp/>=<sp/>17;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Offset<sp/>for<sp/>in_tensor2</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>in_scale2<sp/>=<sp/>(1&lt;&lt;28);<sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>down<sp/>in_tensor2<sp/>by<sp/>1/23</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>in_rshift2<sp/>=<sp/>3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>down<sp/>in_tensor2<sp/>by<sp/>1/23</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>lshift<sp/>=<sp/>10;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>up<sp/>the<sp/>input<sp/>tensor<sp/>by<sp/>210<sp/>times</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>out_offset<sp/>=<sp/>18;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Offset<sp/>for<sp/>the<sp/>output<sp/>tensor</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>out_scale<sp/>=<sp/>(1&lt;&lt;30);<sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>down<sp/>in_tensor2<sp/>by<sp/>1/2</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>out_rshift<sp/>=<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>down<sp/>in_tensor2<sp/>by<sp/>1/24</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>act_min<sp/>=<sp/>0xffffffa3;<sp/><sp/><sp/>//<sp/>Limit<sp/>the<sp/>outputs<sp/>in<sp/>the<sp/>range<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>[0xffffffa3,<sp/>0x0000005d]</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>act_max<sp/>=<sp/>0x0000005d;<sp/><sp/><sp/>//<sp/>Limit<sp/>the<sp/>outputs<sp/>in<sp/>the<sp/>range<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>[0xffffffa3,<sp/>0x0000005d]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int8_t<sp/>in_tensor1[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">int8_t<sp/>in_tensor2[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">int8_t<sp/>out[SIZE];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">hpm_nn_ew_add_s8_asym(in_tensor1,<sp/>in_tensor2,<sp/>in_offset1,<sp/>in_scale1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>in_rshift1,<sp/>in_offset2,<sp/>in_scale2,<sp/>in_rshift2,<sp/>lshift,<sp/>out,<sp/>out_offset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out_scale,<sp/>out_rshift,<sp/>act_min,<sp/>act_max,<sp/>SIZE);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="7166" column="19" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="7166" bodyend="7194"/>
      </memberdef>
      <memberdef kind="function" id="group__nnbasic_1gad7837374c646ceb828a86e29261c777e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int hpm_nn_ew_mul_s8_asym</definition>
        <argsstring>(const int8_t *in_tensor1, const int8_t *in_tensor2, const int32_t in_offset1, const int32_t in_offset2, int8_t *out, const int32_t out_offset, const int32_t out_scale, const int32_t out_shift, const int32_t act_min, const int32_t act_max, const uint32_t size)</argsstring>
        <name>hpm_nn_ew_mul_s8_asym</name>
        <param>
          <type>const int8_t *</type>
          <declname>in_tensor1</declname>
        </param>
        <param>
          <type>const int8_t *</type>
          <declname>in_tensor2</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>in_offset1</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>in_offset2</declname>
        </param>
        <param>
          <type>int8_t *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>out_offset</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>out_shift</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>act_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>act_max</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>This function performs element-wise multiplication for signed 8-bit integer input vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">in_tensor1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the first input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_tensor2</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of the second input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_offset1</parametername>
</parameternamelist>
<parameterdescription>
<para>offset value for the first input vector. It should be in the range of -127 to 128. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">in_offset2</parametername>
</parameternamelist>
<parameterdescription>
<para>offset value for the second input vector. It should be in the range of -127 to 128. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of element-wise multiplication results </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset value for the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling value for the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_shift</parametername>
</parameternamelist>
<parameterdescription>
<para>shift amount for the output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">act_min</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value that the output is limited to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">act_max</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value that the output is limited to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in the input vectors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns 0.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SIZE<sp/>1024</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>in_offset1<sp/>=<sp/>16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Offset<sp/>for<sp/>in_tensor1</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>in_offset2<sp/>=<sp/>17;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Offset<sp/>for<sp/>in_tensor2</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>out_offset<sp/>=<sp/>18;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Offset<sp/>for<sp/>the<sp/>output<sp/>tensor</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>out_scale<sp/>=<sp/>(1&lt;&lt;30);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>down<sp/>the<sp/>output<sp/>tensor<sp/>by<sp/>1/2</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>out_shift<sp/>=<sp/>-4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Scale<sp/>down<sp/>the<sp/>output<sp/>tensor<sp/>by<sp/>1/24</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>act_min<sp/>=<sp/>0xffffffa3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Limit<sp/>the<sp/>outputs<sp/>in<sp/>the<sp/>range<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>[0xffffffa3,<sp/>0x0000005d]</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>act_max<sp/>=<sp/>0x0000005d;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Limit<sp/>the<sp/>outputs<sp/>in<sp/>the<sp/>range<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>[0xffffffa3,<sp/>0x0000005d]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">in_tensor1[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">in_tensor2[SIZE]<sp/>=<sp/>{...};</highlight></codeline>
<codeline><highlight class="normal">out[SIZE];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">hpm_nn_ew_mul_s8_asym(in_tensor1,<sp/>in_tensor2,<sp/>in_offset1,<sp/>in_offset2,<sp/>out,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out_offset,<sp/>out_scale,<sp/>out_shift,<sp/>act_min,<sp/>act_max,<sp/>SIZE);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="middleware/hpm_math/hpm_math.h" line="7235" column="19" bodyfile="middleware/hpm_math/hpm_math.h" bodystart="7235" bodyend="7256"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The basic functions are used to perform element-wise basic arithmetic operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
