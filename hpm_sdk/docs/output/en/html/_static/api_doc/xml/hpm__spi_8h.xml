<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="hpm__spi_8h" kind="file" language="C++">
    <compoundname>hpm_spi.h</compoundname>
    <includes refid="hpm__common_8h" local="yes">hpm_common.h</includes>
    <includes refid="hpm__spi__drv_8h" local="yes">hpm_spi_drv.h</includes>
    <includes refid="hpm__dma__drv_8h" local="yes">hpm_dma_drv.h</includes>
    <includes refid="hpm__dmamux__drv_8h" local="yes">hpm_dmamux_drv.h</includes>
    <includes local="yes">hpm_misc.h</includes>
    <includes refid="hpm__l1c__drv_8h" local="yes">hpm_l1c_drv.h</includes>
    <includedby refid="hpm__i2s__over__spi_8c" local="yes">components/i2s_over_spi/hpm_i2s_over_spi.c</includedby>
    <includedby refid="hpm__spi_8c" local="yes">components/spi/hpm_spi.c</includedby>
    <incdepgraph>
      <node id="16">
        <label>hpm_l1c_drv.h</label>
        <link refid="hpm__l1c__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>riscv/riscv_core.h</label>
        <link refid="riscv__core_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>components/spi/hpm_spi.h</label>
        <link refid="hpm__spi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>hpm_csr_drv.h</label>
        <link refid="hpm__csr__drv_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>hpm_dma_drv.h</label>
        <link refid="hpm__dma__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>hpm_dmamux_drv.h</label>
        <link refid="hpm__dmamux__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hpm_spi_drv.h</label>
        <link refid="hpm__spi__drv_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="18">
        <label>hpm_csr_regs.h</label>
      </node>
      <node id="12">
        <label>hpm_dma_regs.h</label>
      </node>
      <node id="14">
        <label>hpm_dmamux_regs.h</label>
      </node>
      <node id="15">
        <label>hpm_misc.h</label>
      </node>
      <node id="10">
        <label>hpm_soc_feature.h</label>
      </node>
      <node id="9">
        <label>hpm_spi_regs.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>components/i2s_over_spi/hpm_i2s_over_spi.c</label>
        <link refid="hpm__i2s__over__spi_8c"/>
      </node>
      <node id="3">
        <label>components/spi/hpm_spi.c</label>
        <link refid="hpm__spi_8c"/>
      </node>
      <node id="1">
        <label>components/spi/hpm_spi.h</label>
        <link refid="hpm__spi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structspi__dma__context__t" prot="public">spi_dma_context_t</innerclass>
    <innerclass refid="structspi__context__t" prot="public">spi_context_t</innerclass>
    <innerclass refid="structspi__initialize__config__t" prot="public">spi_initialize_config_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="hpm__spi_8h_1a3bfce6edc450d433df797c134fb21528" prot="public" static="no">
        <name>SPI_CS_ACTIVE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="23" column="9" bodyfile="components/spi/hpm_spi.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpm__spi_8h_1ad30f59bc64772b88a4178b1e62946db7" prot="public" static="no">
        <name>USE_DMA_MGR</name>
        <initializer>(0U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="27" column="9" bodyfile="components/spi/hpm_spi.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpm__spi_8h_1a7a474e427eb0f84beb8d74c8f7880e61" prot="public" static="no">
        <name>SPI_DMA_DESC_COUNT_PER_TRANS</name>
        <initializer>(3U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="34" column="9" bodyfile="components/spi/hpm_spi.h" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="hpm__spi_8h_1aa5040a4e4d8a2e6010f213de252805e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_setup_dma_transfer</definition>
        <argsstring>(spi_context_t *context, spi_control_config_t *config)</argsstring>
        <name>hpm_spi_setup_dma_transfer</name>
        <param>
          <type><ref refid="structspi__context__t" kindref="compound">spi_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>hpm_spi setup dma transfer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if the transferred data count more than SPI_SOC_TRANSFER_COUNT_MAX, this API will using DMA chain descriptors to link SPI transmission.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;spi_context_t&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;spi_control_config_t&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>if SPI transfers data successfully. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="99" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="533" bodyend="577" declfile="components/spi/hpm_spi.h" declline="99" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1a7ffc36e67d61727ac713636186e72aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_release_gpio_cs</definition>
        <argsstring>(spi_context_t *context)</argsstring>
        <name>hpm_spi_release_gpio_cs</name>
        <param>
          <type><ref refid="structspi__context__t" kindref="compound">spi_context_t</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>hpm_spi releases gpio cs pin after SPI transfer completed </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the struct of &quot;spi_context_t&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>if SPI releases gpio cs pin successfully. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="110" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="581" bodyend="594" declfile="components/spi/hpm_spi.h" declline="110" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1a92749b87848c44cdf2f7e05cd72baf13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpm_spi_get_default_init_config</definition>
        <argsstring>(spi_initialize_config_t *config)</argsstring>
        <name>hpm_spi_get_default_init_config</name>
        <param>
          <type><ref refid="structspi__initialize__config__t" kindref="compound">spi_initialize_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>spi get default init config </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>it&apos;s no command/address/token phase, only data phase.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_init_config_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="120" column="6" bodyfile="components/spi/hpm_spi.c" bodystart="794" bodyend="803" declfile="components/spi/hpm_spi.h" declline="120" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1a926606c43a217dca6c6afad012649427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_initialize</definition>
        <argsstring>(SPI_Type *ptr, spi_initialize_config_t *config)</argsstring>
        <name>hpm_spi_initialize</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structspi__initialize__config__t" kindref="compound">spi_initialize_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>initialize for spi </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>it&apos;s no command/address/token phase, only data phase.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>spi_init_config_t struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in busy status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="131" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="805" bodyend="831" declfile="components/spi/hpm_spi.h" declline="131" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1a00ef064bb3d9b8e462cdf726af9c59a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_set_sclk_frequency</definition>
        <argsstring>(SPI_Type *ptr, uint32_t freq)</argsstring>
        <name>hpm_spi_set_sclk_frequency</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>freq</declname>
        </param>
        <briefdescription>
<para>set spi sclk frequency for spi master </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sclk frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in busy status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="140" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="833" bodyend="930" declfile="components/spi/hpm_spi.h" declline="140" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1a9a55e3ff764f95c85faa338092092f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_transmit_receive_blocking</definition>
        <argsstring>(SPI_Type *ptr, uint8_t *wbuff, uint8_t *rbuff, uint32_t size, uint32_t timeout)</argsstring>
        <name>hpm_spi_transmit_receive_blocking</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>wbuff</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>rbuff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>transmit and receive block for spi </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>it&apos;s no command/address/token phase, only data phase.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wbuff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rbuff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data count(word unit), not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>wait time. unit is millisecond </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in busy status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="154" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="932" bodyend="978" declfile="components/spi/hpm_spi.h" declline="154" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1aa9a47638d853a478222752ac26b04734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_receive_blocking</definition>
        <argsstring>(SPI_Type *ptr, uint8_t *buff, uint32_t size, uint32_t timeout)</argsstring>
        <name>hpm_spi_receive_blocking</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>receive block for spi </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>it&apos;s no command/address/token phase, only data phase.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data count(word unit), not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>wait time. unit is millisecond </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in busy status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="167" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="980" bodyend="1014" declfile="components/spi/hpm_spi.h" declline="167" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1a231f68025831b83e5309dc16e9dd7835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_transmit_blocking</definition>
        <argsstring>(SPI_Type *ptr, uint8_t *buff, uint32_t size, uint32_t timeout)</argsstring>
        <name>hpm_spi_transmit_blocking</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>transmit block for spi </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>it&apos;s no command/address/token phase, only data phase.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buff</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data buff address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent data count(word unit), not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>wait time. unit is millisecond </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in busy status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="180" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="1016" bodyend="1061" declfile="components/spi/hpm_spi.h" declline="180" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1adaf0db9df572cb84e05ad13b23627521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_transmit_receive_setup_dma</definition>
        <argsstring>(SPI_Type *ptr, uint32_t size)</argsstring>
        <name>hpm_spi_transmit_receive_setup_dma</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>transmit and receive setup dma for spi </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>it&apos;s no command/address/token phase, only data phase. main configuration spi dma related, call this API after configuring DMA best</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>spi sent and receive data count(word unit), not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in busy status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="192" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="1063" bodyend="1089" declfile="components/spi/hpm_spi.h" declline="192" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1af51f2d625f9f8cabd4fa24da120d43a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_receive_setup_dma</definition>
        <argsstring>(SPI_Type *ptr, uint32_t size)</argsstring>
        <name>hpm_spi_receive_setup_dma</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>receive setup dma for spi </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>it&apos;s no command/address/token phase, only data phase. main configuration spi dma related, call this API after configuring DMA best</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>spi receive data count(word unit), not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in busy status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="204" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="1091" bodyend="1114" declfile="components/spi/hpm_spi.h" declline="204" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="hpm__spi_8h_1aed8707ac71bf311625d7eb709b18f20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t hpm_spi_transmit_setup_dma</definition>
        <argsstring>(SPI_Type *ptr, uint32_t size)</argsstring>
        <name>hpm_spi_transmit_setup_dma</name>
        <param>
          <type><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>transmit setup dma for spi </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>it&apos;s no command/address/token phase, only data phase. main configuration spi dma related, call this API after configuring DMA best</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>spi transmit data count(word unit), not greater than SPI_SOC_TRANSFER_COUNT_MAX </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>status_success if spi in busy status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/spi/hpm_spi.h" line="216" column="12" bodyfile="components/spi/hpm_spi.c" bodystart="1116" bodyend="1142" declfile="components/spi/hpm_spi.h" declline="216" declcolumn="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_COMPONENT_SPI_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_COMPONENT_SPI_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__common_8h" kindref="compound">hpm_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__spi__drv_8h" kindref="compound">hpm_spi_drv.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HPMSOC_HAS_HPMSDK_DMAV2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__dmav2__drv_8h" kindref="compound">hpm_dmav2_drv.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__dma__drv_8h" kindref="compound">hpm_dma_drv.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__dmamux__drv_8h" kindref="compound">hpm_dmamux_drv.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_misc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__l1c__drv_8h" kindref="compound">hpm_l1c_drv.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SPI_CS_ACTIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="hpm__spi_8h_1a3bfce6edc450d433df797c134fb21528" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_CS_ACTIVE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="hpm__spi_8h_1ad30f59bc64772b88a4178b1e62946db7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_DMA_MGR<sp/><sp/><sp/><sp/><sp/><sp/>(0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__dma__mgr_8h" kindref="compound">hpm_dma_mgr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Every<sp/>transaction<sp/>can<sp/>be<sp/>delineated<sp/>by<sp/>3<sp/>dma<sp/>descriptions:<sp/>SPI<sp/>control,<sp/>SPI<sp/>cmd,<sp/>SPI<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="hpm__spi_8h_1a7a474e427eb0f84beb8d74c8f7880e61" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPI_DMA_DESC_COUNT_PER_TRANS<sp/><sp/><sp/><sp/>(3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="structspi__dma__context__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="37" refid="structspi__dma__context__t_1a5771c065bf3808b0498b98a09d8939bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__dma__interface_1gad318c67c9687e5174692025c50e8721c" kindref="member">DMA_Type</ref><sp/>*<ref refid="structspi__dma__context__t_1a5771c065bf3808b0498b98a09d8939bd" kindref="member">dma_ptr</ref>;</highlight></codeline>
<codeline lineno="38" refid="structspi__dma__context__t_1a14b616bd7dcdbc12733bbef81b374bd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDMAMUX__Type" kindref="compound">DMAMUX_Type</ref><sp/>*<ref refid="structspi__dma__context__t_1a14b616bd7dcdbc12733bbef81b374bd6" kindref="member">dmamux_ptr</ref>;</highlight></codeline>
<codeline lineno="39" refid="structspi__dma__context__t_1a9adb724e2d142430b7987e6db53eca38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__dma__context__t_1a9adb724e2d142430b7987e6db53eca38" kindref="member">rx_dma_ch</ref>;</highlight></codeline>
<codeline lineno="40" refid="structspi__dma__context__t_1aee93353471110d9fbd6cad5aed40b3ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__dma__context__t_1aee93353471110d9fbd6cad5aed40b3ff" kindref="member">tx_dma_ch</ref>;</highlight></codeline>
<codeline lineno="41" refid="structspi__dma__context__t_1a8bb78488bae5dabd2b73a2ea88eb525c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__dma__context__t_1a8bb78488bae5dabd2b73a2ea88eb525c" kindref="member">rx_dmamux_ch</ref>;</highlight></codeline>
<codeline lineno="42" refid="structspi__dma__context__t_1a2f89e5926d0822a72d4a2c6623896872" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__dma__context__t_1a2f89e5926d0822a72d4a2c6623896872" kindref="member">tx_dmamux_ch</ref>;</highlight></codeline>
<codeline lineno="43" refid="structspi__dma__context__t_1a41344a054c90d92301225300ed54a89a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__dma__context__t_1a41344a054c90d92301225300ed54a89a" kindref="member">rx_req</ref>;</highlight></codeline>
<codeline lineno="44" refid="structspi__dma__context__t_1af8924375f4c2e47be5f1a2b0dcecc65f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__dma__context__t_1af8924375f4c2e47be5f1a2b0dcecc65f" kindref="member">tx_req</ref>;</highlight></codeline>
<codeline lineno="45" refid="structspi__dma__context__t_1a4371c508d5e2482868381ca603adb223" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__dma__context__t_1a4371c508d5e2482868381ca603adb223" kindref="member">data_width</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}<sp/><ref refid="structspi__dma__context__t" kindref="compound">spi_dma_context_t</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structspi__context__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49" refid="structspi__context__t_1a30ddfb493782c22a50eefdfa1b95f4c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*<ref refid="structspi__context__t_1a30ddfb493782c22a50eefdfa1b95f4c1" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="50" refid="structspi__context__t_1abb2a09bc6e322f4076ffecf73b6a70d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structspi__context__t_1abb2a09bc6e322f4076ffecf73b6a70d1" kindref="member">cs_pin</ref>;</highlight></codeline>
<codeline lineno="51" refid="structspi__context__t_1aedfe9bf2c53a95234b833c353e814ef4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__context__t_1aedfe9bf2c53a95234b833c353e814ef4" kindref="member">cmd</ref>;</highlight></codeline>
<codeline lineno="52" refid="structspi__context__t_1a2e4eb93158844c83d2ac49f9df5e97e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="structspi__context__t_1a2e4eb93158844c83d2ac49f9df5e97e8" kindref="member">rx_buff</ref>;</highlight></codeline>
<codeline lineno="53" refid="structspi__context__t_1ada4dbd11c7d2478716a0a9422d274b6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="structspi__context__t_1ada4dbd11c7d2478716a0a9422d274b6a" kindref="member">tx_buff</ref>;</highlight></codeline>
<codeline lineno="54" refid="structspi__context__t_1a64ffebc0d2f1026098f2dd50e40a331b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__context__t_1a64ffebc0d2f1026098f2dd50e40a331b" kindref="member">running_core</ref>;</highlight></codeline>
<codeline lineno="55" refid="structspi__context__t_1ab15b64e749612bddb455e573c21eb76b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structspi__context__t_1ab15b64e749612bddb455e573c21eb76b" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="56" refid="structspi__context__t_1a5d86804ca3e61c2e9a7b54fe56eb0cf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structspi__context__t_1a5d86804ca3e61c2e9a7b54fe56eb0cf1" kindref="member">rx_size</ref>;</highlight></codeline>
<codeline lineno="57" refid="structspi__context__t_1a0bef4c2989cce6565f9b0a6f12f45935" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structspi__context__t_1a0bef4c2989cce6565f9b0a6f12f45935" kindref="member">rx_count</ref>;</highlight></codeline>
<codeline lineno="58" refid="structspi__context__t_1a612a828ae8c3e7c5aa92ae7594ba8c30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structspi__context__t_1a612a828ae8c3e7c5aa92ae7594ba8c30" kindref="member">tx_size</ref>;</highlight></codeline>
<codeline lineno="59" refid="structspi__context__t_1acd813ecf4960a163dd5c72b6125491a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structspi__context__t_1acd813ecf4960a163dd5c72b6125491a1" kindref="member">tx_count</ref>;</highlight></codeline>
<codeline lineno="60" refid="structspi__context__t_1a6cd551af075a3e57b01af674be35c730" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structspi__context__t_1a6cd551af075a3e57b01af674be35c730" kindref="member">data_len_in_byte</ref>;</highlight></codeline>
<codeline lineno="61" refid="structspi__context__t_1a7afa1bfd3d6fbec4b43a0ca44561ae61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structspi__context__t_1a7afa1bfd3d6fbec4b43a0ca44561ae61" kindref="member">per_trans_max</ref>;</highlight></codeline>
<codeline lineno="62" refid="structspi__context__t_1a2135f987d871715089da5e363986348e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*<ref refid="structspi__context__t_1a2135f987d871715089da5e363986348e" kindref="member">spi_transctrl</ref>;</highlight></codeline>
<codeline lineno="63" refid="structspi__context__t_1aa712a90382312565e8542312411999de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="structspi__context__t_1aa712a90382312565e8542312411999de" kindref="member">write_cs</ref>)(uint32_t<sp/><ref refid="structspi__context__t_1abb2a09bc6e322f4076ffecf73b6a70d1" kindref="member">cs_pin</ref>,<sp/>uint8_t<sp/>state);</highlight></codeline>
<codeline lineno="64" refid="structspi__context__t_1a22c48ae3d492e39281aac16e101aca87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspi__dma__context__t" kindref="compound">spi_dma_context_t</ref><sp/><ref refid="structspi__context__t_1a22c48ae3d492e39281aac16e101aca87" kindref="member">dma_context</ref>;</highlight></codeline>
<codeline lineno="65" refid="structspi__context__t_1a1d306eaa8261c3a261dfd50feb7b1155" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__dma__interface_1ga6978af946aa984b0e6e73e14061b0dfa" kindref="member">dma_linked_descriptor_t</ref><sp/>*<ref refid="structspi__context__t_1a1d306eaa8261c3a261dfd50feb7b1155" kindref="member">dma_linked_descriptor</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/><ref refid="structspi__context__t" kindref="compound">spi_context_t</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structspi__initialize__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72" refid="structspi__initialize__config__t_1a36024fa308c25c04377cd1f45873d1a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__spi__interface_1ga9ac2dd2dcd0b2c3b5fb1363eac489a3e" kindref="member">spi_mode_selection_t</ref><sp/><ref refid="structspi__initialize__config__t_1a36024fa308c25c04377cd1f45873d1a5" kindref="member">mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="structspi__initialize__config__t_1a821308e984e195aa037f778b54c64b32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__spi__interface_1gafff636ea73cfd28e417690fcfcacc5f9" kindref="member">spi_data_phase_format_t</ref><sp/><ref refid="structspi__initialize__config__t_1a821308e984e195aa037f778b54c64b32" kindref="member">io_mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="structspi__initialize__config__t_1af647f14f4f4721f8375d67ea0aaee5b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__spi__interface_1gaa216e00c4ce27ab3897a36c72e617968" kindref="member">spi_sclk_idle_state_t</ref><sp/><ref refid="structspi__initialize__config__t_1af647f14f4f4721f8375d67ea0aaee5b7" kindref="member">clk_polarity</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75" refid="structspi__initialize__config__t_1a3846994ed05be651c5f0e3f3284e6e5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__spi__interface_1gab063d70616d6d55c73b01e9a1d2fb162" kindref="member">spi_sclk_sampling_clk_edges_t</ref><sp/><ref refid="structspi__initialize__config__t_1a3846994ed05be651c5f0e3f3284e6e5b" kindref="member">clk_phase</ref>;<sp/></highlight></codeline>
<codeline lineno="76" refid="structspi__initialize__config__t_1a6c638f1ccc49b4a5473f26259fadeaea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__spi__interface_1gaa68518c16202382c2e1f1c7c66a9d53d" kindref="member">spi_shift_direction_t</ref><sp/><ref refid="structspi__initialize__config__t_1a6c638f1ccc49b4a5473f26259fadeaea" kindref="member">direction</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77" refid="structspi__initialize__config__t_1ae4d480b562f4e14812815edd0c65c052" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structspi__initialize__config__t_1ae4d480b562f4e14812815edd0c65c052" kindref="member">data_len</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78" refid="structspi__initialize__config__t_1a730b2dc871550aee1cbc0b1f08759579" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structspi__initialize__config__t_1a730b2dc871550aee1cbc0b1f08759579" kindref="member">data_merge</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal">}<sp/><ref refid="structspi__initialize__config__t" kindref="compound">spi_initialize_config_t</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_DMA_MGR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*spi_dma_complete_cb)(uint32_t<sp/>channel);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1aa5040a4e4d8a2e6010f213de252805e8" kindref="member">hpm_spi_setup_dma_transfer</ref>(<ref refid="structspi__context__t" kindref="compound">spi_context_t</ref><sp/>*context,<sp/><ref refid="structspi__control__config__t" kindref="compound">spi_control_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>SPI<sp/>release<sp/>gpio<sp/>pin<sp/>if<sp/>gpio<sp/>use<sp/>for<sp/>SPI<sp/>CS<sp/>function</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1a7ffc36e67d61727ac713636186e72aaf" kindref="member">hpm_spi_release_gpio_cs</ref>(<ref refid="structspi__context__t" kindref="compound">spi_context_t</ref><sp/>*context);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hpm__spi_8h_1a92749b87848c44cdf2f7e05cd72baf13" kindref="member">hpm_spi_get_default_init_config</ref>(<ref refid="structspi__initialize__config__t" kindref="compound">spi_initialize_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1a926606c43a217dca6c6afad012649427" kindref="member">hpm_spi_initialize</ref>(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/><ref refid="structspi__initialize__config__t" kindref="compound">spi_initialize_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1a00ef064bb3d9b8e462cdf726af9c59a2" kindref="member">hpm_spi_set_sclk_frequency</ref>(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint32_t<sp/>freq);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1a9a55e3ff764f95c85faa338092092f72" kindref="member">hpm_spi_transmit_receive_blocking</ref>(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>*wbuff,<sp/>uint8_t<sp/>*rbuff,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1aa9a47638d853a478222752ac26b04734" kindref="member">hpm_spi_receive_blocking</ref>(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>*buff,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1a231f68025831b83e5309dc16e9dd7835" kindref="member">hpm_spi_transmit_blocking</ref>(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>*buff,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1adaf0db9df572cb84e05ad13b23627521" kindref="member">hpm_spi_transmit_receive_setup_dma</ref>(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1af51f2d625f9f8cabd4fa24da120d43a6" kindref="member">hpm_spi_receive_setup_dma</ref>(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="hpm__spi_8h_1aed8707ac71bf311625d7eb709b18f20c" kindref="member">hpm_spi_transmit_setup_dma</ref>(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_DMA_MGR</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_spi_dma_mgr_install_callback(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spi_dma_complete_cb<sp/>tx_complete,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spi_dma_complete_cb<sp/>rx_complete);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_spi_transmit_receive_nonblocking(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>*wbuff,<sp/>uint8_t<sp/>*rbuff,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_spi_receive_nonblocking(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>*buff,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>hpm_spi_transmit_nonblocking(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>*buff,<sp/>uint32_t<sp/><ref refid="group__nnactivation_1gaf8fd9ce16b371c8a3bf5e0b37a69419f" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><ref refid="hpm__dma__mgr_8h_1a2cb29626236e022cced99f3e498d18eb" kindref="member">dma_resource_t</ref><sp/>*hpm_spi_get_tx_dma_resource(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><ref refid="hpm__dma__mgr_8h_1a2cb29626236e022cced99f3e498d18eb" kindref="member">dma_resource_t</ref><sp/>*hpm_spi_get_rx_dma_resource(<ref refid="structSPI__Type" kindref="compound">SPI_Type</ref><sp/>*ptr);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HPM_COMPONENT_SPI_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="components/spi/hpm_spi.h"/>
  </compounddef>
</doxygen>
