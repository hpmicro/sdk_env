<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="group__uart__interface" kind="group">
    <compoundname>uart_interface</compoundname>
    <title>UART driver APIs</title>
    <innerclass refid="structuart__modem__config" prot="public">uart_modem_config</innerclass>
    <innerclass refid="structhpm__uart__rxline__idle__detect__config" prot="public">hpm_uart_rxline_idle_detect_config</innerclass>
    <innerclass refid="structhpm__uart__config" prot="public">hpm_uart_config</innerclass>
    <innerclass refid="structuart__trig__config__t" prot="public">uart_trig_config_t</innerclass>
    <innerclass refid="structuart__fifo__ctrl__t" prot="public">uart_fifo_ctrl_t</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="group__uart__interface_1gabdbe1b61b92d0c9a04030534a1aadc3b" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <enumvalue id="group__uart__interface_1ggabdbe1b61b92d0c9a04030534a1aadc3badffac1505396eaee4888bd9ae472a6c7" prot="public">
          <name>status_uart_no_suitable_baudrate_parameter_found</name>
          <initializer>=  ((uint32_t)(status_group_uart)*1000U + (uint32_t)(1))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="25" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1ga62d49d97117baa12d4ccc139f067ffdb" prot="public" static="no" strong="no">
        <type></type>
        <name>parity</name>
        <enumvalue id="group__uart__interface_1gga62d49d97117baa12d4ccc139f067ffdba04358fc59b50f56f91782b3fc27d3d59" prot="public">
          <name>parity_none</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga62d49d97117baa12d4ccc139f067ffdba78884e92b60a3165809a7154c43c7553" prot="public">
          <name>parity_odd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga62d49d97117baa12d4ccc139f067ffdba5cb4b75f894a3c676ad9e7b0c45ed8ab" prot="public">
          <name>parity_even</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga62d49d97117baa12d4ccc139f067ffdba1b355283ef543f5e4c2075ca903fd343" prot="public">
          <name>parity_always_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga62d49d97117baa12d4ccc139f067ffdbab02f20d67445cf39cfa6be832fbc76bd" prot="public">
          <name>parity_always_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="30" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="30" bodyend="36"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1ga9e23a53453170c361033984d8b1a35d5" prot="public" static="no" strong="no">
        <type></type>
        <name>num_of_stop_bits</name>
        <enumvalue id="group__uart__interface_1gga9e23a53453170c361033984d8b1a35d5aea231f5ce8b7fea0c8281f4d62bde700" prot="public">
          <name>stop_bits_1</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga9e23a53453170c361033984d8b1a35d5a8e99e321c22e74f16dc2b8d015591cfc" prot="public">
          <name>stop_bits_1_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga9e23a53453170c361033984d8b1a35d5acb65dd0546279d42bcecaaefeb5119fe" prot="public">
          <name>stop_bits_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="39" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1ga8e10134c44d58d5aaac6766dc3839470" prot="public" static="no" strong="no">
        <type></type>
        <name>word_length</name>
        <enumvalue id="group__uart__interface_1gga8e10134c44d58d5aaac6766dc3839470a0a5ad6030b3c7dba58e1fb77df6f4994" prot="public">
          <name>word_length_5_bits</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga8e10134c44d58d5aaac6766dc3839470a6723f5f85ba7deb5bb26c4ce7a12bc26" prot="public">
          <name>word_length_6_bits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga8e10134c44d58d5aaac6766dc3839470a58cdbc6af14039056c1de71d73bdd171" prot="public">
          <name>word_length_7_bits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga8e10134c44d58d5aaac6766dc3839470a76b3c9287233f889f62a2a473a10e681" prot="public">
          <name>word_length_8_bits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="46" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1gab9222e6dc6113fae53f22b2a9ff9d2c7" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_fifo_trg_lvl</name>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7af13bc3cd084fe5fb34573972716fa08c" prot="public">
          <name>uart_fifo_1_byte</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a9613662b5423271984ecbcccf7d4f7bb" prot="public">
          <name>uart_fifo_2_bytes</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a6f0a7dee0d5144c7c5610a078daaef74" prot="public">
          <name>uart_fifo_3_bytes</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a66472693576864062bde5af1fd4a7e9a" prot="public">
          <name>uart_fifo_4_bytes</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a6ada633e48fe2f012a18ec29cb6b58d0" prot="public">
          <name>uart_fifo_5_bytes</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7af6b349383b186f1de47a1515205c6ec1" prot="public">
          <name>uart_fifo_6_bytes</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a215817cde49dc738817a0c019cce82a6" prot="public">
          <name>uart_fifo_7_bytes</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a7be486c8ea801f6c409425005bf4c8e2" prot="public">
          <name>uart_fifo_8_bytes</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a23497211b036abdabf71a6fe67c3a29b" prot="public">
          <name>uart_fifo_9_bytes</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a5ce159952093a740ecbdf484c350f674" prot="public">
          <name>uart_fifo_10_bytes</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a250b6d4dcd5d5e9dc0df38553b7e3227" prot="public">
          <name>uart_fifo_11_bytes</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a48166e71a3d09c924737ae368171d2ca" prot="public">
          <name>uart_fifo_12_bytes</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7ae7202368a22a491d104193c36f10f01d" prot="public">
          <name>uart_fifo_13_bytes</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a7c47d802e27602910b519aad5072aa7b" prot="public">
          <name>uart_fifo_14_bytes</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a8168f40a3f4af04b996cc716d072a049" prot="public">
          <name>uart_fifo_15_bytes</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a0dd116e2b339577654a91c1d83605387" prot="public">
          <name>uart_fifo_16_bytes</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a6b7b377e62d602afec00feea2db319dc" prot="public">
          <name>uart_fifo_17_bytes</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a51a04fbc3d6e400606edb54f297d741e" prot="public">
          <name>uart_fifo_18_bytes</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a6c0837ab33d831dc4594dc6c7b0041e8" prot="public">
          <name>uart_fifo_19_bytes</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a87629e8c96199ecd62fca13cd1fa25df" prot="public">
          <name>uart_fifo_20_bytes</name>
          <initializer>= 19</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a1e60fe773bff98e54ba63abb5588ef62" prot="public">
          <name>uart_fifo_21_bytes</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a64ddf4adc7fd5937644901a60e47f852" prot="public">
          <name>uart_fifo_22_bytes</name>
          <initializer>= 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a5919640f64a1b53e1952aa9ddcea1fef" prot="public">
          <name>uart_fifo_23_bytes</name>
          <initializer>= 22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a6a1021f2d14c8188cbd65e0dda6828c3" prot="public">
          <name>uart_fifo_24_bytes</name>
          <initializer>= 23</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7aa116a0aff9f5364afcf8e5327fd3c501" prot="public">
          <name>uart_fifo_25_bytes</name>
          <initializer>= 24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7aad2b9435a69385069a6f67ab38f202b1" prot="public">
          <name>uart_fifo_26_bytes</name>
          <initializer>= 25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a15394ffe96e54a44fa73e516b477e88a" prot="public">
          <name>uart_fifo_27_bytes</name>
          <initializer>= 26</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a264de1b34200ab20c9e750889fc08313" prot="public">
          <name>uart_fifo_28_bytes</name>
          <initializer>= 27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7ab4a872937cee79b471189f5204f82fed" prot="public">
          <name>uart_fifo_29_bytes</name>
          <initializer>= 28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a99030fadb55dfa8b75f12cac07e42f6d" prot="public">
          <name>uart_fifo_30_bytes</name>
          <initializer>= 29</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7ad1a03971795ad4a853875a0b396bb287" prot="public">
          <name>uart_fifo_31_bytes</name>
          <initializer>= 30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a6d2557f42a5a07e5043a93fe8a5e86b5" prot="public">
          <name>uart_fifo_32_bytes</name>
          <initializer>= 31</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a6f1cffe4ea6c19c9ae205d7be127a197" prot="public">
          <name>uart_rx_fifo_trg_not_empty</name>
          <initializer>= uart_fifo_1_byte</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7ac95a2c95e1492c8daf0405c279578b98" prot="public">
          <name>uart_rx_fifo_trg_gt_one_quarter</name>
          <initializer>= (UART_SOC_FIFO_SIZE / 4) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7ab7fa24ea11b417f5e69b446c23ce769c" prot="public">
          <name>uart_rx_fifo_trg_gt_half</name>
          <initializer>= (UART_SOC_FIFO_SIZE / 2) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a4ada52883966adf8971f5fc34e9e607c" prot="public">
          <name>uart_rx_fifo_trg_gt_three_quarters</name>
          <initializer>= ((UART_SOC_FIFO_SIZE * 3) / 4) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7ac565e966f4fc5e46f4e5ccaf69048a03" prot="public">
          <name>uart_tx_fifo_trg_not_full</name>
          <initializer>= UART_SOC_FIFO_SIZE - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a44b2855904f8f5c8bc99d287cbf9869b" prot="public">
          <name>uart_tx_fifo_trg_lt_three_quarters</name>
          <initializer>= ((UART_SOC_FIFO_SIZE * 3) / 4) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a54ea7ec92faf723dc2c0ec58b6a354e7" prot="public">
          <name>uart_tx_fifo_trg_lt_half</name>
          <initializer>= (UART_SOC_FIFO_SIZE / 2) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggab9222e6dc6113fae53f22b2a9ff9d2c7a36cc83ca8d36bff54a906eb4e57f3f0a" prot="public">
          <name>uart_tx_fifo_trg_lt_one_quarter</name>
          <initializer>= (UART_SOC_FIFO_SIZE / 4) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="54" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="54" bodyend="109"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1ga220cda07557601c8c38396a5d3a3b079" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_signal</name>
        <enumvalue id="group__uart__interface_1gga220cda07557601c8c38396a5d3a3b079a637d96dcb51b0709c8b6b4da59940a24" prot="public">
          <name>uart_signal_rts</name>
          <initializer>= UART_MCR_RTS_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="112" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1ga8a6ae7a8f0fd961a78c29b21b0cba825" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_signal_level</name>
        <enumvalue id="group__uart__interface_1gga8a6ae7a8f0fd961a78c29b21b0cba825af67dad668e27023c2f4b37ded1ce27eb" prot="public">
          <name>uart_signal_level_high</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga8a6ae7a8f0fd961a78c29b21b0cba825a9a4e38f9e185706b833f04b1fe917c6d" prot="public">
          <name>uart_signal_level_low</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="117" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1ga3f7f43fe89ed2ed5cddbd795e0996dad" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_modem_stat</name>
        <enumvalue id="group__uart__interface_1gga3f7f43fe89ed2ed5cddbd795e0996dada26dbb12387e3347707e96ad8710b4965" prot="public">
          <name>uart_modem_stat_cts</name>
          <initializer>= UART_MSR_CTS_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga3f7f43fe89ed2ed5cddbd795e0996dada8dd588e65389f2a2ae6905768f7b754f" prot="public">
          <name>uart_modem_stat_dcts_changed</name>
          <initializer>= UART_MSR_DCTS_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="123" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1gafdf46ac9b8dcf832ba5df342c1b23c9b" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_intr_enable</name>
        <enumvalue id="group__uart__interface_1ggafdf46ac9b8dcf832ba5df342c1b23c9ba2e4b3eb6c1d235ef6e3b7e72cc431f3d" prot="public">
          <name>uart_intr_rx_data_avail_or_timeout</name>
          <initializer>= UART_IER_ERBI_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafdf46ac9b8dcf832ba5df342c1b23c9bace0d4b3eef18fb92066fb2d4bfe19266" prot="public">
          <name>uart_intr_tx_slot_avail</name>
          <initializer>= UART_IER_ETHEI_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafdf46ac9b8dcf832ba5df342c1b23c9ba96d2df64fe21163f1b4cd989318b831e" prot="public">
          <name>uart_intr_rx_line_stat</name>
          <initializer>= UART_IER_ELSI_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafdf46ac9b8dcf832ba5df342c1b23c9ba391905334ba52f05f74d1373af2173d4" prot="public">
          <name>uart_intr_modem_stat</name>
          <initializer>= UART_IER_EMSI_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafdf46ac9b8dcf832ba5df342c1b23c9baf2a0ccc5dc2d9677cb02232e07fa6517" prot="public">
          <name>uart_intr_rx_line_idle</name>
          <initializer>= UART_IER_ERXIDLE_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafdf46ac9b8dcf832ba5df342c1b23c9bae6e53c9c7826369e8e676b951c9cefe4" prot="public">
          <name>uart_intr_tx_line_idle</name>
          <initializer>= UART_IER_ETXIDLE_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafdf46ac9b8dcf832ba5df342c1b23c9bab8edf740cc358550b9c596022b30902c" prot="public">
          <name>uart_intr_addr_match</name>
          <initializer>= UART_IER_EADDRM_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafdf46ac9b8dcf832ba5df342c1b23c9bad33ee408e85c7458d173322fa8ead36d" prot="public">
          <name>uart_intr_addr_match_and_rxidle</name>
          <initializer>= UART_IER_EADDRM_IDLE_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggafdf46ac9b8dcf832ba5df342c1b23c9ba26547259d9d713b5ab821073faa54283" prot="public">
          <name>uart_intr_addr_datalost</name>
          <initializer>= UART_IER_EDATLOST_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="129" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="129" bodyend="152"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1ga58a6e347890a53e259874066f606b4bf" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_intr_id</name>
        <enumvalue id="group__uart__interface_1gga58a6e347890a53e259874066f606b4bfacbd3cdc75c23f80acb3e1df6adf950f3" prot="public">
          <name>uart_intr_id_modem_stat</name>
          <initializer>= 0x0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga58a6e347890a53e259874066f606b4bfa032a75bd2ad5b515cf4fd8d814436c16" prot="public">
          <name>uart_intr_id_tx_slot_avail</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga58a6e347890a53e259874066f606b4bfa60e236cc9e771781c98a28c8db33b64d" prot="public">
          <name>uart_intr_id_rx_data_avail</name>
          <initializer>= 0x4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga58a6e347890a53e259874066f606b4bfa64610ff91979647c59a401db633c938b" prot="public">
          <name>uart_intr_id_rx_line_stat</name>
          <initializer>= 0x6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga58a6e347890a53e259874066f606b4bfae92258996389f563f03bac14adb3d480" prot="public">
          <name>uart_intr_id_rx_timeout</name>
          <initializer>= 0xc</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="155" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1gae69840830cbc90d093d4aea69262a84c" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_stat</name>
        <enumvalue id="group__uart__interface_1ggae69840830cbc90d093d4aea69262a84caa61ec4d2a870a8933cc0445ffab4572b" prot="public">
          <name>uart_stat_data_ready</name>
          <initializer>= UART_LSR_DR_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggae69840830cbc90d093d4aea69262a84ca1bf1f25a386629821cdff3192c5e2d73" prot="public">
          <name>uart_stat_overrun_error</name>
          <initializer>= UART_LSR_OE_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggae69840830cbc90d093d4aea69262a84ca4b94645bf47d5b541cdfdc848257681a" prot="public">
          <name>uart_stat_parity_error</name>
          <initializer>= UART_LSR_PE_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggae69840830cbc90d093d4aea69262a84cae6fac262e890e8dc76d1583aa17b4237" prot="public">
          <name>uart_stat_framing_error</name>
          <initializer>= UART_LSR_FE_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggae69840830cbc90d093d4aea69262a84ca99c7ee3f02dfcc2826624e32d871d080" prot="public">
          <name>uart_stat_line_break</name>
          <initializer>= UART_LSR_LBREAK_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggae69840830cbc90d093d4aea69262a84ca758c013e2530153ed9ae570749a90fab" prot="public">
          <name>uart_stat_tx_slot_avail</name>
          <initializer>= UART_LSR_THRE_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggae69840830cbc90d093d4aea69262a84ca501bbcc9ea25253ae2fe7a79448e4387" prot="public">
          <name>uart_stat_transmitter_empty</name>
          <initializer>= UART_LSR_TEMT_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1ggae69840830cbc90d093d4aea69262a84cad75a50e9412a3c858266ac76d248b882" prot="public">
          <name>uart_stat_rx_fifo_error</name>
          <initializer>= UART_LSR_ERRF_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="164" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="164" bodyend="173"/>
      </memberdef>
      <memberdef kind="enum" id="group__uart__interface_1ga731be137b0fc694d12e1938d047caa09" prot="public" static="no" strong="no">
        <type></type>
        <name>hpm_uart_rxline_idle_cond</name>
        <enumvalue id="group__uart__interface_1gga731be137b0fc694d12e1938d047caa09aee7f16d64a1502d6de94ae173a004c64" prot="public">
          <name>uart_rxline_idle_cond_rxline_logic_one</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Treat as idle if the RX Line high duration exceeds threshold </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__uart__interface_1gga731be137b0fc694d12e1938d047caa09abb18130e1bfbfd73ee242d180e49ba64" prot="public">
          <name>uart_rxline_idle_cond_state_machine_idle</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Treat as idle if the RX state machine idle state duration exceeds threshold </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART Idle detection conditions， suitable for RX and TX. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="188" column="1" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="188" bodyend="191"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__uart__interface_1gacf0c7c4f2c7afe3e492a076b063ba8fb" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1ga62d49d97117baa12d4ccc139f067ffdb" kindref="member">parity</ref></type>
        <definition>typedef enum parity parity_setting_t</definition>
        <argsstring></argsstring>
        <name>parity_setting_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="36" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga0e9cf62ddb629fddc626b3dfd671e5b3" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1ga9e23a53453170c361033984d8b1a35d5" kindref="member">num_of_stop_bits</ref></type>
        <definition>typedef enum num_of_stop_bits num_of_stop_bits_t</definition>
        <argsstring></argsstring>
        <name>num_of_stop_bits_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="43" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga50f85e080d19ed16e340907c20b18d39" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1ga8e10134c44d58d5aaac6766dc3839470" kindref="member">word_length</ref></type>
        <definition>typedef enum word_length word_length_t</definition>
        <argsstring></argsstring>
        <name>word_length_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="51" column="15"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1gad13634526fc8548d06874f590e9793d8" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1gab9222e6dc6113fae53f22b2a9ff9d2c7" kindref="member">uart_fifo_trg_lvl</ref></type>
        <definition>typedef enum uart_fifo_trg_lvl uart_fifo_trg_lvl_t</definition>
        <argsstring></argsstring>
        <name>uart_fifo_trg_lvl_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="109" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1gaabeb807de70635ecab1bc70dd6db895f" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1ga220cda07557601c8c38396a5d3a3b079" kindref="member">uart_signal</ref></type>
        <definition>typedef enum uart_signal uart_signal_t</definition>
        <argsstring></argsstring>
        <name>uart_signal_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="114" column="15"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga9e7c512e46b16def679a98e7832818d9" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1ga8a6ae7a8f0fd961a78c29b21b0cba825" kindref="member">uart_signal_level</ref></type>
        <definition>typedef enum uart_signal_level uart_signal_level_t</definition>
        <argsstring></argsstring>
        <name>uart_signal_level_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="120" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga7193376f1dd0e742c86cba09fc09dc72" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1ga3f7f43fe89ed2ed5cddbd795e0996dad" kindref="member">uart_modem_stat</ref></type>
        <definition>typedef enum uart_modem_stat uart_modem_stat_t</definition>
        <argsstring></argsstring>
        <name>uart_modem_stat_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="126" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga26fe1738c0fb0122b64f57928d27b82f" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1gafdf46ac9b8dcf832ba5df342c1b23c9b" kindref="member">uart_intr_enable</ref></type>
        <definition>typedef enum uart_intr_enable uart_intr_enable_t</definition>
        <argsstring></argsstring>
        <name>uart_intr_enable_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="152" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga499e839cf867beddeff6f543e109277b" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1ga58a6e347890a53e259874066f606b4bf" kindref="member">uart_intr_id</ref></type>
        <definition>typedef enum uart_intr_id uart_intr_id_t</definition>
        <argsstring></argsstring>
        <name>uart_intr_id_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="161" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga659e30f9f0a4734cae0990ff25eb455b" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1gae69840830cbc90d093d4aea69262a84c" kindref="member">uart_stat</ref></type>
        <definition>typedef enum uart_stat uart_stat_t</definition>
        <argsstring></argsstring>
        <name>uart_stat_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="173" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga97f81e6bef61a4096dc265159830868f" prot="public" static="no">
        <type>struct <ref refid="structuart__modem__config" kindref="compound">uart_modem_config</ref></type>
        <definition>typedef struct uart_modem_config uart_modem_config_t</definition>
        <argsstring></argsstring>
        <name>uart_modem_config_t</name>
        <briefdescription>
<para>UART modem config. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="182" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga41664090b5fd7f71fb4aef3d73a89753" prot="public" static="no">
        <type>enum <ref refid="group__uart__interface_1ga731be137b0fc694d12e1938d047caa09" kindref="member">hpm_uart_rxline_idle_cond</ref></type>
        <definition>typedef enum hpm_uart_rxline_idle_cond uart_rxline_idle_cond_t</definition>
        <argsstring></argsstring>
        <name>uart_rxline_idle_cond_t</name>
        <briefdescription>
<para>UART Idle detection conditions， suitable for RX and TX. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="191" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1gab0b5ad2aa01b3f5a9f2d59c5f7651e4d" prot="public" static="no">
        <type>struct <ref refid="structhpm__uart__rxline__idle__detect__config" kindref="compound">hpm_uart_rxline_idle_detect_config</ref></type>
        <definition>typedef struct hpm_uart_rxline_idle_detect_config uart_rxline_idle_config_t</definition>
        <argsstring></argsstring>
        <name>uart_rxline_idle_config_t</name>
        <briefdescription>
<para>UART Idle config， suitable for RX and TX. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="201" column="27"/>
      </memberdef>
      <memberdef kind="typedef" id="group__uart__interface_1ga7cceb603b2efe4f7c89b9bfd2bc47ecf" prot="public" static="no">
        <type>struct <ref refid="structhpm__uart__config" kindref="compound">hpm_uart_config</ref></type>
        <definition>typedef struct hpm_uart_config uart_config_t</definition>
        <argsstring></argsstring>
        <name>uart_config_t</name>
        <briefdescription>
<para>UART config. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="227" column="15"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__uart__interface_1gaa65184764bf5df97e4d4c1b71594c0c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t uart_get_fifo_size</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_get_fifo_size</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get fifo size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>of Fifo </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="258" column="23" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gad0a47c54b7355be64a015c9190f144ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_config_fifo_ctrl</definition>
        <argsstring>(UART_Type *ptr, uart_fifo_ctrl_t *ctrl)</argsstring>
        <name>uart_config_fifo_ctrl</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structuart__fifo__ctrl__t" kindref="compound">uart_fifo_ctrl_t</ref> *</type>
          <declname>ctrl</declname>
        </param>
        <briefdescription>
<para>uart config fifo control </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>fifo control register(FCR) is WO access, if support FCCR register, it is RW access.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctrl</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structuart__fifo__ctrl__t" kindref="compound">uart_fifo_ctrl_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="271" column="6" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="371" bodyend="397" declfile="drivers/inc/hpm_uart_drv.h" declline="271" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gaec3304a6c8ae9bfb4be835468a289a59" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_clear_rx_fifo</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_clear_rx_fifo</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>uart clear rx fifo by reading data </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>read out all data in rx fifo, the uart_intr_rx_data_avail_or_timeout is cleared when RBR register is read</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="281" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="281" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga6166a93a0a8a25e6e43ad2fbe30eb53e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_enable_rx_function</definition>
        <argsstring>(UART_Type *ptr, bool enable)</argsstring>
        <name>uart_enable_rx_function</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="289" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="289" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga891f38cd380c7201994d8b0d01226cb3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_reset_tx_fifo</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_reset_tx_fifo</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Reset TX Fifo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="304" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="304" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gabfed39ee2ae835bd4db0ada4ae9b0c5f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_reset_rx_fifo</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_reset_rx_fifo</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Reset RX Fifo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="318" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="318" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gac8d91c4e633bb159373692cfb3bc7657" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_reset_all_fifo</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_reset_all_fifo</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>[in] Reset both TX and RX Fifo </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="332" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="332" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga1626aac0f400b31ab492490cdeff4714" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_modem_enable_loopback</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_modem_enable_loopback</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Enable modem loopback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="346" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gafe3cd88cdbb1b7115ecba4a5550a8ac1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_modem_disable_loopback</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_modem_disable_loopback</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Disable modem loopback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="356" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga309f0389abe77ed3c7777489e7b219f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_modem_disable_auto_flow_control</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_modem_disable_auto_flow_control</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Disable modem auto flow control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="367" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga6c95e7f6553d0ba0aa082c7f89b735d1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_modem_enable_auto_flow_control</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_modem_enable_auto_flow_control</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Enable modem auto flow control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="377" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga9d993e929f5354b792af22346c4f849c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_modem_config</definition>
        <argsstring>(UART_Type *ptr, uart_modem_config_t *config)</argsstring>
        <name>uart_modem_config</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interface_1ga97f81e6bef61a4096dc265159830868f" kindref="member">uart_modem_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure modem. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to modem config struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="388" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="388" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gad82fad940369303d6ff0e4ed44f7cf19" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t uart_get_modem_status</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_get_modem_status</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get modem status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Current</parametername>
</parameternamelist>
<parameterdescription>
<para>modem status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="401" column="23" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="401" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gab90cf78727f9f8907b121cf1b8b1e54f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_write_byte</definition>
        <argsstring>(UART_Type *ptr, uint8_t c)</argsstring>
        <name>uart_write_byte</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Write byte to TX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be sent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="412" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga8c22069f7bfd868e751c8112bbd7feff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t uart_read_byte</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_read_byte</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Read byte from RX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>RX</parametername>
</parameternamelist>
<parameterdescription>
<para>byte </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="424" column="23" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga3cf6d551a9fe711feb1dad72eaa0ffce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool uart_check_modem_status</definition>
        <argsstring>(UART_Type *ptr, uart_modem_stat_t mask)</argsstring>
        <name>uart_check_modem_status</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interface_1ga7193376f1dd0e742c86cba09fc09dc72" kindref="member">uart_modem_stat_t</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Check modem status with given mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Status mask value to be checked against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if any bit in given mask is set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if none of any bit in given mask is set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="437" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="437" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga5542dc3d2bbcb203065048585bffb42a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_disable_irq</definition>
        <argsstring>(UART_Type *ptr, uint32_t irq_mask)</argsstring>
        <name>uart_disable_irq</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>irq_mask</declname>
        </param>
        <briefdescription>
<para>Disable IRQ with mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irq_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ mask value to be disabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="448" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga25b5f068dc45bb1bc93dfe826aba4ce3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_enable_irq</definition>
        <argsstring>(UART_Type *ptr, uint32_t irq_mask)</argsstring>
        <name>uart_enable_irq</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>irq_mask</declname>
        </param>
        <briefdescription>
<para>Enable IRQ with mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>irq_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ mask value to be enabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="459" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gad96eb833f726fd473b656851b8d22b14" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t uart_get_enabled_irq</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_get_enabled_irq</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get Enabled IRQ. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>enabled irq </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="470" column="24" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="470" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga6c4d43f2b88ca2163ca297b4fb3cab40" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t uart_get_irq_id</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_get_irq_id</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get interrupt identification. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>interrupt</parametername>
</parameternamelist>
<parameterdescription>
<para>id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="481" column="23" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="481" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga9429caea0270af2f532cb103525d0622" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_enable_rxline_idle_detection</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_enable_rxline_idle_detection</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Enable UART RX Idle Line detection logic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="515" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="515" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga7711311cd6b7b9f077f7f06a0669f4e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_disable_rxline_idle_detection</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_disable_rxline_idle_detection</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Disable UART RX Idle Line detection logic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="525" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="525" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga96692c0bbcf9d66476f5de2d2bced310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_init_rxline_idle_detection</definition>
        <argsstring>(UART_Type *ptr, uart_rxline_idle_config_t rxidle_config)</argsstring>
        <name>uart_init_rxline_idle_detection</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interface_1gab0b5ad2aa01b3f5a9f2d59c5f7651e4d" kindref="member">uart_rxline_idle_config_t</ref></type>
          <declname>rxidle_config</declname>
        </param>
        <briefdescription>
<para>Configure UART RX Line detection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rxidle_config</parametername>
</parameternamelist>
<parameterdescription>
<para>RXLine IDLE detection configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>if no error occurs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="536" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="319" bodyend="335" declfile="drivers/inc/hpm_uart_drv.h" declline="536" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga5ff67f77e70462bd5589f8d38a857cf5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool uart_is_txline_idle</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_is_txline_idle</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Determine whether UART TX Line is idle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if uart TX line is not idle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="546" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="546" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga61df39458ce0c3d88a35354e494fa685" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_clear_txline_idle_flag</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_clear_txline_idle_flag</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Clear UART TX Line Idle Flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="555" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="555" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gafa93f5e510a61cabb122bddf54be8b96" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool uart_is_rxline_idle</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_is_rxline_idle</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Determine whether UART RX Line is idle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if uart RX line is not idle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="565" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="565" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gaf0fdecf00bc83060937fcfaab3e1b1e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_clear_rxline_idle_flag</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_clear_rxline_idle_flag</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Clear UART RX Line Idle Flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="574" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="574" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga56b9338742b88bc320786b3f14c7872c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_enable_txline_idle_detection</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_enable_txline_idle_detection</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Enable UART TX Idle Line detection logic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="585" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="585" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga40a19cf0a497baed184a778c3aae689c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_disable_txline_idle_detection</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_disable_txline_idle_detection</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Disable UART TX Idle Line detection logic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="595" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="595" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga323776742dda5bf3e3b43fc9304644a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_init_txline_idle_detection</definition>
        <argsstring>(UART_Type *ptr, uart_rxline_idle_config_t txidle_config)</argsstring>
        <name>uart_init_txline_idle_detection</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interface_1gab0b5ad2aa01b3f5a9f2d59c5f7651e4d" kindref="member">uart_rxline_idle_config_t</ref></type>
          <declname>txidle_config</declname>
        </param>
        <briefdescription>
<para>Configure UART TX Line detection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">txidle_config</parametername>
</parameternamelist>
<parameterdescription>
<para>TXLine IDLE detection configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>if no error occurs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="606" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="340" bodyend="356" declfile="drivers/inc/hpm_uart_drv.h" declline="606" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga9db35322a5cdfe44b1c545c7dc9f7a0b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t uart_get_status</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_get_status</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="618" column="24" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="618" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga32beb85fc8636ba328cc024812534676" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool uart_check_status</definition>
        <argsstring>(UART_Type *ptr, uart_stat_t mask)</argsstring>
        <name>uart_check_status</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interface_1ga659e30f9f0a4734cae0990ff25eb455b" kindref="member">uart_stat_t</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Check uart status according to the given status mask. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>maybe clear other bits, such as PE/OE/LBREAK/ERRF bit. use uart_get_status API if you need to get these bits </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Status mask value to be checked against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if any bit in given mask is set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if none of any bit in given mask is set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="632" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="632" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gaa24fd5b844e63e6481f9dc564de9c2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_default_config</definition>
        <argsstring>(UART_Type *ptr, uart_config_t *config)</argsstring>
        <name>uart_default_config</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interface_1ga7cceb603b2efe4f7c89b9bfd2bc47ecf" kindref="member">uart_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get default config. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to save default values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="643" column="6" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="27" bodyend="57" declfile="drivers/inc/hpm_uart_drv.h" declline="643" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga1aea4fca34f2a53105c3326dda7aafc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_init</definition>
        <argsstring>(UART_Type *ptr, uart_config_t *config)</argsstring>
        <name>uart_init</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interface_1ga7cceb603b2efe4f7c89b9bfd2bc47ecf" kindref="member">uart_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialization. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to config struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>only if it succeeds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="652" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="96" bodyend="199" declfile="drivers/inc/hpm_uart_drv.h" declline="652" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga768c24bffe679cf9a18c4b7a14deff3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_send_byte</definition>
        <argsstring>(UART_Type *ptr, uint8_t c)</argsstring>
        <name>uart_send_byte</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Send one byte after checking thresh hold status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte to be sent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>only if it succeeds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="661" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="223" bodyend="240" declfile="drivers/inc/hpm_uart_drv.h" declline="661" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gac68249468a133a73a3c8889e6f47ca45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_receive_byte</definition>
        <argsstring>(UART_Type *ptr, uint8_t *c)</argsstring>
        <name>uart_receive_byte</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Receive one byte after checking data ready status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer to save the byte received on UART </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>only if it succeeds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="670" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="259" bodyend="276" declfile="drivers/inc/hpm_uart_drv.h" declline="670" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga2317b3b585782587c359f7fccfb6077d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_try_receive_byte</definition>
        <argsstring>(UART_Type *ptr, uint8_t *c)</argsstring>
        <name>uart_try_receive_byte</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Try to receive one byte without checking data ready status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer to save the byte received on UART </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>only if it succeeds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="679" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="278" bodyend="286" declfile="drivers/inc/hpm_uart_drv.h" declline="679" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gad319f13e3e38f2852fa94df527c16d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_set_signal_level</definition>
        <argsstring>(UART_Type *ptr, uart_signal_t signal, uart_signal_level_t level)</argsstring>
        <name>uart_set_signal_level</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interface_1gaabeb807de70635ecab1bc70dd6db895f" kindref="member">uart_signal_t</ref></type>
          <declname>signal</declname>
        </param>
        <param>
          <type><ref refid="group__uart__interface_1ga9e7c512e46b16def679a98e7832818d9" kindref="member">uart_signal_level_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set uart signal output level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>Target signal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Target signal level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="688" column="6" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="288" bodyend="295" declfile="drivers/inc/hpm_uart_drv.h" declline="688" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga093b15f7a263041a2d7144f35b5ebdac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_flush</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_flush</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Flush sending buffer/fifo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>only if it succeeds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="698" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="242" bodyend="257" declfile="drivers/inc/hpm_uart_drv.h" declline="698" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga1c64e085c9c2d10f4fe8f9ca6e34fa38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_receive_data</definition>
        <argsstring>(UART_Type *ptr, uint8_t *buf, uint32_t size_in_byte)</argsstring>
        <name>uart_receive_data</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size_in_byte</declname>
        </param>
        <briefdescription>
<para>Receive bytes blocking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to save received data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_in_byte</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in byte to be sent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>only if it succeeds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="708" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="297" bodyend="305" declfile="drivers/inc/hpm_uart_drv.h" declline="708" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga44ab912005a3f999aa77c67eaa649ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_send_data</definition>
        <argsstring>(UART_Type *ptr, uint8_t *buf, uint32_t size_in_byte)</argsstring>
        <name>uart_send_data</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size_in_byte</declname>
        </param>
        <briefdescription>
<para>Send bytes blocking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_in_byte</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in byte to be sent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>only if it succeeds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="718" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="307" bodyend="315" declfile="drivers/inc/hpm_uart_drv.h" declline="718" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga2c8de76bae1caada7c302a05bb351083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t uart_set_baudrate</definition>
        <argsstring>(UART_Type *ptr, uint32_t baudrate, uint32_t src_clock_hz)</argsstring>
        <name>uart_set_baudrate</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baudrate</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>src_clock_hz</declname>
        </param>
        <briefdescription>
<para>Sets UART baudrate. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures the UART module baud rate. This function is used to update the UART module baud rate after the UART module is initialized by the uart_init.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>UART baudrate to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_clock_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>UART clock source frequency in Hz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_uart_no_suitable_baudrate_parameter_found</parametername>
</parameternamelist>
<parameterdescription>
<para>Baudrate is not supported in the current clock source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>Set baudrate succeeded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="732" column="12" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="201" bodyend="221" declfile="drivers/inc/hpm_uart_drv.h" declline="732" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga0928aa0e4f2f2a77d3f4c25db59fd0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uart_config_transfer_trig_mode</definition>
        <argsstring>(UART_Type *ptr, uart_trig_config_t *config)</argsstring>
        <name>uart_config_transfer_trig_mode</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structuart__trig__config__t" kindref="compound">uart_trig_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>uart configure transfer trigger mode </para>
        </briefdescription>
        <detaileddescription>
<para>This function can configure uart to send data in fifo after being triggered</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structuart__trig__config__t" kindref="compound">uart_trig_config_t</ref> config </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="744" column="6" bodyfile="drivers/src/hpm_uart_drv.c" bodystart="360" bodyend="367" declfile="drivers/inc/hpm_uart_drv.h" declline="744" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga42fb34f7395cb281eb6a83f3db1ffe83" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_software_trig_transfer</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_software_trig_transfer</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>uart software trigger transmit </para>
        </briefdescription>
        <detaileddescription>
<para>This function immediately triggers the transfer, the transfer configed by <ref refid="group__uart__interface_1ga0928aa0e4f2f2a77d3f4c25db59fd0c5" kindref="member">uart_config_transfer_trig_mode()</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="753" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="753" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gaa8b5441567869dfa16a7a309a861987e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_enable_hardware_trig_transfer</definition>
        <argsstring>(UART_Type *ptr, bool enable)</argsstring>
        <name>uart_enable_hardware_trig_transfer</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>uart enable hardware trigger mode </para>
        </briefdescription>
        <detaileddescription>
<para>This function enable hardware trigger the transfer, the transfer start when hardware event occured</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true for enable, false for disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="767" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="767" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga5b4290fdbfb11cdd1549ee406e34eb12" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t uart_get_data_count_in_rx_fifo</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_get_data_count_in_rx_fifo</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>UART get data count in rx fifo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>count </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="782" column="23" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="782" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gadc3a4bc97587e9b10bde3b4f8f122ee9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t uart_get_data_count_in_tx_fifo</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_get_data_count_in_tx_fifo</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>UART get data count in tx fifo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>count </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="793" column="23" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="793" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga83296a578552ead8ebdb47c4f9862c9a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_enable_9bit_transmit_mode</definition>
        <argsstring>(UART_Type *ptr, bool enable)</argsstring>
        <name>uart_enable_9bit_transmit_mode</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>uart enable 9bit transmit mode </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true for enable, false for disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="806" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="806" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga5cb7ffa62820d08c5868e027397c8b00" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_enable_address0_match</definition>
        <argsstring>(UART_Type *ptr, uint8_t addr)</argsstring>
        <name>uart_enable_address0_match</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>uart enable address0 match </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>address value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="825" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="825" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga2f684a1b98d1cfb600df4655a5d78d21" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_enable_address1_match</definition>
        <argsstring>(UART_Type *ptr, uint8_t addr)</argsstring>
        <name>uart_enable_address1_match</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>uart enable address1 match </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>address value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="837" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="837" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga1b5c455852c5a7ac40608f0e1ce42a18" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_disable_address0_match</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_disable_address0_match</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>uart disable address0 match </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="848" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="848" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga9e7604c26dc91fc6d12429d42018ba3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_disable_address1_match</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_disable_address1_match</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>uart disable address1 match </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="858" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="858" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gada6249f43e6019d6dada63e8228f6d83" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_disable_address_match</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_disable_address_match</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>uart disable address match(address0 and address1) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="868" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="868" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga57b76091e4ff343066dd8047d3131c2b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool uart_is_addr_match</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_is_addr_match</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Determine whether address match for 9bit mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if uart address is not match </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="878" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="878" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gae1e466c7d11b42cffc1fb8c898e11f6c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_clear_addr_match_flag</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_clear_addr_match_flag</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Clear UART address match Flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="887" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="887" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga7a698d65886c4b8b43eedbc374e551d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool uart_is_addr_match_and_rxidle</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_is_addr_match_and_rxidle</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Determine whether address match and rx idle for 9bit mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if uart address is not match and not rx idle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="897" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="897" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga049f7e43373f5c7c79f81fe54000df81" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_clear_addr_match_and_rxidle_flag</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_clear_addr_match_and_rxidle_flag</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Clear UART address match and rxidle Flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="906" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="906" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga9659edde604b0b7b7679c91ccf7c924d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool uart_is_data_lost</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_is_data_lost</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Determine whether data lost for 9bit mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>if uart data is not lost </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="916" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="916" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1gac026630871ccb066a90c5da9ea6b4fd4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_clear_data_lost_flag</definition>
        <argsstring>(UART_Type *ptr)</argsstring>
        <name>uart_clear_data_lost_flag</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Clear UART data lost Flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="925" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="925" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="group__uart__interface_1ga96f75a2d13d75b97738676a11acd55b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void uart_modem_write_rts_pin</definition>
        <argsstring>(UART_Type *ptr, uint8_t high)</argsstring>
        <name>uart_modem_write_rts_pin</name>
        <param>
          <type><ref refid="structUART__Type" kindref="compound">UART_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>high</declname>
        </param>
        <briefdescription>
<para>Write RTS level for uart modem mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>UART base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high</parametername>
</parameternamelist>
<parameterdescription>
<para>RTS set to high when it is set to true </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_uart_drv.h" line="937" column="20" bodyfile="drivers/inc/hpm_uart_drv.h" bodystart="937" bodyend="944"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>UART driver APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
