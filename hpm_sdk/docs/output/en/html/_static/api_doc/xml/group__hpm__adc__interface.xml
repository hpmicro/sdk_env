<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="group__hpm__adc__interface" kind="group">
    <compoundname>hpm_adc_interface</compoundname>
    <title>HPM ADC driver APIs</title>
    <innerclass refid="unionadc__base" prot="public">adc_base</innerclass>
    <innerclass refid="structadc__config__t" prot="public">adc_config_t</innerclass>
    <innerclass refid="structadc__channel__config__t" prot="public">adc_channel_config_t</innerclass>
    <innerclass refid="structadc__dma__config__t" prot="public">adc_dma_config_t</innerclass>
    <innerclass refid="structadc__prd__config__t" prot="public">adc_prd_config_t</innerclass>
    <innerclass refid="structadc__seq__config__t" prot="public">adc_seq_config_t</innerclass>
    <innerclass refid="structadc__pmt__config__t" prot="public">adc_pmt_config_t</innerclass>
    <innerclass refid="structadc__type" prot="public">adc_type</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="group__hpm__adc__interface_1ga55b7d5043773aab9d11897994476f318" prot="public" static="no" strong="no">
        <type></type>
        <name>adc_module</name>
        <enumvalue id="group__hpm__adc__interface_1gga55b7d5043773aab9d11897994476f318a1528f0b10b250931f3f578616438a3c0" prot="public">
          <name>adc_module_adc12</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__hpm__adc__interface_1gga55b7d5043773aab9d11897994476f318a8fd228fc8f3f82de82467ec201df54d5" prot="public">
          <name>adc_module_adc16</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="45" column="1" bodyfile="components/adc/hpm_adc.h" bodystart="45" bodyend="48"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__hpm__adc__interface_1gaac844aed4fbd9890f1fa3d51cf907221" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_init_default_config</definition>
        <argsstring>(adc_config_t *config)</argsstring>
        <name>hpm_adc_init_default_config</name>
        <param>
          <type><ref refid="structadc__config__t" kindref="compound">adc_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get a default configuration for an ADC instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the configuration struct of &quot;adc_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="170" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="170" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1gae5b9bca5f19db0c6ccdae24b44002651" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_init_channel_default_config</definition>
        <argsstring>(adc_channel_config_t *config)</argsstring>
        <name>hpm_adc_init_channel_default_config</name>
        <param>
          <type><ref refid="structadc__channel__config__t" kindref="compound">adc_channel_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get a default configuration for an ADC channel instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the configuration struct of &quot;adc_channel_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="189" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="189" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1gaf419b91774d88f1b99bfd1a3de179cf0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t hpm_adc_init</definition>
        <argsstring>(adc_config_t *config)</argsstring>
        <name>hpm_adc_init</name>
        <param>
          <type><ref refid="structadc__config__t" kindref="compound">adc_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize an ADC instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the configuration struct of &quot;adc_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialize an ADC instance successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialize an ADC instance unsuccessfully because of passing one or more invalid arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="209" column="26" bodyfile="components/adc/hpm_adc.h" bodystart="209" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1gad24fa6c050f70c71cdd4892fc74b308f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t hpm_adc_channel_init</definition>
        <argsstring>(adc_channel_config_t *config)</argsstring>
        <name>hpm_adc_channel_init</name>
        <param>
          <type><ref refid="structadc__channel__config__t" kindref="compound">adc_channel_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize an ADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the configuration struct of &quot;adc_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialize an ADC instance successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialize an ADC instance unsuccessfully because of passing one or more invalid arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="235" column="26" bodyfile="components/adc/hpm_adc.h" bodystart="235" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga8e45273d96e46982253e876a81bfa156" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t hpm_adc_set_period_config</definition>
        <argsstring>(adc_prd_config_t *config)</argsstring>
        <name>hpm_adc_set_period_config</name>
        <param>
          <type><ref refid="structadc__prd__config__t" kindref="compound">adc_prd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure the periodic mode for an ADC instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the configuration struct of &quot;adc_prd_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>Configure the periodic mode for an ADC instance successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Configure the periodic mode for an ADC instance unsuccessfully because of passing one or more invalid arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="262" column="26" bodyfile="components/adc/hpm_adc.h" bodystart="262" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1gaa84edd380cf884dc9f4dc7d51708daee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t hpm_adc_set_sequence_config</definition>
        <argsstring>(adc_seq_config_t *config)</argsstring>
        <name>hpm_adc_set_sequence_config</name>
        <param>
          <type><ref refid="structadc__seq__config__t" kindref="compound">adc_seq_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure the sequence mode for an ADC instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to configuration struct of &quot;adc_seq_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>Configure the sequence mode for an ADC instance successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Configure the sequence mode for an ADC instance unsuccessfully because of passing one or more invalid arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="288" column="26" bodyfile="components/adc/hpm_adc.h" bodystart="288" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga310af4f1092d3b87ed1e1431fb7202d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t hpm_adc_set_preempt_config</definition>
        <argsstring>(adc_pmt_config_t *config)</argsstring>
        <name>hpm_adc_set_preempt_config</name>
        <param>
          <type><ref refid="structadc__pmt__config__t" kindref="compound">adc_pmt_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure the preemption mode for an ADC instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to configuration struct of &quot;adc_pmt_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>Configure the preemption mode for an ADC instance successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Configure the preemption mode for an ADC instance unsuccessfully because of passing one or more invalid arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="314" column="26" bodyfile="components/adc/hpm_adc.h" bodystart="314" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga426427b2360f86c22e168fa55d8cc8ca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_set_seq_stop_pos</definition>
        <argsstring>(adc_type *ptr, uint16_t stop_pos)</argsstring>
        <name>hpm_adc_set_seq_stop_pos</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>stop_pos</declname>
        </param>
        <briefdescription>
<para>Configure the stop position offset in the specified memory for DMA write operation for sequence mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stop_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The stop position offset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="339" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="339" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga64d800be4d0d2c1e9ab65c66b0da8ade" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_init_pmt_dma</definition>
        <argsstring>(adc_type *ptr, uint32_t addr)</argsstring>
        <name>hpm_adc_init_pmt_dma</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Configure the start address of DMA write operation for preemption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The start address of DMA write operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="358" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="358" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga98a333234da423733fc9012faebfb120" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_init_seq_dma</definition>
        <argsstring>(adc_dma_config_t *config)</argsstring>
        <name>hpm_adc_init_seq_dma</name>
        <param>
          <type><ref refid="structadc__dma__config__t" kindref="compound">adc_dma_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure the start address of DMA write operation for preemption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to configuration struct of &quot;adc_dma_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="376" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="376" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga119fdd99707fb5074c7ee0e87153db72" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_disable_busywait</definition>
        <argsstring>(adc_dma_config_t *config)</argsstring>
        <name>hpm_adc_disable_busywait</name>
        <param>
          <type><ref refid="structadc__dma__config__t" kindref="compound">adc_dma_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Reset value of the WAIT_DIS bit. ADC blocks access to the associated peripheral bus until the ADC completes the conversion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to configuration struct of &quot;adc_dma_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="395" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="395" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga3806afd7edb5603998808fbcb01330f4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_enable_busywait</definition>
        <argsstring>(adc_dma_config_t *config)</argsstring>
        <name>hpm_adc_enable_busywait</name>
        <param>
          <type><ref refid="structadc__dma__config__t" kindref="compound">adc_dma_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Set value of the WAIT_DIS bit. The ADC does not block access to the associated peripheral bus until the ADC has completed its conversion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to configuration struct of &quot;adc_dma_config_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="414" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="414" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga2028e0492c0c109d2ea0e97670ba106b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t hpm_adc_get_status_flags</definition>
        <argsstring>(adc_type *ptr)</argsstring>
        <name>hpm_adc_get_status_flags</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get ADC status flags. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets all ADC status flags. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral base address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Status</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC interrupt status flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="435" column="24" bodyfile="components/adc/hpm_adc.h" bodystart="435" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1gac31f1d24794ad2039ab837b79c2e9515" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool hpm_adc_get_conv_valid_status</definition>
        <argsstring>(adc_type *ptr, uint8_t ch)</argsstring>
        <name>hpm_adc_get_conv_valid_status</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Get status flag of a conversion. </para>
        </briefdescription>
        <detaileddescription>
<para>This status flag is only used when wait_dis is set to disable.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ch</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Status</parametername>
</parameternamelist>
<parameterdescription>
<para>It means the current conversion is valid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="463" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="463" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga0d4de04cf9c73fb2a75f8e4d2fdf60df" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_clear_status_flags</definition>
        <argsstring>(adc_type *ptr, uint32_t mask)</argsstring>
        <name>hpm_adc_clear_status_flags</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Clear status flags. </para>
        </briefdescription>
        <detaileddescription>
<para>Only the specified flags can be cleared by writing INT_STS register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask value for flags to be cleared. Refer to &quot;adc12_irq_event_t&quot;. Refer to &quot;adc16_irq_event_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="490" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="490" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga2347758ffe5aecb63b5517bf5ae6670a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_enable_interrupts</definition>
        <argsstring>(adc_type *ptr, uint32_t mask)</argsstring>
        <name>hpm_adc_enable_interrupts</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Enable interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask value for interrupt events. Refer to &quot;adc12_irq_event_t&quot;.Refer to &quot;adc16_irq_event_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="509" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="509" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1gae77051b14d2245ec0748ce2d4e748694" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void hpm_adc_disable_interrupts</definition>
        <argsstring>(adc_type *ptr, uint32_t mask)</argsstring>
        <name>hpm_adc_disable_interrupts</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Disable interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask value for interrupt events. Refer to &quot;adc12_irq_event_t&quot;.Refer to &quot;adc16_irq_event_t&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="528" column="20" bodyfile="components/adc/hpm_adc.h" bodystart="528" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga91585aec3bae6f235e4c3c6d6fa57052" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t hpm_adc_get_oneshot_result</definition>
        <argsstring>(adc_type *ptr, uint8_t ch, uint16_t *result)</argsstring>
        <name>hpm_adc_get_oneshot_result</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get the result in oneshot mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ch</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC peripheral channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of an ADC12 conversion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>Get the result of an ADC12 conversion in oneshot mode successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Get the result of an ADC12 conversion in oneshot mode unsuccessfully because of passing invalid arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="551" column="26" bodyfile="components/adc/hpm_adc.h" bodystart="551" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1gacc77822a612a0d78d25da61adedf0c38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t hpm_adc_get_prd_result</definition>
        <argsstring>(adc_type *ptr, uint8_t ch, uint16_t *result)</argsstring>
        <name>hpm_adc_get_prd_result</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Get the result in periodic mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC12 peripheral base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ch</parametername>
</parameternamelist>
<parameterdescription>
<para>An ADC12 peripheral channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of an ADC12 conversion.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>Get the result of an ADC12 conversion in periodic mode successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Get the result of an ADC12 conversion in periodic mode unsuccessfully because of passing invalid arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="580" column="26" bodyfile="components/adc/hpm_adc.h" bodystart="580" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="group__hpm__adc__interface_1ga2179d23f5c28e24209d0489bb3e28f3b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t hpm_adc_trigger_seq_by_sw</definition>
        <argsstring>(adc_type *ptr)</argsstring>
        <name>hpm_adc_trigger_seq_by_sw</name>
        <param>
          <type><ref refid="structadc__type" kindref="compound">adc_type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Do a software trigger for sequence mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An adc peripheral base address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="605" column="26" bodyfile="components/adc/hpm_adc.h" bodystart="605" bodyend="618"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="define">
      <memberdef kind="define" id="group__hpm__adc__interface_1ga94d0b90f98f58a26297faac6fc1b12c4" prot="public" static="no">
        <name>ADCX_MODULE_ADC12</name>
        <initializer>1</initializer>
        <briefdescription>
<para>use adc12 or adc16. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="42" column="9" bodyfile="components/adc/hpm_adc.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__hpm__adc__interface_1gaf6169e746e43c5eba4ed02fc2f8bdc9b" prot="public" static="no">
        <name>ADCX_MODULE_ADC16</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/adc/hpm_adc.h" line="43" column="9" bodyfile="components/adc/hpm_adc.h" bodystart="43" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>ADC HAL driver APIs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
