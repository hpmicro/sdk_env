/*
 * Copyright (c) 2014-2016, Freescale Semiconductor, Inc.
 * Copyright 2016 NXP
 * Copyright (c) 2022 HPMicro
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Generated by erpcgen 1.10.0 on Mon Oct 28 10:27:48 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "erpc_motor_server.h"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11000 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif

ERPC_MANUALLY_CONSTRUCTED_STATIC(MotorSpeedControlService_service, s_MotorSpeedControlService_service);



// Call the correct server shim based on method unique ID.
erpc_status_t MotorSpeedControlService_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case kMotorSpeedControlService_erpcSetMotorSpeed_id:
        {
            erpcStatus = erpcSetMotorSpeed_shim(codec, messageFactory, sequence);
            break;
        }

        case kMotorSpeedControlService_erpcGetMotorSpeed_id:
        {
            erpcStatus = erpcGetMotorSpeed_shim(codec, messageFactory, sequence);
            break;
        }

        case kMotorSpeedControlService_erpcSwitchLightLed_id:
        {
            erpcStatus = erpcSwitchLightLed_shim(codec, messageFactory, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for erpcSetMotorSpeed of MotorSpeedControlService interface.
erpc_status_t MotorSpeedControlService_service::erpcSetMotorSpeed_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    float target_speed;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&target_speed);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        erpcSetMotorSpeed(target_speed);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kMotorSpeedControlService_service_id, kMotorSpeedControlService_erpcSetMotorSpeed_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for erpcGetMotorSpeed of MotorSpeedControlService interface.
erpc_status_t MotorSpeedControlService_service::erpcGetMotorSpeed_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    float result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = erpcGetMotorSpeed();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kMotorSpeedControlService_service_id, kMotorSpeedControlService_erpcGetMotorSpeed_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for erpcSwitchLightLed of MotorSpeedControlService interface.
erpc_status_t MotorSpeedControlService_service::erpcSwitchLightLed_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    // startReadMessage() was already called before this shim was invoked.

    // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
    nestingDetection = true;
#endif
    erpcSwitchLightLed();
#if ERPC_NESTED_CALLS_DETECTION
    nestingDetection = false;
#endif
    return codec->getStatus();
}

erpc_service_t create_MotorSpeedControlService_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) MotorSpeedControlService_service();
#else
    if (s_MotorSpeedControlService_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_MotorSpeedControlService_service.construct();
        service = s_MotorSpeedControlService_service.get();
    }
#endif

    return service;
}

void destroy_MotorSpeedControlService_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(service != NULL);
    delete (MotorSpeedControlService_service *)service;
#else
    (void)service;
    erpc_assert(service == s_MotorSpeedControlService_service.get());
    s_MotorSpeedControlService_service.destroy();
#endif
}

